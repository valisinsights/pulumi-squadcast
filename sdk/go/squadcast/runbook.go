// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

// [Squadcast Runbook](https://support.squadcast.com/docs/runbooks) is a compilation of routine procedures and operations that are documented for reference while working on a critical incident. Sometimes, it can also be referred to as a Playbook.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example team name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "test@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewRunbook(ctx, "exampleRunbook", &squadcast.RunbookArgs{
//				TeamId: *pulumi.String(exampleTeam.Id),
//				Steps: squadcast.RunbookStepArray{
//					&squadcast.RunbookStepArgs{
//						Content: pulumi.String("some text here"),
//					},
//					&squadcast.RunbookStepArgs{
//						Content: pulumi.String("some text here 2"),
//					},
//				},
//				EntityOwner: &squadcast.RunbookEntityOwnerArgs{
//					Id:   *pulumi.String(exampleUser.Id),
//					Type: pulumi.String("user"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teamID:runbookID Use 'Get All Teams' and 'Get All Runbooks' APIs to get the id of the team and runbook respectively
//
// ```sh
//
//	$ pulumi import squadcast:index/runbook:Runbook test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
//
// ```
type Runbook struct {
	pulumi.CustomResourceState

	// Runbooks owner.
	EntityOwner RunbookEntityOwnerOutput `pulumi:"entityOwner"`
	// Name of the Runbook.
	Name pulumi.StringOutput `pulumi:"name"`
	// Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
	Steps RunbookStepArrayOutput `pulumi:"steps"`
	// Team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewRunbook registers a new resource with the given unique name, arguments, and options.
func NewRunbook(ctx *pulumi.Context,
	name string, args *RunbookArgs, opts ...pulumi.ResourceOption) (*Runbook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Steps == nil {
		return nil, errors.New("invalid value for required argument 'Steps'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Runbook
	err := ctx.RegisterResource("squadcast:index/runbook:Runbook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRunbook gets an existing Runbook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRunbook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RunbookState, opts ...pulumi.ResourceOption) (*Runbook, error) {
	var resource Runbook
	err := ctx.ReadResource("squadcast:index/runbook:Runbook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Runbook resources.
type runbookState struct {
	// Runbooks owner.
	EntityOwner *RunbookEntityOwner `pulumi:"entityOwner"`
	// Name of the Runbook.
	Name *string `pulumi:"name"`
	// Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
	Steps []RunbookStep `pulumi:"steps"`
	// Team id.
	TeamId *string `pulumi:"teamId"`
}

type RunbookState struct {
	// Runbooks owner.
	EntityOwner RunbookEntityOwnerPtrInput
	// Name of the Runbook.
	Name pulumi.StringPtrInput
	// Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
	Steps RunbookStepArrayInput
	// Team id.
	TeamId pulumi.StringPtrInput
}

func (RunbookState) ElementType() reflect.Type {
	return reflect.TypeOf((*runbookState)(nil)).Elem()
}

type runbookArgs struct {
	// Runbooks owner.
	EntityOwner *RunbookEntityOwner `pulumi:"entityOwner"`
	// Name of the Runbook.
	Name *string `pulumi:"name"`
	// Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
	Steps []RunbookStep `pulumi:"steps"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a Runbook resource.
type RunbookArgs struct {
	// Runbooks owner.
	EntityOwner RunbookEntityOwnerPtrInput
	// Name of the Runbook.
	Name pulumi.StringPtrInput
	// Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
	Steps RunbookStepArrayInput
	// Team id.
	TeamId pulumi.StringInput
}

func (RunbookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runbookArgs)(nil)).Elem()
}

type RunbookInput interface {
	pulumi.Input

	ToRunbookOutput() RunbookOutput
	ToRunbookOutputWithContext(ctx context.Context) RunbookOutput
}

func (*Runbook) ElementType() reflect.Type {
	return reflect.TypeOf((**Runbook)(nil)).Elem()
}

func (i *Runbook) ToRunbookOutput() RunbookOutput {
	return i.ToRunbookOutputWithContext(context.Background())
}

func (i *Runbook) ToRunbookOutputWithContext(ctx context.Context) RunbookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookOutput)
}

// RunbookArrayInput is an input type that accepts RunbookArray and RunbookArrayOutput values.
// You can construct a concrete instance of `RunbookArrayInput` via:
//
//	RunbookArray{ RunbookArgs{...} }
type RunbookArrayInput interface {
	pulumi.Input

	ToRunbookArrayOutput() RunbookArrayOutput
	ToRunbookArrayOutputWithContext(context.Context) RunbookArrayOutput
}

type RunbookArray []RunbookInput

func (RunbookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Runbook)(nil)).Elem()
}

func (i RunbookArray) ToRunbookArrayOutput() RunbookArrayOutput {
	return i.ToRunbookArrayOutputWithContext(context.Background())
}

func (i RunbookArray) ToRunbookArrayOutputWithContext(ctx context.Context) RunbookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookArrayOutput)
}

// RunbookMapInput is an input type that accepts RunbookMap and RunbookMapOutput values.
// You can construct a concrete instance of `RunbookMapInput` via:
//
//	RunbookMap{ "key": RunbookArgs{...} }
type RunbookMapInput interface {
	pulumi.Input

	ToRunbookMapOutput() RunbookMapOutput
	ToRunbookMapOutputWithContext(context.Context) RunbookMapOutput
}

type RunbookMap map[string]RunbookInput

func (RunbookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Runbook)(nil)).Elem()
}

func (i RunbookMap) ToRunbookMapOutput() RunbookMapOutput {
	return i.ToRunbookMapOutputWithContext(context.Background())
}

func (i RunbookMap) ToRunbookMapOutputWithContext(ctx context.Context) RunbookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookMapOutput)
}

type RunbookOutput struct{ *pulumi.OutputState }

func (RunbookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Runbook)(nil)).Elem()
}

func (o RunbookOutput) ToRunbookOutput() RunbookOutput {
	return o
}

func (o RunbookOutput) ToRunbookOutputWithContext(ctx context.Context) RunbookOutput {
	return o
}

// Runbooks owner.
func (o RunbookOutput) EntityOwner() RunbookEntityOwnerOutput {
	return o.ApplyT(func(v *Runbook) RunbookEntityOwnerOutput { return v.EntityOwner }).(RunbookEntityOwnerOutput)
}

// Name of the Runbook.
func (o RunbookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Runbook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
func (o RunbookOutput) Steps() RunbookStepArrayOutput {
	return o.ApplyT(func(v *Runbook) RunbookStepArrayOutput { return v.Steps }).(RunbookStepArrayOutput)
}

// Team id.
func (o RunbookOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *Runbook) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type RunbookArrayOutput struct{ *pulumi.OutputState }

func (RunbookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Runbook)(nil)).Elem()
}

func (o RunbookArrayOutput) ToRunbookArrayOutput() RunbookArrayOutput {
	return o
}

func (o RunbookArrayOutput) ToRunbookArrayOutputWithContext(ctx context.Context) RunbookArrayOutput {
	return o
}

func (o RunbookArrayOutput) Index(i pulumi.IntInput) RunbookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Runbook {
		return vs[0].([]*Runbook)[vs[1].(int)]
	}).(RunbookOutput)
}

type RunbookMapOutput struct{ *pulumi.OutputState }

func (RunbookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Runbook)(nil)).Elem()
}

func (o RunbookMapOutput) ToRunbookMapOutput() RunbookMapOutput {
	return o
}

func (o RunbookMapOutput) ToRunbookMapOutputWithContext(ctx context.Context) RunbookMapOutput {
	return o
}

func (o RunbookMapOutput) MapIndex(k pulumi.StringInput) RunbookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Runbook {
		return vs[0].(map[string]*Runbook)[vs[1].(string)]
	}).(RunbookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookInput)(nil)).Elem(), &Runbook{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookArrayInput)(nil)).Elem(), RunbookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookMapInput)(nil)).Elem(), RunbookMap{})
	pulumi.RegisterOutputType(RunbookOutput{})
	pulumi.RegisterOutputType(RunbookArrayOutput{})
	pulumi.RegisterOutputType(RunbookMapOutput{})
}
