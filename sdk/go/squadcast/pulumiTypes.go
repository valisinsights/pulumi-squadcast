// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

var _ = internal.GetEnvOrDefault

type DeduplicationRulesRule struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions []DeduplicationRulesRuleBasicExpression `pulumi:"basicExpressions"`
	// Denotes if dependent services should also be deduplicated
	DependencyDeduplication *bool `pulumi:"dependencyDeduplication"`
	// description.
	Description *string `pulumi:"description"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression *string `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic bool `pulumi:"isBasic"`
	// time unit (mins or hours)
	TimeUnit *string `pulumi:"timeUnit"`
	// integer for time_unit
	TimeWindow *int `pulumi:"timeWindow"`
}

// DeduplicationRulesRuleInput is an input type that accepts DeduplicationRulesRuleArgs and DeduplicationRulesRuleOutput values.
// You can construct a concrete instance of `DeduplicationRulesRuleInput` via:
//
//	DeduplicationRulesRuleArgs{...}
type DeduplicationRulesRuleInput interface {
	pulumi.Input

	ToDeduplicationRulesRuleOutput() DeduplicationRulesRuleOutput
	ToDeduplicationRulesRuleOutputWithContext(context.Context) DeduplicationRulesRuleOutput
}

type DeduplicationRulesRuleArgs struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions DeduplicationRulesRuleBasicExpressionArrayInput `pulumi:"basicExpressions"`
	// Denotes if dependent services should also be deduplicated
	DependencyDeduplication pulumi.BoolPtrInput `pulumi:"dependencyDeduplication"`
	// description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic pulumi.BoolInput `pulumi:"isBasic"`
	// time unit (mins or hours)
	TimeUnit pulumi.StringPtrInput `pulumi:"timeUnit"`
	// integer for time_unit
	TimeWindow pulumi.IntPtrInput `pulumi:"timeWindow"`
}

func (DeduplicationRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeduplicationRulesRule)(nil)).Elem()
}

func (i DeduplicationRulesRuleArgs) ToDeduplicationRulesRuleOutput() DeduplicationRulesRuleOutput {
	return i.ToDeduplicationRulesRuleOutputWithContext(context.Background())
}

func (i DeduplicationRulesRuleArgs) ToDeduplicationRulesRuleOutputWithContext(ctx context.Context) DeduplicationRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeduplicationRulesRuleOutput)
}

// DeduplicationRulesRuleArrayInput is an input type that accepts DeduplicationRulesRuleArray and DeduplicationRulesRuleArrayOutput values.
// You can construct a concrete instance of `DeduplicationRulesRuleArrayInput` via:
//
//	DeduplicationRulesRuleArray{ DeduplicationRulesRuleArgs{...} }
type DeduplicationRulesRuleArrayInput interface {
	pulumi.Input

	ToDeduplicationRulesRuleArrayOutput() DeduplicationRulesRuleArrayOutput
	ToDeduplicationRulesRuleArrayOutputWithContext(context.Context) DeduplicationRulesRuleArrayOutput
}

type DeduplicationRulesRuleArray []DeduplicationRulesRuleInput

func (DeduplicationRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeduplicationRulesRule)(nil)).Elem()
}

func (i DeduplicationRulesRuleArray) ToDeduplicationRulesRuleArrayOutput() DeduplicationRulesRuleArrayOutput {
	return i.ToDeduplicationRulesRuleArrayOutputWithContext(context.Background())
}

func (i DeduplicationRulesRuleArray) ToDeduplicationRulesRuleArrayOutputWithContext(ctx context.Context) DeduplicationRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeduplicationRulesRuleArrayOutput)
}

type DeduplicationRulesRuleOutput struct{ *pulumi.OutputState }

func (DeduplicationRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeduplicationRulesRule)(nil)).Elem()
}

func (o DeduplicationRulesRuleOutput) ToDeduplicationRulesRuleOutput() DeduplicationRulesRuleOutput {
	return o
}

func (o DeduplicationRulesRuleOutput) ToDeduplicationRulesRuleOutputWithContext(ctx context.Context) DeduplicationRulesRuleOutput {
	return o
}

// The basic expression which needs to be evaluated to be true for this rule to apply.
func (o DeduplicationRulesRuleOutput) BasicExpressions() DeduplicationRulesRuleBasicExpressionArrayOutput {
	return o.ApplyT(func(v DeduplicationRulesRule) []DeduplicationRulesRuleBasicExpression { return v.BasicExpressions }).(DeduplicationRulesRuleBasicExpressionArrayOutput)
}

// Denotes if dependent services should also be deduplicated
func (o DeduplicationRulesRuleOutput) DependencyDeduplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeduplicationRulesRule) *bool { return v.DependencyDeduplication }).(pulumi.BoolPtrOutput)
}

// description.
func (o DeduplicationRulesRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeduplicationRulesRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The expression which needs to be evaluated to be true for this rule to apply.
func (o DeduplicationRulesRuleOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeduplicationRulesRule) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
func (o DeduplicationRulesRuleOutput) IsBasic() pulumi.BoolOutput {
	return o.ApplyT(func(v DeduplicationRulesRule) bool { return v.IsBasic }).(pulumi.BoolOutput)
}

// time unit (mins or hours)
func (o DeduplicationRulesRuleOutput) TimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeduplicationRulesRule) *string { return v.TimeUnit }).(pulumi.StringPtrOutput)
}

// integer for time_unit
func (o DeduplicationRulesRuleOutput) TimeWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeduplicationRulesRule) *int { return v.TimeWindow }).(pulumi.IntPtrOutput)
}

type DeduplicationRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (DeduplicationRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeduplicationRulesRule)(nil)).Elem()
}

func (o DeduplicationRulesRuleArrayOutput) ToDeduplicationRulesRuleArrayOutput() DeduplicationRulesRuleArrayOutput {
	return o
}

func (o DeduplicationRulesRuleArrayOutput) ToDeduplicationRulesRuleArrayOutputWithContext(ctx context.Context) DeduplicationRulesRuleArrayOutput {
	return o
}

func (o DeduplicationRulesRuleArrayOutput) Index(i pulumi.IntInput) DeduplicationRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeduplicationRulesRule {
		return vs[0].([]DeduplicationRulesRule)[vs[1].(int)]
	}).(DeduplicationRulesRuleOutput)
}

type DeduplicationRulesRuleBasicExpression struct {
	Lhs string `pulumi:"lhs"`
	Op  string `pulumi:"op"`
	Rhs string `pulumi:"rhs"`
}

// DeduplicationRulesRuleBasicExpressionInput is an input type that accepts DeduplicationRulesRuleBasicExpressionArgs and DeduplicationRulesRuleBasicExpressionOutput values.
// You can construct a concrete instance of `DeduplicationRulesRuleBasicExpressionInput` via:
//
//	DeduplicationRulesRuleBasicExpressionArgs{...}
type DeduplicationRulesRuleBasicExpressionInput interface {
	pulumi.Input

	ToDeduplicationRulesRuleBasicExpressionOutput() DeduplicationRulesRuleBasicExpressionOutput
	ToDeduplicationRulesRuleBasicExpressionOutputWithContext(context.Context) DeduplicationRulesRuleBasicExpressionOutput
}

type DeduplicationRulesRuleBasicExpressionArgs struct {
	Lhs pulumi.StringInput `pulumi:"lhs"`
	Op  pulumi.StringInput `pulumi:"op"`
	Rhs pulumi.StringInput `pulumi:"rhs"`
}

func (DeduplicationRulesRuleBasicExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeduplicationRulesRuleBasicExpression)(nil)).Elem()
}

func (i DeduplicationRulesRuleBasicExpressionArgs) ToDeduplicationRulesRuleBasicExpressionOutput() DeduplicationRulesRuleBasicExpressionOutput {
	return i.ToDeduplicationRulesRuleBasicExpressionOutputWithContext(context.Background())
}

func (i DeduplicationRulesRuleBasicExpressionArgs) ToDeduplicationRulesRuleBasicExpressionOutputWithContext(ctx context.Context) DeduplicationRulesRuleBasicExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeduplicationRulesRuleBasicExpressionOutput)
}

// DeduplicationRulesRuleBasicExpressionArrayInput is an input type that accepts DeduplicationRulesRuleBasicExpressionArray and DeduplicationRulesRuleBasicExpressionArrayOutput values.
// You can construct a concrete instance of `DeduplicationRulesRuleBasicExpressionArrayInput` via:
//
//	DeduplicationRulesRuleBasicExpressionArray{ DeduplicationRulesRuleBasicExpressionArgs{...} }
type DeduplicationRulesRuleBasicExpressionArrayInput interface {
	pulumi.Input

	ToDeduplicationRulesRuleBasicExpressionArrayOutput() DeduplicationRulesRuleBasicExpressionArrayOutput
	ToDeduplicationRulesRuleBasicExpressionArrayOutputWithContext(context.Context) DeduplicationRulesRuleBasicExpressionArrayOutput
}

type DeduplicationRulesRuleBasicExpressionArray []DeduplicationRulesRuleBasicExpressionInput

func (DeduplicationRulesRuleBasicExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeduplicationRulesRuleBasicExpression)(nil)).Elem()
}

func (i DeduplicationRulesRuleBasicExpressionArray) ToDeduplicationRulesRuleBasicExpressionArrayOutput() DeduplicationRulesRuleBasicExpressionArrayOutput {
	return i.ToDeduplicationRulesRuleBasicExpressionArrayOutputWithContext(context.Background())
}

func (i DeduplicationRulesRuleBasicExpressionArray) ToDeduplicationRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) DeduplicationRulesRuleBasicExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeduplicationRulesRuleBasicExpressionArrayOutput)
}

type DeduplicationRulesRuleBasicExpressionOutput struct{ *pulumi.OutputState }

func (DeduplicationRulesRuleBasicExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeduplicationRulesRuleBasicExpression)(nil)).Elem()
}

func (o DeduplicationRulesRuleBasicExpressionOutput) ToDeduplicationRulesRuleBasicExpressionOutput() DeduplicationRulesRuleBasicExpressionOutput {
	return o
}

func (o DeduplicationRulesRuleBasicExpressionOutput) ToDeduplicationRulesRuleBasicExpressionOutputWithContext(ctx context.Context) DeduplicationRulesRuleBasicExpressionOutput {
	return o
}

func (o DeduplicationRulesRuleBasicExpressionOutput) Lhs() pulumi.StringOutput {
	return o.ApplyT(func(v DeduplicationRulesRuleBasicExpression) string { return v.Lhs }).(pulumi.StringOutput)
}

func (o DeduplicationRulesRuleBasicExpressionOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v DeduplicationRulesRuleBasicExpression) string { return v.Op }).(pulumi.StringOutput)
}

func (o DeduplicationRulesRuleBasicExpressionOutput) Rhs() pulumi.StringOutput {
	return o.ApplyT(func(v DeduplicationRulesRuleBasicExpression) string { return v.Rhs }).(pulumi.StringOutput)
}

type DeduplicationRulesRuleBasicExpressionArrayOutput struct{ *pulumi.OutputState }

func (DeduplicationRulesRuleBasicExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeduplicationRulesRuleBasicExpression)(nil)).Elem()
}

func (o DeduplicationRulesRuleBasicExpressionArrayOutput) ToDeduplicationRulesRuleBasicExpressionArrayOutput() DeduplicationRulesRuleBasicExpressionArrayOutput {
	return o
}

func (o DeduplicationRulesRuleBasicExpressionArrayOutput) ToDeduplicationRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) DeduplicationRulesRuleBasicExpressionArrayOutput {
	return o
}

func (o DeduplicationRulesRuleBasicExpressionArrayOutput) Index(i pulumi.IntInput) DeduplicationRulesRuleBasicExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeduplicationRulesRuleBasicExpression {
		return vs[0].([]DeduplicationRulesRuleBasicExpression)[vs[1].(int)]
	}).(DeduplicationRulesRuleBasicExpressionOutput)
}

type EscalationPolicyEntityOwner struct {
	// Escalation policy owner id.
	Id string `pulumi:"id"`
	// Escalation policy owner type. (user or squad or team)
	Type string `pulumi:"type"`
}

// EscalationPolicyEntityOwnerInput is an input type that accepts EscalationPolicyEntityOwnerArgs and EscalationPolicyEntityOwnerOutput values.
// You can construct a concrete instance of `EscalationPolicyEntityOwnerInput` via:
//
//	EscalationPolicyEntityOwnerArgs{...}
type EscalationPolicyEntityOwnerInput interface {
	pulumi.Input

	ToEscalationPolicyEntityOwnerOutput() EscalationPolicyEntityOwnerOutput
	ToEscalationPolicyEntityOwnerOutputWithContext(context.Context) EscalationPolicyEntityOwnerOutput
}

type EscalationPolicyEntityOwnerArgs struct {
	// Escalation policy owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Escalation policy owner type. (user or squad or team)
	Type pulumi.StringInput `pulumi:"type"`
}

func (EscalationPolicyEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyEntityOwner)(nil)).Elem()
}

func (i EscalationPolicyEntityOwnerArgs) ToEscalationPolicyEntityOwnerOutput() EscalationPolicyEntityOwnerOutput {
	return i.ToEscalationPolicyEntityOwnerOutputWithContext(context.Background())
}

func (i EscalationPolicyEntityOwnerArgs) ToEscalationPolicyEntityOwnerOutputWithContext(ctx context.Context) EscalationPolicyEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyEntityOwnerOutput)
}

func (i EscalationPolicyEntityOwnerArgs) ToEscalationPolicyEntityOwnerPtrOutput() EscalationPolicyEntityOwnerPtrOutput {
	return i.ToEscalationPolicyEntityOwnerPtrOutputWithContext(context.Background())
}

func (i EscalationPolicyEntityOwnerArgs) ToEscalationPolicyEntityOwnerPtrOutputWithContext(ctx context.Context) EscalationPolicyEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyEntityOwnerOutput).ToEscalationPolicyEntityOwnerPtrOutputWithContext(ctx)
}

// EscalationPolicyEntityOwnerPtrInput is an input type that accepts EscalationPolicyEntityOwnerArgs, EscalationPolicyEntityOwnerPtr and EscalationPolicyEntityOwnerPtrOutput values.
// You can construct a concrete instance of `EscalationPolicyEntityOwnerPtrInput` via:
//
//	        EscalationPolicyEntityOwnerArgs{...}
//
//	or:
//
//	        nil
type EscalationPolicyEntityOwnerPtrInput interface {
	pulumi.Input

	ToEscalationPolicyEntityOwnerPtrOutput() EscalationPolicyEntityOwnerPtrOutput
	ToEscalationPolicyEntityOwnerPtrOutputWithContext(context.Context) EscalationPolicyEntityOwnerPtrOutput
}

type escalationPolicyEntityOwnerPtrType EscalationPolicyEntityOwnerArgs

func EscalationPolicyEntityOwnerPtr(v *EscalationPolicyEntityOwnerArgs) EscalationPolicyEntityOwnerPtrInput {
	return (*escalationPolicyEntityOwnerPtrType)(v)
}

func (*escalationPolicyEntityOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyEntityOwner)(nil)).Elem()
}

func (i *escalationPolicyEntityOwnerPtrType) ToEscalationPolicyEntityOwnerPtrOutput() EscalationPolicyEntityOwnerPtrOutput {
	return i.ToEscalationPolicyEntityOwnerPtrOutputWithContext(context.Background())
}

func (i *escalationPolicyEntityOwnerPtrType) ToEscalationPolicyEntityOwnerPtrOutputWithContext(ctx context.Context) EscalationPolicyEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyEntityOwnerPtrOutput)
}

type EscalationPolicyEntityOwnerOutput struct{ *pulumi.OutputState }

func (EscalationPolicyEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyEntityOwner)(nil)).Elem()
}

func (o EscalationPolicyEntityOwnerOutput) ToEscalationPolicyEntityOwnerOutput() EscalationPolicyEntityOwnerOutput {
	return o
}

func (o EscalationPolicyEntityOwnerOutput) ToEscalationPolicyEntityOwnerOutputWithContext(ctx context.Context) EscalationPolicyEntityOwnerOutput {
	return o
}

func (o EscalationPolicyEntityOwnerOutput) ToEscalationPolicyEntityOwnerPtrOutput() EscalationPolicyEntityOwnerPtrOutput {
	return o.ToEscalationPolicyEntityOwnerPtrOutputWithContext(context.Background())
}

func (o EscalationPolicyEntityOwnerOutput) ToEscalationPolicyEntityOwnerPtrOutputWithContext(ctx context.Context) EscalationPolicyEntityOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EscalationPolicyEntityOwner) *EscalationPolicyEntityOwner {
		return &v
	}).(EscalationPolicyEntityOwnerPtrOutput)
}

// Escalation policy owner id.
func (o EscalationPolicyEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EscalationPolicyEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Escalation policy owner type. (user or squad or team)
func (o EscalationPolicyEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EscalationPolicyEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type EscalationPolicyEntityOwnerPtrOutput struct{ *pulumi.OutputState }

func (EscalationPolicyEntityOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyEntityOwner)(nil)).Elem()
}

func (o EscalationPolicyEntityOwnerPtrOutput) ToEscalationPolicyEntityOwnerPtrOutput() EscalationPolicyEntityOwnerPtrOutput {
	return o
}

func (o EscalationPolicyEntityOwnerPtrOutput) ToEscalationPolicyEntityOwnerPtrOutputWithContext(ctx context.Context) EscalationPolicyEntityOwnerPtrOutput {
	return o
}

func (o EscalationPolicyEntityOwnerPtrOutput) Elem() EscalationPolicyEntityOwnerOutput {
	return o.ApplyT(func(v *EscalationPolicyEntityOwner) EscalationPolicyEntityOwner {
		if v != nil {
			return *v
		}
		var ret EscalationPolicyEntityOwner
		return ret
	}).(EscalationPolicyEntityOwnerOutput)
}

// Escalation policy owner id.
func (o EscalationPolicyEntityOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Escalation policy owner type. (user or squad or team)
func (o EscalationPolicyEntityOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type EscalationPolicyRepeat struct {
	// The number of minutes to wait before repeating the escalation policy
	DelayMinutes int `pulumi:"delayMinutes"`
	// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
	Times int `pulumi:"times"`
}

// EscalationPolicyRepeatInput is an input type that accepts EscalationPolicyRepeatArgs and EscalationPolicyRepeatOutput values.
// You can construct a concrete instance of `EscalationPolicyRepeatInput` via:
//
//	EscalationPolicyRepeatArgs{...}
type EscalationPolicyRepeatInput interface {
	pulumi.Input

	ToEscalationPolicyRepeatOutput() EscalationPolicyRepeatOutput
	ToEscalationPolicyRepeatOutputWithContext(context.Context) EscalationPolicyRepeatOutput
}

type EscalationPolicyRepeatArgs struct {
	// The number of minutes to wait before repeating the escalation policy
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
	Times pulumi.IntInput `pulumi:"times"`
}

func (EscalationPolicyRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRepeat)(nil)).Elem()
}

func (i EscalationPolicyRepeatArgs) ToEscalationPolicyRepeatOutput() EscalationPolicyRepeatOutput {
	return i.ToEscalationPolicyRepeatOutputWithContext(context.Background())
}

func (i EscalationPolicyRepeatArgs) ToEscalationPolicyRepeatOutputWithContext(ctx context.Context) EscalationPolicyRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRepeatOutput)
}

func (i EscalationPolicyRepeatArgs) ToEscalationPolicyRepeatPtrOutput() EscalationPolicyRepeatPtrOutput {
	return i.ToEscalationPolicyRepeatPtrOutputWithContext(context.Background())
}

func (i EscalationPolicyRepeatArgs) ToEscalationPolicyRepeatPtrOutputWithContext(ctx context.Context) EscalationPolicyRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRepeatOutput).ToEscalationPolicyRepeatPtrOutputWithContext(ctx)
}

// EscalationPolicyRepeatPtrInput is an input type that accepts EscalationPolicyRepeatArgs, EscalationPolicyRepeatPtr and EscalationPolicyRepeatPtrOutput values.
// You can construct a concrete instance of `EscalationPolicyRepeatPtrInput` via:
//
//	        EscalationPolicyRepeatArgs{...}
//
//	or:
//
//	        nil
type EscalationPolicyRepeatPtrInput interface {
	pulumi.Input

	ToEscalationPolicyRepeatPtrOutput() EscalationPolicyRepeatPtrOutput
	ToEscalationPolicyRepeatPtrOutputWithContext(context.Context) EscalationPolicyRepeatPtrOutput
}

type escalationPolicyRepeatPtrType EscalationPolicyRepeatArgs

func EscalationPolicyRepeatPtr(v *EscalationPolicyRepeatArgs) EscalationPolicyRepeatPtrInput {
	return (*escalationPolicyRepeatPtrType)(v)
}

func (*escalationPolicyRepeatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRepeat)(nil)).Elem()
}

func (i *escalationPolicyRepeatPtrType) ToEscalationPolicyRepeatPtrOutput() EscalationPolicyRepeatPtrOutput {
	return i.ToEscalationPolicyRepeatPtrOutputWithContext(context.Background())
}

func (i *escalationPolicyRepeatPtrType) ToEscalationPolicyRepeatPtrOutputWithContext(ctx context.Context) EscalationPolicyRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRepeatPtrOutput)
}

type EscalationPolicyRepeatOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRepeat)(nil)).Elem()
}

func (o EscalationPolicyRepeatOutput) ToEscalationPolicyRepeatOutput() EscalationPolicyRepeatOutput {
	return o
}

func (o EscalationPolicyRepeatOutput) ToEscalationPolicyRepeatOutputWithContext(ctx context.Context) EscalationPolicyRepeatOutput {
	return o
}

func (o EscalationPolicyRepeatOutput) ToEscalationPolicyRepeatPtrOutput() EscalationPolicyRepeatPtrOutput {
	return o.ToEscalationPolicyRepeatPtrOutputWithContext(context.Background())
}

func (o EscalationPolicyRepeatOutput) ToEscalationPolicyRepeatPtrOutputWithContext(ctx context.Context) EscalationPolicyRepeatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EscalationPolicyRepeat) *EscalationPolicyRepeat {
		return &v
	}).(EscalationPolicyRepeatPtrOutput)
}

// The number of minutes to wait before repeating the escalation policy
func (o EscalationPolicyRepeatOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v EscalationPolicyRepeat) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
func (o EscalationPolicyRepeatOutput) Times() pulumi.IntOutput {
	return o.ApplyT(func(v EscalationPolicyRepeat) int { return v.Times }).(pulumi.IntOutput)
}

type EscalationPolicyRepeatPtrOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRepeatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRepeat)(nil)).Elem()
}

func (o EscalationPolicyRepeatPtrOutput) ToEscalationPolicyRepeatPtrOutput() EscalationPolicyRepeatPtrOutput {
	return o
}

func (o EscalationPolicyRepeatPtrOutput) ToEscalationPolicyRepeatPtrOutputWithContext(ctx context.Context) EscalationPolicyRepeatPtrOutput {
	return o
}

func (o EscalationPolicyRepeatPtrOutput) Elem() EscalationPolicyRepeatOutput {
	return o.ApplyT(func(v *EscalationPolicyRepeat) EscalationPolicyRepeat {
		if v != nil {
			return *v
		}
		var ret EscalationPolicyRepeat
		return ret
	}).(EscalationPolicyRepeatOutput)
}

// The number of minutes to wait before repeating the escalation policy
func (o EscalationPolicyRepeatPtrOutput) DelayMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.DelayMinutes
	}).(pulumi.IntPtrOutput)
}

// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
func (o EscalationPolicyRepeatPtrOutput) Times() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.Times
	}).(pulumi.IntPtrOutput)
}

type EscalationPolicyRule struct {
	DelayMinutes         int      `pulumi:"delayMinutes"`
	NotificationChannels []string `pulumi:"notificationChannels"`
	// repeat this rule
	Repeat     *EscalationPolicyRuleRepeat     `pulumi:"repeat"`
	RoundRobin *EscalationPolicyRuleRoundRobin `pulumi:"roundRobin"`
	Targets    []EscalationPolicyRuleTarget    `pulumi:"targets"`
}

// EscalationPolicyRuleInput is an input type that accepts EscalationPolicyRuleArgs and EscalationPolicyRuleOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleInput` via:
//
//	EscalationPolicyRuleArgs{...}
type EscalationPolicyRuleInput interface {
	pulumi.Input

	ToEscalationPolicyRuleOutput() EscalationPolicyRuleOutput
	ToEscalationPolicyRuleOutputWithContext(context.Context) EscalationPolicyRuleOutput
}

type EscalationPolicyRuleArgs struct {
	DelayMinutes         pulumi.IntInput         `pulumi:"delayMinutes"`
	NotificationChannels pulumi.StringArrayInput `pulumi:"notificationChannels"`
	// repeat this rule
	Repeat     EscalationPolicyRuleRepeatPtrInput     `pulumi:"repeat"`
	RoundRobin EscalationPolicyRuleRoundRobinPtrInput `pulumi:"roundRobin"`
	Targets    EscalationPolicyRuleTargetArrayInput   `pulumi:"targets"`
}

func (EscalationPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRule)(nil)).Elem()
}

func (i EscalationPolicyRuleArgs) ToEscalationPolicyRuleOutput() EscalationPolicyRuleOutput {
	return i.ToEscalationPolicyRuleOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleArgs) ToEscalationPolicyRuleOutputWithContext(ctx context.Context) EscalationPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleOutput)
}

// EscalationPolicyRuleArrayInput is an input type that accepts EscalationPolicyRuleArray and EscalationPolicyRuleArrayOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleArrayInput` via:
//
//	EscalationPolicyRuleArray{ EscalationPolicyRuleArgs{...} }
type EscalationPolicyRuleArrayInput interface {
	pulumi.Input

	ToEscalationPolicyRuleArrayOutput() EscalationPolicyRuleArrayOutput
	ToEscalationPolicyRuleArrayOutputWithContext(context.Context) EscalationPolicyRuleArrayOutput
}

type EscalationPolicyRuleArray []EscalationPolicyRuleInput

func (EscalationPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationPolicyRule)(nil)).Elem()
}

func (i EscalationPolicyRuleArray) ToEscalationPolicyRuleArrayOutput() EscalationPolicyRuleArrayOutput {
	return i.ToEscalationPolicyRuleArrayOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleArray) ToEscalationPolicyRuleArrayOutputWithContext(ctx context.Context) EscalationPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleArrayOutput)
}

type EscalationPolicyRuleOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRule)(nil)).Elem()
}

func (o EscalationPolicyRuleOutput) ToEscalationPolicyRuleOutput() EscalationPolicyRuleOutput {
	return o
}

func (o EscalationPolicyRuleOutput) ToEscalationPolicyRuleOutputWithContext(ctx context.Context) EscalationPolicyRuleOutput {
	return o
}

func (o EscalationPolicyRuleOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v EscalationPolicyRule) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

func (o EscalationPolicyRuleOutput) NotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EscalationPolicyRule) []string { return v.NotificationChannels }).(pulumi.StringArrayOutput)
}

// repeat this rule
func (o EscalationPolicyRuleOutput) Repeat() EscalationPolicyRuleRepeatPtrOutput {
	return o.ApplyT(func(v EscalationPolicyRule) *EscalationPolicyRuleRepeat { return v.Repeat }).(EscalationPolicyRuleRepeatPtrOutput)
}

func (o EscalationPolicyRuleOutput) RoundRobin() EscalationPolicyRuleRoundRobinPtrOutput {
	return o.ApplyT(func(v EscalationPolicyRule) *EscalationPolicyRuleRoundRobin { return v.RoundRobin }).(EscalationPolicyRuleRoundRobinPtrOutput)
}

func (o EscalationPolicyRuleOutput) Targets() EscalationPolicyRuleTargetArrayOutput {
	return o.ApplyT(func(v EscalationPolicyRule) []EscalationPolicyRuleTarget { return v.Targets }).(EscalationPolicyRuleTargetArrayOutput)
}

type EscalationPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationPolicyRule)(nil)).Elem()
}

func (o EscalationPolicyRuleArrayOutput) ToEscalationPolicyRuleArrayOutput() EscalationPolicyRuleArrayOutput {
	return o
}

func (o EscalationPolicyRuleArrayOutput) ToEscalationPolicyRuleArrayOutputWithContext(ctx context.Context) EscalationPolicyRuleArrayOutput {
	return o
}

func (o EscalationPolicyRuleArrayOutput) Index(i pulumi.IntInput) EscalationPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EscalationPolicyRule {
		return vs[0].([]EscalationPolicyRule)[vs[1].(int)]
	}).(EscalationPolicyRuleOutput)
}

type EscalationPolicyRuleRepeat struct {
	// The number of minutes to wait before repeating the escalation policy
	DelayMinutes int `pulumi:"delayMinutes"`
	// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
	Times int `pulumi:"times"`
}

// EscalationPolicyRuleRepeatInput is an input type that accepts EscalationPolicyRuleRepeatArgs and EscalationPolicyRuleRepeatOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleRepeatInput` via:
//
//	EscalationPolicyRuleRepeatArgs{...}
type EscalationPolicyRuleRepeatInput interface {
	pulumi.Input

	ToEscalationPolicyRuleRepeatOutput() EscalationPolicyRuleRepeatOutput
	ToEscalationPolicyRuleRepeatOutputWithContext(context.Context) EscalationPolicyRuleRepeatOutput
}

type EscalationPolicyRuleRepeatArgs struct {
	// The number of minutes to wait before repeating the escalation policy
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
	Times pulumi.IntInput `pulumi:"times"`
}

func (EscalationPolicyRuleRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleRepeat)(nil)).Elem()
}

func (i EscalationPolicyRuleRepeatArgs) ToEscalationPolicyRuleRepeatOutput() EscalationPolicyRuleRepeatOutput {
	return i.ToEscalationPolicyRuleRepeatOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleRepeatArgs) ToEscalationPolicyRuleRepeatOutputWithContext(ctx context.Context) EscalationPolicyRuleRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleRepeatOutput)
}

func (i EscalationPolicyRuleRepeatArgs) ToEscalationPolicyRuleRepeatPtrOutput() EscalationPolicyRuleRepeatPtrOutput {
	return i.ToEscalationPolicyRuleRepeatPtrOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleRepeatArgs) ToEscalationPolicyRuleRepeatPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleRepeatOutput).ToEscalationPolicyRuleRepeatPtrOutputWithContext(ctx)
}

// EscalationPolicyRuleRepeatPtrInput is an input type that accepts EscalationPolicyRuleRepeatArgs, EscalationPolicyRuleRepeatPtr and EscalationPolicyRuleRepeatPtrOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleRepeatPtrInput` via:
//
//	        EscalationPolicyRuleRepeatArgs{...}
//
//	or:
//
//	        nil
type EscalationPolicyRuleRepeatPtrInput interface {
	pulumi.Input

	ToEscalationPolicyRuleRepeatPtrOutput() EscalationPolicyRuleRepeatPtrOutput
	ToEscalationPolicyRuleRepeatPtrOutputWithContext(context.Context) EscalationPolicyRuleRepeatPtrOutput
}

type escalationPolicyRuleRepeatPtrType EscalationPolicyRuleRepeatArgs

func EscalationPolicyRuleRepeatPtr(v *EscalationPolicyRuleRepeatArgs) EscalationPolicyRuleRepeatPtrInput {
	return (*escalationPolicyRuleRepeatPtrType)(v)
}

func (*escalationPolicyRuleRepeatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRuleRepeat)(nil)).Elem()
}

func (i *escalationPolicyRuleRepeatPtrType) ToEscalationPolicyRuleRepeatPtrOutput() EscalationPolicyRuleRepeatPtrOutput {
	return i.ToEscalationPolicyRuleRepeatPtrOutputWithContext(context.Background())
}

func (i *escalationPolicyRuleRepeatPtrType) ToEscalationPolicyRuleRepeatPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleRepeatPtrOutput)
}

type EscalationPolicyRuleRepeatOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleRepeat)(nil)).Elem()
}

func (o EscalationPolicyRuleRepeatOutput) ToEscalationPolicyRuleRepeatOutput() EscalationPolicyRuleRepeatOutput {
	return o
}

func (o EscalationPolicyRuleRepeatOutput) ToEscalationPolicyRuleRepeatOutputWithContext(ctx context.Context) EscalationPolicyRuleRepeatOutput {
	return o
}

func (o EscalationPolicyRuleRepeatOutput) ToEscalationPolicyRuleRepeatPtrOutput() EscalationPolicyRuleRepeatPtrOutput {
	return o.ToEscalationPolicyRuleRepeatPtrOutputWithContext(context.Background())
}

func (o EscalationPolicyRuleRepeatOutput) ToEscalationPolicyRuleRepeatPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRepeatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EscalationPolicyRuleRepeat) *EscalationPolicyRuleRepeat {
		return &v
	}).(EscalationPolicyRuleRepeatPtrOutput)
}

// The number of minutes to wait before repeating the escalation policy
func (o EscalationPolicyRuleRepeatOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v EscalationPolicyRuleRepeat) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
func (o EscalationPolicyRuleRepeatOutput) Times() pulumi.IntOutput {
	return o.ApplyT(func(v EscalationPolicyRuleRepeat) int { return v.Times }).(pulumi.IntOutput)
}

type EscalationPolicyRuleRepeatPtrOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleRepeatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRuleRepeat)(nil)).Elem()
}

func (o EscalationPolicyRuleRepeatPtrOutput) ToEscalationPolicyRuleRepeatPtrOutput() EscalationPolicyRuleRepeatPtrOutput {
	return o
}

func (o EscalationPolicyRuleRepeatPtrOutput) ToEscalationPolicyRuleRepeatPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRepeatPtrOutput {
	return o
}

func (o EscalationPolicyRuleRepeatPtrOutput) Elem() EscalationPolicyRuleRepeatOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleRepeat) EscalationPolicyRuleRepeat {
		if v != nil {
			return *v
		}
		var ret EscalationPolicyRuleRepeat
		return ret
	}).(EscalationPolicyRuleRepeatOutput)
}

// The number of minutes to wait before repeating the escalation policy
func (o EscalationPolicyRuleRepeatPtrOutput) DelayMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.DelayMinutes
	}).(pulumi.IntPtrOutput)
}

// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
func (o EscalationPolicyRuleRepeatPtrOutput) Times() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.Times
	}).(pulumi.IntPtrOutput)
}

type EscalationPolicyRuleRoundRobin struct {
	Enabled  bool                                    `pulumi:"enabled"`
	Rotation *EscalationPolicyRuleRoundRobinRotation `pulumi:"rotation"`
}

// EscalationPolicyRuleRoundRobinInput is an input type that accepts EscalationPolicyRuleRoundRobinArgs and EscalationPolicyRuleRoundRobinOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleRoundRobinInput` via:
//
//	EscalationPolicyRuleRoundRobinArgs{...}
type EscalationPolicyRuleRoundRobinInput interface {
	pulumi.Input

	ToEscalationPolicyRuleRoundRobinOutput() EscalationPolicyRuleRoundRobinOutput
	ToEscalationPolicyRuleRoundRobinOutputWithContext(context.Context) EscalationPolicyRuleRoundRobinOutput
}

type EscalationPolicyRuleRoundRobinArgs struct {
	Enabled  pulumi.BoolInput                               `pulumi:"enabled"`
	Rotation EscalationPolicyRuleRoundRobinRotationPtrInput `pulumi:"rotation"`
}

func (EscalationPolicyRuleRoundRobinArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleRoundRobin)(nil)).Elem()
}

func (i EscalationPolicyRuleRoundRobinArgs) ToEscalationPolicyRuleRoundRobinOutput() EscalationPolicyRuleRoundRobinOutput {
	return i.ToEscalationPolicyRuleRoundRobinOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleRoundRobinArgs) ToEscalationPolicyRuleRoundRobinOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleRoundRobinOutput)
}

func (i EscalationPolicyRuleRoundRobinArgs) ToEscalationPolicyRuleRoundRobinPtrOutput() EscalationPolicyRuleRoundRobinPtrOutput {
	return i.ToEscalationPolicyRuleRoundRobinPtrOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleRoundRobinArgs) ToEscalationPolicyRuleRoundRobinPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleRoundRobinOutput).ToEscalationPolicyRuleRoundRobinPtrOutputWithContext(ctx)
}

// EscalationPolicyRuleRoundRobinPtrInput is an input type that accepts EscalationPolicyRuleRoundRobinArgs, EscalationPolicyRuleRoundRobinPtr and EscalationPolicyRuleRoundRobinPtrOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleRoundRobinPtrInput` via:
//
//	        EscalationPolicyRuleRoundRobinArgs{...}
//
//	or:
//
//	        nil
type EscalationPolicyRuleRoundRobinPtrInput interface {
	pulumi.Input

	ToEscalationPolicyRuleRoundRobinPtrOutput() EscalationPolicyRuleRoundRobinPtrOutput
	ToEscalationPolicyRuleRoundRobinPtrOutputWithContext(context.Context) EscalationPolicyRuleRoundRobinPtrOutput
}

type escalationPolicyRuleRoundRobinPtrType EscalationPolicyRuleRoundRobinArgs

func EscalationPolicyRuleRoundRobinPtr(v *EscalationPolicyRuleRoundRobinArgs) EscalationPolicyRuleRoundRobinPtrInput {
	return (*escalationPolicyRuleRoundRobinPtrType)(v)
}

func (*escalationPolicyRuleRoundRobinPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRuleRoundRobin)(nil)).Elem()
}

func (i *escalationPolicyRuleRoundRobinPtrType) ToEscalationPolicyRuleRoundRobinPtrOutput() EscalationPolicyRuleRoundRobinPtrOutput {
	return i.ToEscalationPolicyRuleRoundRobinPtrOutputWithContext(context.Background())
}

func (i *escalationPolicyRuleRoundRobinPtrType) ToEscalationPolicyRuleRoundRobinPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleRoundRobinPtrOutput)
}

type EscalationPolicyRuleRoundRobinOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleRoundRobinOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleRoundRobin)(nil)).Elem()
}

func (o EscalationPolicyRuleRoundRobinOutput) ToEscalationPolicyRuleRoundRobinOutput() EscalationPolicyRuleRoundRobinOutput {
	return o
}

func (o EscalationPolicyRuleRoundRobinOutput) ToEscalationPolicyRuleRoundRobinOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinOutput {
	return o
}

func (o EscalationPolicyRuleRoundRobinOutput) ToEscalationPolicyRuleRoundRobinPtrOutput() EscalationPolicyRuleRoundRobinPtrOutput {
	return o.ToEscalationPolicyRuleRoundRobinPtrOutputWithContext(context.Background())
}

func (o EscalationPolicyRuleRoundRobinOutput) ToEscalationPolicyRuleRoundRobinPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EscalationPolicyRuleRoundRobin) *EscalationPolicyRuleRoundRobin {
		return &v
	}).(EscalationPolicyRuleRoundRobinPtrOutput)
}

func (o EscalationPolicyRuleRoundRobinOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EscalationPolicyRuleRoundRobin) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o EscalationPolicyRuleRoundRobinOutput) Rotation() EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return o.ApplyT(func(v EscalationPolicyRuleRoundRobin) *EscalationPolicyRuleRoundRobinRotation { return v.Rotation }).(EscalationPolicyRuleRoundRobinRotationPtrOutput)
}

type EscalationPolicyRuleRoundRobinPtrOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleRoundRobinPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRuleRoundRobin)(nil)).Elem()
}

func (o EscalationPolicyRuleRoundRobinPtrOutput) ToEscalationPolicyRuleRoundRobinPtrOutput() EscalationPolicyRuleRoundRobinPtrOutput {
	return o
}

func (o EscalationPolicyRuleRoundRobinPtrOutput) ToEscalationPolicyRuleRoundRobinPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinPtrOutput {
	return o
}

func (o EscalationPolicyRuleRoundRobinPtrOutput) Elem() EscalationPolicyRuleRoundRobinOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleRoundRobin) EscalationPolicyRuleRoundRobin {
		if v != nil {
			return *v
		}
		var ret EscalationPolicyRuleRoundRobin
		return ret
	}).(EscalationPolicyRuleRoundRobinOutput)
}

func (o EscalationPolicyRuleRoundRobinPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleRoundRobin) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o EscalationPolicyRuleRoundRobinPtrOutput) Rotation() EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleRoundRobin) *EscalationPolicyRuleRoundRobinRotation {
		if v == nil {
			return nil
		}
		return v.Rotation
	}).(EscalationPolicyRuleRoundRobinRotationPtrOutput)
}

type EscalationPolicyRuleRoundRobinRotation struct {
	DelayMinutes *int  `pulumi:"delayMinutes"`
	Enabled      *bool `pulumi:"enabled"`
}

// EscalationPolicyRuleRoundRobinRotationInput is an input type that accepts EscalationPolicyRuleRoundRobinRotationArgs and EscalationPolicyRuleRoundRobinRotationOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleRoundRobinRotationInput` via:
//
//	EscalationPolicyRuleRoundRobinRotationArgs{...}
type EscalationPolicyRuleRoundRobinRotationInput interface {
	pulumi.Input

	ToEscalationPolicyRuleRoundRobinRotationOutput() EscalationPolicyRuleRoundRobinRotationOutput
	ToEscalationPolicyRuleRoundRobinRotationOutputWithContext(context.Context) EscalationPolicyRuleRoundRobinRotationOutput
}

type EscalationPolicyRuleRoundRobinRotationArgs struct {
	DelayMinutes pulumi.IntPtrInput  `pulumi:"delayMinutes"`
	Enabled      pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (EscalationPolicyRuleRoundRobinRotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (i EscalationPolicyRuleRoundRobinRotationArgs) ToEscalationPolicyRuleRoundRobinRotationOutput() EscalationPolicyRuleRoundRobinRotationOutput {
	return i.ToEscalationPolicyRuleRoundRobinRotationOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleRoundRobinRotationArgs) ToEscalationPolicyRuleRoundRobinRotationOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinRotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleRoundRobinRotationOutput)
}

func (i EscalationPolicyRuleRoundRobinRotationArgs) ToEscalationPolicyRuleRoundRobinRotationPtrOutput() EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return i.ToEscalationPolicyRuleRoundRobinRotationPtrOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleRoundRobinRotationArgs) ToEscalationPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleRoundRobinRotationOutput).ToEscalationPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx)
}

// EscalationPolicyRuleRoundRobinRotationPtrInput is an input type that accepts EscalationPolicyRuleRoundRobinRotationArgs, EscalationPolicyRuleRoundRobinRotationPtr and EscalationPolicyRuleRoundRobinRotationPtrOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleRoundRobinRotationPtrInput` via:
//
//	        EscalationPolicyRuleRoundRobinRotationArgs{...}
//
//	or:
//
//	        nil
type EscalationPolicyRuleRoundRobinRotationPtrInput interface {
	pulumi.Input

	ToEscalationPolicyRuleRoundRobinRotationPtrOutput() EscalationPolicyRuleRoundRobinRotationPtrOutput
	ToEscalationPolicyRuleRoundRobinRotationPtrOutputWithContext(context.Context) EscalationPolicyRuleRoundRobinRotationPtrOutput
}

type escalationPolicyRuleRoundRobinRotationPtrType EscalationPolicyRuleRoundRobinRotationArgs

func EscalationPolicyRuleRoundRobinRotationPtr(v *EscalationPolicyRuleRoundRobinRotationArgs) EscalationPolicyRuleRoundRobinRotationPtrInput {
	return (*escalationPolicyRuleRoundRobinRotationPtrType)(v)
}

func (*escalationPolicyRuleRoundRobinRotationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (i *escalationPolicyRuleRoundRobinRotationPtrType) ToEscalationPolicyRuleRoundRobinRotationPtrOutput() EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return i.ToEscalationPolicyRuleRoundRobinRotationPtrOutputWithContext(context.Background())
}

func (i *escalationPolicyRuleRoundRobinRotationPtrType) ToEscalationPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleRoundRobinRotationPtrOutput)
}

type EscalationPolicyRuleRoundRobinRotationOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleRoundRobinRotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (o EscalationPolicyRuleRoundRobinRotationOutput) ToEscalationPolicyRuleRoundRobinRotationOutput() EscalationPolicyRuleRoundRobinRotationOutput {
	return o
}

func (o EscalationPolicyRuleRoundRobinRotationOutput) ToEscalationPolicyRuleRoundRobinRotationOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinRotationOutput {
	return o
}

func (o EscalationPolicyRuleRoundRobinRotationOutput) ToEscalationPolicyRuleRoundRobinRotationPtrOutput() EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return o.ToEscalationPolicyRuleRoundRobinRotationPtrOutputWithContext(context.Background())
}

func (o EscalationPolicyRuleRoundRobinRotationOutput) ToEscalationPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EscalationPolicyRuleRoundRobinRotation) *EscalationPolicyRuleRoundRobinRotation {
		return &v
	}).(EscalationPolicyRuleRoundRobinRotationPtrOutput)
}

func (o EscalationPolicyRuleRoundRobinRotationOutput) DelayMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EscalationPolicyRuleRoundRobinRotation) *int { return v.DelayMinutes }).(pulumi.IntPtrOutput)
}

func (o EscalationPolicyRuleRoundRobinRotationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EscalationPolicyRuleRoundRobinRotation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type EscalationPolicyRuleRoundRobinRotationPtrOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleRoundRobinRotationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (o EscalationPolicyRuleRoundRobinRotationPtrOutput) ToEscalationPolicyRuleRoundRobinRotationPtrOutput() EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return o
}

func (o EscalationPolicyRuleRoundRobinRotationPtrOutput) ToEscalationPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleRoundRobinRotationPtrOutput {
	return o
}

func (o EscalationPolicyRuleRoundRobinRotationPtrOutput) Elem() EscalationPolicyRuleRoundRobinRotationOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleRoundRobinRotation) EscalationPolicyRuleRoundRobinRotation {
		if v != nil {
			return *v
		}
		var ret EscalationPolicyRuleRoundRobinRotation
		return ret
	}).(EscalationPolicyRuleRoundRobinRotationOutput)
}

func (o EscalationPolicyRuleRoundRobinRotationPtrOutput) DelayMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleRoundRobinRotation) *int {
		if v == nil {
			return nil
		}
		return v.DelayMinutes
	}).(pulumi.IntPtrOutput)
}

func (o EscalationPolicyRuleRoundRobinRotationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleRoundRobinRotation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type EscalationPolicyRuleTarget struct {
	// EscalationPolicy id.
	Id   string `pulumi:"id"`
	Type string `pulumi:"type"`
}

// EscalationPolicyRuleTargetInput is an input type that accepts EscalationPolicyRuleTargetArgs and EscalationPolicyRuleTargetOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleTargetInput` via:
//
//	EscalationPolicyRuleTargetArgs{...}
type EscalationPolicyRuleTargetInput interface {
	pulumi.Input

	ToEscalationPolicyRuleTargetOutput() EscalationPolicyRuleTargetOutput
	ToEscalationPolicyRuleTargetOutputWithContext(context.Context) EscalationPolicyRuleTargetOutput
}

type EscalationPolicyRuleTargetArgs struct {
	// EscalationPolicy id.
	Id   pulumi.StringInput `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (EscalationPolicyRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleTarget)(nil)).Elem()
}

func (i EscalationPolicyRuleTargetArgs) ToEscalationPolicyRuleTargetOutput() EscalationPolicyRuleTargetOutput {
	return i.ToEscalationPolicyRuleTargetOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleTargetArgs) ToEscalationPolicyRuleTargetOutputWithContext(ctx context.Context) EscalationPolicyRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleTargetOutput)
}

// EscalationPolicyRuleTargetArrayInput is an input type that accepts EscalationPolicyRuleTargetArray and EscalationPolicyRuleTargetArrayOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleTargetArrayInput` via:
//
//	EscalationPolicyRuleTargetArray{ EscalationPolicyRuleTargetArgs{...} }
type EscalationPolicyRuleTargetArrayInput interface {
	pulumi.Input

	ToEscalationPolicyRuleTargetArrayOutput() EscalationPolicyRuleTargetArrayOutput
	ToEscalationPolicyRuleTargetArrayOutputWithContext(context.Context) EscalationPolicyRuleTargetArrayOutput
}

type EscalationPolicyRuleTargetArray []EscalationPolicyRuleTargetInput

func (EscalationPolicyRuleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationPolicyRuleTarget)(nil)).Elem()
}

func (i EscalationPolicyRuleTargetArray) ToEscalationPolicyRuleTargetArrayOutput() EscalationPolicyRuleTargetArrayOutput {
	return i.ToEscalationPolicyRuleTargetArrayOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleTargetArray) ToEscalationPolicyRuleTargetArrayOutputWithContext(ctx context.Context) EscalationPolicyRuleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleTargetArrayOutput)
}

type EscalationPolicyRuleTargetOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleTarget)(nil)).Elem()
}

func (o EscalationPolicyRuleTargetOutput) ToEscalationPolicyRuleTargetOutput() EscalationPolicyRuleTargetOutput {
	return o
}

func (o EscalationPolicyRuleTargetOutput) ToEscalationPolicyRuleTargetOutputWithContext(ctx context.Context) EscalationPolicyRuleTargetOutput {
	return o
}

// EscalationPolicy id.
func (o EscalationPolicyRuleTargetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EscalationPolicyRuleTarget) string { return v.Id }).(pulumi.StringOutput)
}

func (o EscalationPolicyRuleTargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EscalationPolicyRuleTarget) string { return v.Type }).(pulumi.StringOutput)
}

type EscalationPolicyRuleTargetArrayOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationPolicyRuleTarget)(nil)).Elem()
}

func (o EscalationPolicyRuleTargetArrayOutput) ToEscalationPolicyRuleTargetArrayOutput() EscalationPolicyRuleTargetArrayOutput {
	return o
}

func (o EscalationPolicyRuleTargetArrayOutput) ToEscalationPolicyRuleTargetArrayOutputWithContext(ctx context.Context) EscalationPolicyRuleTargetArrayOutput {
	return o
}

func (o EscalationPolicyRuleTargetArrayOutput) Index(i pulumi.IntInput) EscalationPolicyRuleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EscalationPolicyRuleTarget {
		return vs[0].([]EscalationPolicyRuleTarget)[vs[1].(int)]
	}).(EscalationPolicyRuleTargetOutput)
}

type RoutingRulesRule struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions []RoutingRulesRuleBasicExpression `pulumi:"basicExpressions"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression *string `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic bool `pulumi:"isBasic"`
	// The id of the entity (user, escalation policy, squad) for which we are routing this incident.
	RouteToId string `pulumi:"routeToId"`
	// Type of the entity for which we are routing this incident - User, Escalation Policy or Squad
	RouteToType string `pulumi:"routeToType"`
}

// RoutingRulesRuleInput is an input type that accepts RoutingRulesRuleArgs and RoutingRulesRuleOutput values.
// You can construct a concrete instance of `RoutingRulesRuleInput` via:
//
//	RoutingRulesRuleArgs{...}
type RoutingRulesRuleInput interface {
	pulumi.Input

	ToRoutingRulesRuleOutput() RoutingRulesRuleOutput
	ToRoutingRulesRuleOutputWithContext(context.Context) RoutingRulesRuleOutput
}

type RoutingRulesRuleArgs struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions RoutingRulesRuleBasicExpressionArrayInput `pulumi:"basicExpressions"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic pulumi.BoolInput `pulumi:"isBasic"`
	// The id of the entity (user, escalation policy, squad) for which we are routing this incident.
	RouteToId pulumi.StringInput `pulumi:"routeToId"`
	// Type of the entity for which we are routing this incident - User, Escalation Policy or Squad
	RouteToType pulumi.StringInput `pulumi:"routeToType"`
}

func (RoutingRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRulesRule)(nil)).Elem()
}

func (i RoutingRulesRuleArgs) ToRoutingRulesRuleOutput() RoutingRulesRuleOutput {
	return i.ToRoutingRulesRuleOutputWithContext(context.Background())
}

func (i RoutingRulesRuleArgs) ToRoutingRulesRuleOutputWithContext(ctx context.Context) RoutingRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulesRuleOutput)
}

// RoutingRulesRuleArrayInput is an input type that accepts RoutingRulesRuleArray and RoutingRulesRuleArrayOutput values.
// You can construct a concrete instance of `RoutingRulesRuleArrayInput` via:
//
//	RoutingRulesRuleArray{ RoutingRulesRuleArgs{...} }
type RoutingRulesRuleArrayInput interface {
	pulumi.Input

	ToRoutingRulesRuleArrayOutput() RoutingRulesRuleArrayOutput
	ToRoutingRulesRuleArrayOutputWithContext(context.Context) RoutingRulesRuleArrayOutput
}

type RoutingRulesRuleArray []RoutingRulesRuleInput

func (RoutingRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRulesRule)(nil)).Elem()
}

func (i RoutingRulesRuleArray) ToRoutingRulesRuleArrayOutput() RoutingRulesRuleArrayOutput {
	return i.ToRoutingRulesRuleArrayOutputWithContext(context.Background())
}

func (i RoutingRulesRuleArray) ToRoutingRulesRuleArrayOutputWithContext(ctx context.Context) RoutingRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulesRuleArrayOutput)
}

type RoutingRulesRuleOutput struct{ *pulumi.OutputState }

func (RoutingRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRulesRule)(nil)).Elem()
}

func (o RoutingRulesRuleOutput) ToRoutingRulesRuleOutput() RoutingRulesRuleOutput {
	return o
}

func (o RoutingRulesRuleOutput) ToRoutingRulesRuleOutputWithContext(ctx context.Context) RoutingRulesRuleOutput {
	return o
}

// The basic expression which needs to be evaluated to be true for this rule to apply.
func (o RoutingRulesRuleOutput) BasicExpressions() RoutingRulesRuleBasicExpressionArrayOutput {
	return o.ApplyT(func(v RoutingRulesRule) []RoutingRulesRuleBasicExpression { return v.BasicExpressions }).(RoutingRulesRuleBasicExpressionArrayOutput)
}

// The expression which needs to be evaluated to be true for this rule to apply.
func (o RoutingRulesRuleOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRulesRule) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
func (o RoutingRulesRuleOutput) IsBasic() pulumi.BoolOutput {
	return o.ApplyT(func(v RoutingRulesRule) bool { return v.IsBasic }).(pulumi.BoolOutput)
}

// The id of the entity (user, escalation policy, squad) for which we are routing this incident.
func (o RoutingRulesRuleOutput) RouteToId() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingRulesRule) string { return v.RouteToId }).(pulumi.StringOutput)
}

// Type of the entity for which we are routing this incident - User, Escalation Policy or Squad
func (o RoutingRulesRuleOutput) RouteToType() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingRulesRule) string { return v.RouteToType }).(pulumi.StringOutput)
}

type RoutingRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (RoutingRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRulesRule)(nil)).Elem()
}

func (o RoutingRulesRuleArrayOutput) ToRoutingRulesRuleArrayOutput() RoutingRulesRuleArrayOutput {
	return o
}

func (o RoutingRulesRuleArrayOutput) ToRoutingRulesRuleArrayOutputWithContext(ctx context.Context) RoutingRulesRuleArrayOutput {
	return o
}

func (o RoutingRulesRuleArrayOutput) Index(i pulumi.IntInput) RoutingRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingRulesRule {
		return vs[0].([]RoutingRulesRule)[vs[1].(int)]
	}).(RoutingRulesRuleOutput)
}

type RoutingRulesRuleBasicExpression struct {
	Lhs string `pulumi:"lhs"`
	Rhs string `pulumi:"rhs"`
}

// RoutingRulesRuleBasicExpressionInput is an input type that accepts RoutingRulesRuleBasicExpressionArgs and RoutingRulesRuleBasicExpressionOutput values.
// You can construct a concrete instance of `RoutingRulesRuleBasicExpressionInput` via:
//
//	RoutingRulesRuleBasicExpressionArgs{...}
type RoutingRulesRuleBasicExpressionInput interface {
	pulumi.Input

	ToRoutingRulesRuleBasicExpressionOutput() RoutingRulesRuleBasicExpressionOutput
	ToRoutingRulesRuleBasicExpressionOutputWithContext(context.Context) RoutingRulesRuleBasicExpressionOutput
}

type RoutingRulesRuleBasicExpressionArgs struct {
	Lhs pulumi.StringInput `pulumi:"lhs"`
	Rhs pulumi.StringInput `pulumi:"rhs"`
}

func (RoutingRulesRuleBasicExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRulesRuleBasicExpression)(nil)).Elem()
}

func (i RoutingRulesRuleBasicExpressionArgs) ToRoutingRulesRuleBasicExpressionOutput() RoutingRulesRuleBasicExpressionOutput {
	return i.ToRoutingRulesRuleBasicExpressionOutputWithContext(context.Background())
}

func (i RoutingRulesRuleBasicExpressionArgs) ToRoutingRulesRuleBasicExpressionOutputWithContext(ctx context.Context) RoutingRulesRuleBasicExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulesRuleBasicExpressionOutput)
}

// RoutingRulesRuleBasicExpressionArrayInput is an input type that accepts RoutingRulesRuleBasicExpressionArray and RoutingRulesRuleBasicExpressionArrayOutput values.
// You can construct a concrete instance of `RoutingRulesRuleBasicExpressionArrayInput` via:
//
//	RoutingRulesRuleBasicExpressionArray{ RoutingRulesRuleBasicExpressionArgs{...} }
type RoutingRulesRuleBasicExpressionArrayInput interface {
	pulumi.Input

	ToRoutingRulesRuleBasicExpressionArrayOutput() RoutingRulesRuleBasicExpressionArrayOutput
	ToRoutingRulesRuleBasicExpressionArrayOutputWithContext(context.Context) RoutingRulesRuleBasicExpressionArrayOutput
}

type RoutingRulesRuleBasicExpressionArray []RoutingRulesRuleBasicExpressionInput

func (RoutingRulesRuleBasicExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRulesRuleBasicExpression)(nil)).Elem()
}

func (i RoutingRulesRuleBasicExpressionArray) ToRoutingRulesRuleBasicExpressionArrayOutput() RoutingRulesRuleBasicExpressionArrayOutput {
	return i.ToRoutingRulesRuleBasicExpressionArrayOutputWithContext(context.Background())
}

func (i RoutingRulesRuleBasicExpressionArray) ToRoutingRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) RoutingRulesRuleBasicExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulesRuleBasicExpressionArrayOutput)
}

type RoutingRulesRuleBasicExpressionOutput struct{ *pulumi.OutputState }

func (RoutingRulesRuleBasicExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRulesRuleBasicExpression)(nil)).Elem()
}

func (o RoutingRulesRuleBasicExpressionOutput) ToRoutingRulesRuleBasicExpressionOutput() RoutingRulesRuleBasicExpressionOutput {
	return o
}

func (o RoutingRulesRuleBasicExpressionOutput) ToRoutingRulesRuleBasicExpressionOutputWithContext(ctx context.Context) RoutingRulesRuleBasicExpressionOutput {
	return o
}

func (o RoutingRulesRuleBasicExpressionOutput) Lhs() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingRulesRuleBasicExpression) string { return v.Lhs }).(pulumi.StringOutput)
}

func (o RoutingRulesRuleBasicExpressionOutput) Rhs() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingRulesRuleBasicExpression) string { return v.Rhs }).(pulumi.StringOutput)
}

type RoutingRulesRuleBasicExpressionArrayOutput struct{ *pulumi.OutputState }

func (RoutingRulesRuleBasicExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRulesRuleBasicExpression)(nil)).Elem()
}

func (o RoutingRulesRuleBasicExpressionArrayOutput) ToRoutingRulesRuleBasicExpressionArrayOutput() RoutingRulesRuleBasicExpressionArrayOutput {
	return o
}

func (o RoutingRulesRuleBasicExpressionArrayOutput) ToRoutingRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) RoutingRulesRuleBasicExpressionArrayOutput {
	return o
}

func (o RoutingRulesRuleBasicExpressionArrayOutput) Index(i pulumi.IntInput) RoutingRulesRuleBasicExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingRulesRuleBasicExpression {
		return vs[0].([]RoutingRulesRuleBasicExpression)[vs[1].(int)]
	}).(RoutingRulesRuleBasicExpressionOutput)
}

type RunbookEntityOwner struct {
	// Runbook owner id.
	Id string `pulumi:"id"`
	// Runbook owner type. (user or squad or team)
	Type string `pulumi:"type"`
}

// RunbookEntityOwnerInput is an input type that accepts RunbookEntityOwnerArgs and RunbookEntityOwnerOutput values.
// You can construct a concrete instance of `RunbookEntityOwnerInput` via:
//
//	RunbookEntityOwnerArgs{...}
type RunbookEntityOwnerInput interface {
	pulumi.Input

	ToRunbookEntityOwnerOutput() RunbookEntityOwnerOutput
	ToRunbookEntityOwnerOutputWithContext(context.Context) RunbookEntityOwnerOutput
}

type RunbookEntityOwnerArgs struct {
	// Runbook owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Runbook owner type. (user or squad or team)
	Type pulumi.StringInput `pulumi:"type"`
}

func (RunbookEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunbookEntityOwner)(nil)).Elem()
}

func (i RunbookEntityOwnerArgs) ToRunbookEntityOwnerOutput() RunbookEntityOwnerOutput {
	return i.ToRunbookEntityOwnerOutputWithContext(context.Background())
}

func (i RunbookEntityOwnerArgs) ToRunbookEntityOwnerOutputWithContext(ctx context.Context) RunbookEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookEntityOwnerOutput)
}

func (i RunbookEntityOwnerArgs) ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput {
	return i.ToRunbookEntityOwnerPtrOutputWithContext(context.Background())
}

func (i RunbookEntityOwnerArgs) ToRunbookEntityOwnerPtrOutputWithContext(ctx context.Context) RunbookEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookEntityOwnerOutput).ToRunbookEntityOwnerPtrOutputWithContext(ctx)
}

// RunbookEntityOwnerPtrInput is an input type that accepts RunbookEntityOwnerArgs, RunbookEntityOwnerPtr and RunbookEntityOwnerPtrOutput values.
// You can construct a concrete instance of `RunbookEntityOwnerPtrInput` via:
//
//	        RunbookEntityOwnerArgs{...}
//
//	or:
//
//	        nil
type RunbookEntityOwnerPtrInput interface {
	pulumi.Input

	ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput
	ToRunbookEntityOwnerPtrOutputWithContext(context.Context) RunbookEntityOwnerPtrOutput
}

type runbookEntityOwnerPtrType RunbookEntityOwnerArgs

func RunbookEntityOwnerPtr(v *RunbookEntityOwnerArgs) RunbookEntityOwnerPtrInput {
	return (*runbookEntityOwnerPtrType)(v)
}

func (*runbookEntityOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunbookEntityOwner)(nil)).Elem()
}

func (i *runbookEntityOwnerPtrType) ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput {
	return i.ToRunbookEntityOwnerPtrOutputWithContext(context.Background())
}

func (i *runbookEntityOwnerPtrType) ToRunbookEntityOwnerPtrOutputWithContext(ctx context.Context) RunbookEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookEntityOwnerPtrOutput)
}

type RunbookEntityOwnerOutput struct{ *pulumi.OutputState }

func (RunbookEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunbookEntityOwner)(nil)).Elem()
}

func (o RunbookEntityOwnerOutput) ToRunbookEntityOwnerOutput() RunbookEntityOwnerOutput {
	return o
}

func (o RunbookEntityOwnerOutput) ToRunbookEntityOwnerOutputWithContext(ctx context.Context) RunbookEntityOwnerOutput {
	return o
}

func (o RunbookEntityOwnerOutput) ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput {
	return o.ToRunbookEntityOwnerPtrOutputWithContext(context.Background())
}

func (o RunbookEntityOwnerOutput) ToRunbookEntityOwnerPtrOutputWithContext(ctx context.Context) RunbookEntityOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RunbookEntityOwner) *RunbookEntityOwner {
		return &v
	}).(RunbookEntityOwnerPtrOutput)
}

// Runbook owner id.
func (o RunbookEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RunbookEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Runbook owner type. (user or squad or team)
func (o RunbookEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RunbookEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type RunbookEntityOwnerPtrOutput struct{ *pulumi.OutputState }

func (RunbookEntityOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunbookEntityOwner)(nil)).Elem()
}

func (o RunbookEntityOwnerPtrOutput) ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput {
	return o
}

func (o RunbookEntityOwnerPtrOutput) ToRunbookEntityOwnerPtrOutputWithContext(ctx context.Context) RunbookEntityOwnerPtrOutput {
	return o
}

func (o RunbookEntityOwnerPtrOutput) Elem() RunbookEntityOwnerOutput {
	return o.ApplyT(func(v *RunbookEntityOwner) RunbookEntityOwner {
		if v != nil {
			return *v
		}
		var ret RunbookEntityOwner
		return ret
	}).(RunbookEntityOwnerOutput)
}

// Runbook owner id.
func (o RunbookEntityOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunbookEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Runbook owner type. (user or squad or team)
func (o RunbookEntityOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunbookEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type RunbookStep struct {
	Content string `pulumi:"content"`
}

// RunbookStepInput is an input type that accepts RunbookStepArgs and RunbookStepOutput values.
// You can construct a concrete instance of `RunbookStepInput` via:
//
//	RunbookStepArgs{...}
type RunbookStepInput interface {
	pulumi.Input

	ToRunbookStepOutput() RunbookStepOutput
	ToRunbookStepOutputWithContext(context.Context) RunbookStepOutput
}

type RunbookStepArgs struct {
	Content pulumi.StringInput `pulumi:"content"`
}

func (RunbookStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunbookStep)(nil)).Elem()
}

func (i RunbookStepArgs) ToRunbookStepOutput() RunbookStepOutput {
	return i.ToRunbookStepOutputWithContext(context.Background())
}

func (i RunbookStepArgs) ToRunbookStepOutputWithContext(ctx context.Context) RunbookStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookStepOutput)
}

// RunbookStepArrayInput is an input type that accepts RunbookStepArray and RunbookStepArrayOutput values.
// You can construct a concrete instance of `RunbookStepArrayInput` via:
//
//	RunbookStepArray{ RunbookStepArgs{...} }
type RunbookStepArrayInput interface {
	pulumi.Input

	ToRunbookStepArrayOutput() RunbookStepArrayOutput
	ToRunbookStepArrayOutputWithContext(context.Context) RunbookStepArrayOutput
}

type RunbookStepArray []RunbookStepInput

func (RunbookStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RunbookStep)(nil)).Elem()
}

func (i RunbookStepArray) ToRunbookStepArrayOutput() RunbookStepArrayOutput {
	return i.ToRunbookStepArrayOutputWithContext(context.Background())
}

func (i RunbookStepArray) ToRunbookStepArrayOutputWithContext(ctx context.Context) RunbookStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookStepArrayOutput)
}

type RunbookStepOutput struct{ *pulumi.OutputState }

func (RunbookStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunbookStep)(nil)).Elem()
}

func (o RunbookStepOutput) ToRunbookStepOutput() RunbookStepOutput {
	return o
}

func (o RunbookStepOutput) ToRunbookStepOutputWithContext(ctx context.Context) RunbookStepOutput {
	return o
}

func (o RunbookStepOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v RunbookStep) string { return v.Content }).(pulumi.StringOutput)
}

type RunbookStepArrayOutput struct{ *pulumi.OutputState }

func (RunbookStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RunbookStep)(nil)).Elem()
}

func (o RunbookStepArrayOutput) ToRunbookStepArrayOutput() RunbookStepArrayOutput {
	return o
}

func (o RunbookStepArrayOutput) ToRunbookStepArrayOutputWithContext(ctx context.Context) RunbookStepArrayOutput {
	return o
}

func (o RunbookStepArrayOutput) Index(i pulumi.IntInput) RunbookStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RunbookStep {
		return vs[0].([]RunbookStep)[vs[1].(int)]
	}).(RunbookStepOutput)
}

type SLOEntityOwner struct {
	// SLO owner id.
	Id string `pulumi:"id"`
	// SLO owner type (user, team, squad).
	Type string `pulumi:"type"`
}

// SLOEntityOwnerInput is an input type that accepts SLOEntityOwnerArgs and SLOEntityOwnerOutput values.
// You can construct a concrete instance of `SLOEntityOwnerInput` via:
//
//	SLOEntityOwnerArgs{...}
type SLOEntityOwnerInput interface {
	pulumi.Input

	ToSLOEntityOwnerOutput() SLOEntityOwnerOutput
	ToSLOEntityOwnerOutputWithContext(context.Context) SLOEntityOwnerOutput
}

type SLOEntityOwnerArgs struct {
	// SLO owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// SLO owner type (user, team, squad).
	Type pulumi.StringInput `pulumi:"type"`
}

func (SLOEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOEntityOwner)(nil)).Elem()
}

func (i SLOEntityOwnerArgs) ToSLOEntityOwnerOutput() SLOEntityOwnerOutput {
	return i.ToSLOEntityOwnerOutputWithContext(context.Background())
}

func (i SLOEntityOwnerArgs) ToSLOEntityOwnerOutputWithContext(ctx context.Context) SLOEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOEntityOwnerOutput)
}

func (i SLOEntityOwnerArgs) ToSLOEntityOwnerPtrOutput() SLOEntityOwnerPtrOutput {
	return i.ToSLOEntityOwnerPtrOutputWithContext(context.Background())
}

func (i SLOEntityOwnerArgs) ToSLOEntityOwnerPtrOutputWithContext(ctx context.Context) SLOEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOEntityOwnerOutput).ToSLOEntityOwnerPtrOutputWithContext(ctx)
}

// SLOEntityOwnerPtrInput is an input type that accepts SLOEntityOwnerArgs, SLOEntityOwnerPtr and SLOEntityOwnerPtrOutput values.
// You can construct a concrete instance of `SLOEntityOwnerPtrInput` via:
//
//	        SLOEntityOwnerArgs{...}
//
//	or:
//
//	        nil
type SLOEntityOwnerPtrInput interface {
	pulumi.Input

	ToSLOEntityOwnerPtrOutput() SLOEntityOwnerPtrOutput
	ToSLOEntityOwnerPtrOutputWithContext(context.Context) SLOEntityOwnerPtrOutput
}

type sloentityOwnerPtrType SLOEntityOwnerArgs

func SLOEntityOwnerPtr(v *SLOEntityOwnerArgs) SLOEntityOwnerPtrInput {
	return (*sloentityOwnerPtrType)(v)
}

func (*sloentityOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOEntityOwner)(nil)).Elem()
}

func (i *sloentityOwnerPtrType) ToSLOEntityOwnerPtrOutput() SLOEntityOwnerPtrOutput {
	return i.ToSLOEntityOwnerPtrOutputWithContext(context.Background())
}

func (i *sloentityOwnerPtrType) ToSLOEntityOwnerPtrOutputWithContext(ctx context.Context) SLOEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOEntityOwnerPtrOutput)
}

type SLOEntityOwnerOutput struct{ *pulumi.OutputState }

func (SLOEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOEntityOwner)(nil)).Elem()
}

func (o SLOEntityOwnerOutput) ToSLOEntityOwnerOutput() SLOEntityOwnerOutput {
	return o
}

func (o SLOEntityOwnerOutput) ToSLOEntityOwnerOutputWithContext(ctx context.Context) SLOEntityOwnerOutput {
	return o
}

func (o SLOEntityOwnerOutput) ToSLOEntityOwnerPtrOutput() SLOEntityOwnerPtrOutput {
	return o.ToSLOEntityOwnerPtrOutputWithContext(context.Background())
}

func (o SLOEntityOwnerOutput) ToSLOEntityOwnerPtrOutputWithContext(ctx context.Context) SLOEntityOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLOEntityOwner) *SLOEntityOwner {
		return &v
	}).(SLOEntityOwnerPtrOutput)
}

// SLO owner id.
func (o SLOEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SLOEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// SLO owner type (user, team, squad).
func (o SLOEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SLOEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type SLOEntityOwnerPtrOutput struct{ *pulumi.OutputState }

func (SLOEntityOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOEntityOwner)(nil)).Elem()
}

func (o SLOEntityOwnerPtrOutput) ToSLOEntityOwnerPtrOutput() SLOEntityOwnerPtrOutput {
	return o
}

func (o SLOEntityOwnerPtrOutput) ToSLOEntityOwnerPtrOutputWithContext(ctx context.Context) SLOEntityOwnerPtrOutput {
	return o
}

func (o SLOEntityOwnerPtrOutput) Elem() SLOEntityOwnerOutput {
	return o.ApplyT(func(v *SLOEntityOwner) SLOEntityOwner {
		if v != nil {
			return *v
		}
		var ret SLOEntityOwner
		return ret
	}).(SLOEntityOwnerOutput)
}

// SLO owner id.
func (o SLOEntityOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLOEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// SLO owner type (user, team, squad).
func (o SLOEntityOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLOEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type SLONotify struct {
	// The ID of the notification rule
	Id *int `pulumi:"id"`
	// The ID of the service in which the user want to create an incident
	ServiceId *string `pulumi:"serviceId"`
	// The ID of the SLO.
	SloId *int `pulumi:"sloId"`
	// List of Squad ID's who should be alerted via email.
	SquadIds []string `pulumi:"squadIds"`
	// List of user ID's who should be alerted via email.
	UserIds []string `pulumi:"userIds"`
}

// SLONotifyInput is an input type that accepts SLONotifyArgs and SLONotifyOutput values.
// You can construct a concrete instance of `SLONotifyInput` via:
//
//	SLONotifyArgs{...}
type SLONotifyInput interface {
	pulumi.Input

	ToSLONotifyOutput() SLONotifyOutput
	ToSLONotifyOutputWithContext(context.Context) SLONotifyOutput
}

type SLONotifyArgs struct {
	// The ID of the notification rule
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the service in which the user want to create an incident
	ServiceId pulumi.StringPtrInput `pulumi:"serviceId"`
	// The ID of the SLO.
	SloId pulumi.IntPtrInput `pulumi:"sloId"`
	// List of Squad ID's who should be alerted via email.
	SquadIds pulumi.StringArrayInput `pulumi:"squadIds"`
	// List of user ID's who should be alerted via email.
	UserIds pulumi.StringArrayInput `pulumi:"userIds"`
}

func (SLONotifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLONotify)(nil)).Elem()
}

func (i SLONotifyArgs) ToSLONotifyOutput() SLONotifyOutput {
	return i.ToSLONotifyOutputWithContext(context.Background())
}

func (i SLONotifyArgs) ToSLONotifyOutputWithContext(ctx context.Context) SLONotifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLONotifyOutput)
}

func (i SLONotifyArgs) ToSLONotifyPtrOutput() SLONotifyPtrOutput {
	return i.ToSLONotifyPtrOutputWithContext(context.Background())
}

func (i SLONotifyArgs) ToSLONotifyPtrOutputWithContext(ctx context.Context) SLONotifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLONotifyOutput).ToSLONotifyPtrOutputWithContext(ctx)
}

// SLONotifyPtrInput is an input type that accepts SLONotifyArgs, SLONotifyPtr and SLONotifyPtrOutput values.
// You can construct a concrete instance of `SLONotifyPtrInput` via:
//
//	        SLONotifyArgs{...}
//
//	or:
//
//	        nil
type SLONotifyPtrInput interface {
	pulumi.Input

	ToSLONotifyPtrOutput() SLONotifyPtrOutput
	ToSLONotifyPtrOutputWithContext(context.Context) SLONotifyPtrOutput
}

type slonotifyPtrType SLONotifyArgs

func SLONotifyPtr(v *SLONotifyArgs) SLONotifyPtrInput {
	return (*slonotifyPtrType)(v)
}

func (*slonotifyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLONotify)(nil)).Elem()
}

func (i *slonotifyPtrType) ToSLONotifyPtrOutput() SLONotifyPtrOutput {
	return i.ToSLONotifyPtrOutputWithContext(context.Background())
}

func (i *slonotifyPtrType) ToSLONotifyPtrOutputWithContext(ctx context.Context) SLONotifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLONotifyPtrOutput)
}

type SLONotifyOutput struct{ *pulumi.OutputState }

func (SLONotifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLONotify)(nil)).Elem()
}

func (o SLONotifyOutput) ToSLONotifyOutput() SLONotifyOutput {
	return o
}

func (o SLONotifyOutput) ToSLONotifyOutputWithContext(ctx context.Context) SLONotifyOutput {
	return o
}

func (o SLONotifyOutput) ToSLONotifyPtrOutput() SLONotifyPtrOutput {
	return o.ToSLONotifyPtrOutputWithContext(context.Background())
}

func (o SLONotifyOutput) ToSLONotifyPtrOutputWithContext(ctx context.Context) SLONotifyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLONotify) *SLONotify {
		return &v
	}).(SLONotifyPtrOutput)
}

// The ID of the notification rule
func (o SLONotifyOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SLONotify) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the service in which the user want to create an incident
func (o SLONotifyOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SLONotify) *string { return v.ServiceId }).(pulumi.StringPtrOutput)
}

// The ID of the SLO.
func (o SLONotifyOutput) SloId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SLONotify) *int { return v.SloId }).(pulumi.IntPtrOutput)
}

// List of Squad ID's who should be alerted via email.
func (o SLONotifyOutput) SquadIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SLONotify) []string { return v.SquadIds }).(pulumi.StringArrayOutput)
}

// List of user ID's who should be alerted via email.
func (o SLONotifyOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SLONotify) []string { return v.UserIds }).(pulumi.StringArrayOutput)
}

type SLONotifyPtrOutput struct{ *pulumi.OutputState }

func (SLONotifyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLONotify)(nil)).Elem()
}

func (o SLONotifyPtrOutput) ToSLONotifyPtrOutput() SLONotifyPtrOutput {
	return o
}

func (o SLONotifyPtrOutput) ToSLONotifyPtrOutputWithContext(ctx context.Context) SLONotifyPtrOutput {
	return o
}

func (o SLONotifyPtrOutput) Elem() SLONotifyOutput {
	return o.ApplyT(func(v *SLONotify) SLONotify {
		if v != nil {
			return *v
		}
		var ret SLONotify
		return ret
	}).(SLONotifyOutput)
}

// The ID of the notification rule
func (o SLONotifyPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SLONotify) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

// The ID of the service in which the user want to create an incident
func (o SLONotifyPtrOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLONotify) *string {
		if v == nil {
			return nil
		}
		return v.ServiceId
	}).(pulumi.StringPtrOutput)
}

// The ID of the SLO.
func (o SLONotifyPtrOutput) SloId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SLONotify) *int {
		if v == nil {
			return nil
		}
		return v.SloId
	}).(pulumi.IntPtrOutput)
}

// List of Squad ID's who should be alerted via email.
func (o SLONotifyPtrOutput) SquadIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SLONotify) []string {
		if v == nil {
			return nil
		}
		return v.SquadIds
	}).(pulumi.StringArrayOutput)
}

// List of user ID's who should be alerted via email.
func (o SLONotifyPtrOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SLONotify) []string {
		if v == nil {
			return nil
		}
		return v.UserIds
	}).(pulumi.StringArrayOutput)
}

type SLORule struct {
	// The ID of the monitoring rule
	Id *int `pulumi:"id"`
	// Is checked?
	IsChecked *bool `pulumi:"isChecked"`
	// The name of monitoring check."Supported values are "breached*error*budget", "unhealthy*slo","increased*false*positives", "remaining*error_budget"
	Name string `pulumi:"name"`
	// The ID of the SLO
	SloId *int `pulumi:"sloId"`
	// Threshold for the monitoring checkOnly supported for rules name "increased*false*positives" and "remaining*error*budget"
	Threshold *int `pulumi:"threshold"`
}

// SLORuleInput is an input type that accepts SLORuleArgs and SLORuleOutput values.
// You can construct a concrete instance of `SLORuleInput` via:
//
//	SLORuleArgs{...}
type SLORuleInput interface {
	pulumi.Input

	ToSLORuleOutput() SLORuleOutput
	ToSLORuleOutputWithContext(context.Context) SLORuleOutput
}

type SLORuleArgs struct {
	// The ID of the monitoring rule
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Is checked?
	IsChecked pulumi.BoolPtrInput `pulumi:"isChecked"`
	// The name of monitoring check."Supported values are "breached*error*budget", "unhealthy*slo","increased*false*positives", "remaining*error_budget"
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the SLO
	SloId pulumi.IntPtrInput `pulumi:"sloId"`
	// Threshold for the monitoring checkOnly supported for rules name "increased*false*positives" and "remaining*error*budget"
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
}

func (SLORuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLORule)(nil)).Elem()
}

func (i SLORuleArgs) ToSLORuleOutput() SLORuleOutput {
	return i.ToSLORuleOutputWithContext(context.Background())
}

func (i SLORuleArgs) ToSLORuleOutputWithContext(ctx context.Context) SLORuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLORuleOutput)
}

// SLORuleArrayInput is an input type that accepts SLORuleArray and SLORuleArrayOutput values.
// You can construct a concrete instance of `SLORuleArrayInput` via:
//
//	SLORuleArray{ SLORuleArgs{...} }
type SLORuleArrayInput interface {
	pulumi.Input

	ToSLORuleArrayOutput() SLORuleArrayOutput
	ToSLORuleArrayOutputWithContext(context.Context) SLORuleArrayOutput
}

type SLORuleArray []SLORuleInput

func (SLORuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLORule)(nil)).Elem()
}

func (i SLORuleArray) ToSLORuleArrayOutput() SLORuleArrayOutput {
	return i.ToSLORuleArrayOutputWithContext(context.Background())
}

func (i SLORuleArray) ToSLORuleArrayOutputWithContext(ctx context.Context) SLORuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLORuleArrayOutput)
}

type SLORuleOutput struct{ *pulumi.OutputState }

func (SLORuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLORule)(nil)).Elem()
}

func (o SLORuleOutput) ToSLORuleOutput() SLORuleOutput {
	return o
}

func (o SLORuleOutput) ToSLORuleOutputWithContext(ctx context.Context) SLORuleOutput {
	return o
}

// The ID of the monitoring rule
func (o SLORuleOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SLORule) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Is checked?
func (o SLORuleOutput) IsChecked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SLORule) *bool { return v.IsChecked }).(pulumi.BoolPtrOutput)
}

// The name of monitoring check."Supported values are "breached*error*budget", "unhealthy*slo","increased*false*positives", "remaining*error_budget"
func (o SLORuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SLORule) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the SLO
func (o SLORuleOutput) SloId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SLORule) *int { return v.SloId }).(pulumi.IntPtrOutput)
}

// Threshold for the monitoring checkOnly supported for rules name "increased*false*positives" and "remaining*error*budget"
func (o SLORuleOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SLORule) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

type SLORuleArrayOutput struct{ *pulumi.OutputState }

func (SLORuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLORule)(nil)).Elem()
}

func (o SLORuleArrayOutput) ToSLORuleArrayOutput() SLORuleArrayOutput {
	return o
}

func (o SLORuleArrayOutput) ToSLORuleArrayOutputWithContext(ctx context.Context) SLORuleArrayOutput {
	return o
}

func (o SLORuleArrayOutput) Index(i pulumi.IntInput) SLORuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLORule {
		return vs[0].([]SLORule)[vs[1].(int)]
	}).(SLORuleOutput)
}

type ScheduleRotationV2ParticipantGroup struct {
	// Group participants.
	Participants []ScheduleRotationV2ParticipantGroupParticipant `pulumi:"participants"`
}

// ScheduleRotationV2ParticipantGroupInput is an input type that accepts ScheduleRotationV2ParticipantGroupArgs and ScheduleRotationV2ParticipantGroupOutput values.
// You can construct a concrete instance of `ScheduleRotationV2ParticipantGroupInput` via:
//
//	ScheduleRotationV2ParticipantGroupArgs{...}
type ScheduleRotationV2ParticipantGroupInput interface {
	pulumi.Input

	ToScheduleRotationV2ParticipantGroupOutput() ScheduleRotationV2ParticipantGroupOutput
	ToScheduleRotationV2ParticipantGroupOutputWithContext(context.Context) ScheduleRotationV2ParticipantGroupOutput
}

type ScheduleRotationV2ParticipantGroupArgs struct {
	// Group participants.
	Participants ScheduleRotationV2ParticipantGroupParticipantArrayInput `pulumi:"participants"`
}

func (ScheduleRotationV2ParticipantGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationV2ParticipantGroup)(nil)).Elem()
}

func (i ScheduleRotationV2ParticipantGroupArgs) ToScheduleRotationV2ParticipantGroupOutput() ScheduleRotationV2ParticipantGroupOutput {
	return i.ToScheduleRotationV2ParticipantGroupOutputWithContext(context.Background())
}

func (i ScheduleRotationV2ParticipantGroupArgs) ToScheduleRotationV2ParticipantGroupOutputWithContext(ctx context.Context) ScheduleRotationV2ParticipantGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationV2ParticipantGroupOutput)
}

// ScheduleRotationV2ParticipantGroupArrayInput is an input type that accepts ScheduleRotationV2ParticipantGroupArray and ScheduleRotationV2ParticipantGroupArrayOutput values.
// You can construct a concrete instance of `ScheduleRotationV2ParticipantGroupArrayInput` via:
//
//	ScheduleRotationV2ParticipantGroupArray{ ScheduleRotationV2ParticipantGroupArgs{...} }
type ScheduleRotationV2ParticipantGroupArrayInput interface {
	pulumi.Input

	ToScheduleRotationV2ParticipantGroupArrayOutput() ScheduleRotationV2ParticipantGroupArrayOutput
	ToScheduleRotationV2ParticipantGroupArrayOutputWithContext(context.Context) ScheduleRotationV2ParticipantGroupArrayOutput
}

type ScheduleRotationV2ParticipantGroupArray []ScheduleRotationV2ParticipantGroupInput

func (ScheduleRotationV2ParticipantGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationV2ParticipantGroup)(nil)).Elem()
}

func (i ScheduleRotationV2ParticipantGroupArray) ToScheduleRotationV2ParticipantGroupArrayOutput() ScheduleRotationV2ParticipantGroupArrayOutput {
	return i.ToScheduleRotationV2ParticipantGroupArrayOutputWithContext(context.Background())
}

func (i ScheduleRotationV2ParticipantGroupArray) ToScheduleRotationV2ParticipantGroupArrayOutputWithContext(ctx context.Context) ScheduleRotationV2ParticipantGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationV2ParticipantGroupArrayOutput)
}

type ScheduleRotationV2ParticipantGroupOutput struct{ *pulumi.OutputState }

func (ScheduleRotationV2ParticipantGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationV2ParticipantGroup)(nil)).Elem()
}

func (o ScheduleRotationV2ParticipantGroupOutput) ToScheduleRotationV2ParticipantGroupOutput() ScheduleRotationV2ParticipantGroupOutput {
	return o
}

func (o ScheduleRotationV2ParticipantGroupOutput) ToScheduleRotationV2ParticipantGroupOutputWithContext(ctx context.Context) ScheduleRotationV2ParticipantGroupOutput {
	return o
}

// Group participants.
func (o ScheduleRotationV2ParticipantGroupOutput) Participants() ScheduleRotationV2ParticipantGroupParticipantArrayOutput {
	return o.ApplyT(func(v ScheduleRotationV2ParticipantGroup) []ScheduleRotationV2ParticipantGroupParticipant {
		return v.Participants
	}).(ScheduleRotationV2ParticipantGroupParticipantArrayOutput)
}

type ScheduleRotationV2ParticipantGroupArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationV2ParticipantGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationV2ParticipantGroup)(nil)).Elem()
}

func (o ScheduleRotationV2ParticipantGroupArrayOutput) ToScheduleRotationV2ParticipantGroupArrayOutput() ScheduleRotationV2ParticipantGroupArrayOutput {
	return o
}

func (o ScheduleRotationV2ParticipantGroupArrayOutput) ToScheduleRotationV2ParticipantGroupArrayOutputWithContext(ctx context.Context) ScheduleRotationV2ParticipantGroupArrayOutput {
	return o
}

func (o ScheduleRotationV2ParticipantGroupArrayOutput) Index(i pulumi.IntInput) ScheduleRotationV2ParticipantGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleRotationV2ParticipantGroup {
		return vs[0].([]ScheduleRotationV2ParticipantGroup)[vs[1].(int)]
	}).(ScheduleRotationV2ParticipantGroupOutput)
}

type ScheduleRotationV2ParticipantGroupParticipant struct {
	// Rotation id.
	Id   string `pulumi:"id"`
	Type string `pulumi:"type"`
}

// ScheduleRotationV2ParticipantGroupParticipantInput is an input type that accepts ScheduleRotationV2ParticipantGroupParticipantArgs and ScheduleRotationV2ParticipantGroupParticipantOutput values.
// You can construct a concrete instance of `ScheduleRotationV2ParticipantGroupParticipantInput` via:
//
//	ScheduleRotationV2ParticipantGroupParticipantArgs{...}
type ScheduleRotationV2ParticipantGroupParticipantInput interface {
	pulumi.Input

	ToScheduleRotationV2ParticipantGroupParticipantOutput() ScheduleRotationV2ParticipantGroupParticipantOutput
	ToScheduleRotationV2ParticipantGroupParticipantOutputWithContext(context.Context) ScheduleRotationV2ParticipantGroupParticipantOutput
}

type ScheduleRotationV2ParticipantGroupParticipantArgs struct {
	// Rotation id.
	Id   pulumi.StringInput `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScheduleRotationV2ParticipantGroupParticipantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationV2ParticipantGroupParticipant)(nil)).Elem()
}

func (i ScheduleRotationV2ParticipantGroupParticipantArgs) ToScheduleRotationV2ParticipantGroupParticipantOutput() ScheduleRotationV2ParticipantGroupParticipantOutput {
	return i.ToScheduleRotationV2ParticipantGroupParticipantOutputWithContext(context.Background())
}

func (i ScheduleRotationV2ParticipantGroupParticipantArgs) ToScheduleRotationV2ParticipantGroupParticipantOutputWithContext(ctx context.Context) ScheduleRotationV2ParticipantGroupParticipantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationV2ParticipantGroupParticipantOutput)
}

// ScheduleRotationV2ParticipantGroupParticipantArrayInput is an input type that accepts ScheduleRotationV2ParticipantGroupParticipantArray and ScheduleRotationV2ParticipantGroupParticipantArrayOutput values.
// You can construct a concrete instance of `ScheduleRotationV2ParticipantGroupParticipantArrayInput` via:
//
//	ScheduleRotationV2ParticipantGroupParticipantArray{ ScheduleRotationV2ParticipantGroupParticipantArgs{...} }
type ScheduleRotationV2ParticipantGroupParticipantArrayInput interface {
	pulumi.Input

	ToScheduleRotationV2ParticipantGroupParticipantArrayOutput() ScheduleRotationV2ParticipantGroupParticipantArrayOutput
	ToScheduleRotationV2ParticipantGroupParticipantArrayOutputWithContext(context.Context) ScheduleRotationV2ParticipantGroupParticipantArrayOutput
}

type ScheduleRotationV2ParticipantGroupParticipantArray []ScheduleRotationV2ParticipantGroupParticipantInput

func (ScheduleRotationV2ParticipantGroupParticipantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationV2ParticipantGroupParticipant)(nil)).Elem()
}

func (i ScheduleRotationV2ParticipantGroupParticipantArray) ToScheduleRotationV2ParticipantGroupParticipantArrayOutput() ScheduleRotationV2ParticipantGroupParticipantArrayOutput {
	return i.ToScheduleRotationV2ParticipantGroupParticipantArrayOutputWithContext(context.Background())
}

func (i ScheduleRotationV2ParticipantGroupParticipantArray) ToScheduleRotationV2ParticipantGroupParticipantArrayOutputWithContext(ctx context.Context) ScheduleRotationV2ParticipantGroupParticipantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationV2ParticipantGroupParticipantArrayOutput)
}

type ScheduleRotationV2ParticipantGroupParticipantOutput struct{ *pulumi.OutputState }

func (ScheduleRotationV2ParticipantGroupParticipantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationV2ParticipantGroupParticipant)(nil)).Elem()
}

func (o ScheduleRotationV2ParticipantGroupParticipantOutput) ToScheduleRotationV2ParticipantGroupParticipantOutput() ScheduleRotationV2ParticipantGroupParticipantOutput {
	return o
}

func (o ScheduleRotationV2ParticipantGroupParticipantOutput) ToScheduleRotationV2ParticipantGroupParticipantOutputWithContext(ctx context.Context) ScheduleRotationV2ParticipantGroupParticipantOutput {
	return o
}

// Rotation id.
func (o ScheduleRotationV2ParticipantGroupParticipantOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleRotationV2ParticipantGroupParticipant) string { return v.Id }).(pulumi.StringOutput)
}

func (o ScheduleRotationV2ParticipantGroupParticipantOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleRotationV2ParticipantGroupParticipant) string { return v.Type }).(pulumi.StringOutput)
}

type ScheduleRotationV2ParticipantGroupParticipantArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationV2ParticipantGroupParticipantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationV2ParticipantGroupParticipant)(nil)).Elem()
}

func (o ScheduleRotationV2ParticipantGroupParticipantArrayOutput) ToScheduleRotationV2ParticipantGroupParticipantArrayOutput() ScheduleRotationV2ParticipantGroupParticipantArrayOutput {
	return o
}

func (o ScheduleRotationV2ParticipantGroupParticipantArrayOutput) ToScheduleRotationV2ParticipantGroupParticipantArrayOutputWithContext(ctx context.Context) ScheduleRotationV2ParticipantGroupParticipantArrayOutput {
	return o
}

func (o ScheduleRotationV2ParticipantGroupParticipantArrayOutput) Index(i pulumi.IntInput) ScheduleRotationV2ParticipantGroupParticipantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleRotationV2ParticipantGroupParticipant {
		return vs[0].([]ScheduleRotationV2ParticipantGroupParticipant)[vs[1].(int)]
	}).(ScheduleRotationV2ParticipantGroupParticipantOutput)
}

type ScheduleRotationV2ShiftTimeslot struct {
	// Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// Defines the duration of each shift. (in minutes)
	Duration int `pulumi:"duration"`
	// Defines the start hour of the each shift in the schedule timezone.
	StartHour int `pulumi:"startHour"`
	// Defines the start minute of the each shift in the schedule timezone.
	StartMinute int `pulumi:"startMinute"`
}

// ScheduleRotationV2ShiftTimeslotInput is an input type that accepts ScheduleRotationV2ShiftTimeslotArgs and ScheduleRotationV2ShiftTimeslotOutput values.
// You can construct a concrete instance of `ScheduleRotationV2ShiftTimeslotInput` via:
//
//	ScheduleRotationV2ShiftTimeslotArgs{...}
type ScheduleRotationV2ShiftTimeslotInput interface {
	pulumi.Input

	ToScheduleRotationV2ShiftTimeslotOutput() ScheduleRotationV2ShiftTimeslotOutput
	ToScheduleRotationV2ShiftTimeslotOutputWithContext(context.Context) ScheduleRotationV2ShiftTimeslotOutput
}

type ScheduleRotationV2ShiftTimeslotArgs struct {
	// Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
	// Defines the duration of each shift. (in minutes)
	Duration pulumi.IntInput `pulumi:"duration"`
	// Defines the start hour of the each shift in the schedule timezone.
	StartHour pulumi.IntInput `pulumi:"startHour"`
	// Defines the start minute of the each shift in the schedule timezone.
	StartMinute pulumi.IntInput `pulumi:"startMinute"`
}

func (ScheduleRotationV2ShiftTimeslotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationV2ShiftTimeslot)(nil)).Elem()
}

func (i ScheduleRotationV2ShiftTimeslotArgs) ToScheduleRotationV2ShiftTimeslotOutput() ScheduleRotationV2ShiftTimeslotOutput {
	return i.ToScheduleRotationV2ShiftTimeslotOutputWithContext(context.Background())
}

func (i ScheduleRotationV2ShiftTimeslotArgs) ToScheduleRotationV2ShiftTimeslotOutputWithContext(ctx context.Context) ScheduleRotationV2ShiftTimeslotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationV2ShiftTimeslotOutput)
}

// ScheduleRotationV2ShiftTimeslotArrayInput is an input type that accepts ScheduleRotationV2ShiftTimeslotArray and ScheduleRotationV2ShiftTimeslotArrayOutput values.
// You can construct a concrete instance of `ScheduleRotationV2ShiftTimeslotArrayInput` via:
//
//	ScheduleRotationV2ShiftTimeslotArray{ ScheduleRotationV2ShiftTimeslotArgs{...} }
type ScheduleRotationV2ShiftTimeslotArrayInput interface {
	pulumi.Input

	ToScheduleRotationV2ShiftTimeslotArrayOutput() ScheduleRotationV2ShiftTimeslotArrayOutput
	ToScheduleRotationV2ShiftTimeslotArrayOutputWithContext(context.Context) ScheduleRotationV2ShiftTimeslotArrayOutput
}

type ScheduleRotationV2ShiftTimeslotArray []ScheduleRotationV2ShiftTimeslotInput

func (ScheduleRotationV2ShiftTimeslotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationV2ShiftTimeslot)(nil)).Elem()
}

func (i ScheduleRotationV2ShiftTimeslotArray) ToScheduleRotationV2ShiftTimeslotArrayOutput() ScheduleRotationV2ShiftTimeslotArrayOutput {
	return i.ToScheduleRotationV2ShiftTimeslotArrayOutputWithContext(context.Background())
}

func (i ScheduleRotationV2ShiftTimeslotArray) ToScheduleRotationV2ShiftTimeslotArrayOutputWithContext(ctx context.Context) ScheduleRotationV2ShiftTimeslotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationV2ShiftTimeslotArrayOutput)
}

type ScheduleRotationV2ShiftTimeslotOutput struct{ *pulumi.OutputState }

func (ScheduleRotationV2ShiftTimeslotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationV2ShiftTimeslot)(nil)).Elem()
}

func (o ScheduleRotationV2ShiftTimeslotOutput) ToScheduleRotationV2ShiftTimeslotOutput() ScheduleRotationV2ShiftTimeslotOutput {
	return o
}

func (o ScheduleRotationV2ShiftTimeslotOutput) ToScheduleRotationV2ShiftTimeslotOutputWithContext(ctx context.Context) ScheduleRotationV2ShiftTimeslotOutput {
	return o
}

// Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
func (o ScheduleRotationV2ShiftTimeslotOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleRotationV2ShiftTimeslot) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

// Defines the duration of each shift. (in minutes)
func (o ScheduleRotationV2ShiftTimeslotOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationV2ShiftTimeslot) int { return v.Duration }).(pulumi.IntOutput)
}

// Defines the start hour of the each shift in the schedule timezone.
func (o ScheduleRotationV2ShiftTimeslotOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationV2ShiftTimeslot) int { return v.StartHour }).(pulumi.IntOutput)
}

// Defines the start minute of the each shift in the schedule timezone.
func (o ScheduleRotationV2ShiftTimeslotOutput) StartMinute() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationV2ShiftTimeslot) int { return v.StartMinute }).(pulumi.IntOutput)
}

type ScheduleRotationV2ShiftTimeslotArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationV2ShiftTimeslotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationV2ShiftTimeslot)(nil)).Elem()
}

func (o ScheduleRotationV2ShiftTimeslotArrayOutput) ToScheduleRotationV2ShiftTimeslotArrayOutput() ScheduleRotationV2ShiftTimeslotArrayOutput {
	return o
}

func (o ScheduleRotationV2ShiftTimeslotArrayOutput) ToScheduleRotationV2ShiftTimeslotArrayOutputWithContext(ctx context.Context) ScheduleRotationV2ShiftTimeslotArrayOutput {
	return o
}

func (o ScheduleRotationV2ShiftTimeslotArrayOutput) Index(i pulumi.IntInput) ScheduleRotationV2ShiftTimeslotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleRotationV2ShiftTimeslot {
		return vs[0].([]ScheduleRotationV2ShiftTimeslot)[vs[1].(int)]
	}).(ScheduleRotationV2ShiftTimeslotOutput)
}

type ScheduleV2EntityOwner struct {
	// Schedule owner id.
	Id string `pulumi:"id"`
	// Schedule owner type (user, team, squad).
	Type string `pulumi:"type"`
}

// ScheduleV2EntityOwnerInput is an input type that accepts ScheduleV2EntityOwnerArgs and ScheduleV2EntityOwnerOutput values.
// You can construct a concrete instance of `ScheduleV2EntityOwnerInput` via:
//
//	ScheduleV2EntityOwnerArgs{...}
type ScheduleV2EntityOwnerInput interface {
	pulumi.Input

	ToScheduleV2EntityOwnerOutput() ScheduleV2EntityOwnerOutput
	ToScheduleV2EntityOwnerOutputWithContext(context.Context) ScheduleV2EntityOwnerOutput
}

type ScheduleV2EntityOwnerArgs struct {
	// Schedule owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Schedule owner type (user, team, squad).
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScheduleV2EntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleV2EntityOwner)(nil)).Elem()
}

func (i ScheduleV2EntityOwnerArgs) ToScheduleV2EntityOwnerOutput() ScheduleV2EntityOwnerOutput {
	return i.ToScheduleV2EntityOwnerOutputWithContext(context.Background())
}

func (i ScheduleV2EntityOwnerArgs) ToScheduleV2EntityOwnerOutputWithContext(ctx context.Context) ScheduleV2EntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleV2EntityOwnerOutput)
}

func (i ScheduleV2EntityOwnerArgs) ToScheduleV2EntityOwnerPtrOutput() ScheduleV2EntityOwnerPtrOutput {
	return i.ToScheduleV2EntityOwnerPtrOutputWithContext(context.Background())
}

func (i ScheduleV2EntityOwnerArgs) ToScheduleV2EntityOwnerPtrOutputWithContext(ctx context.Context) ScheduleV2EntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleV2EntityOwnerOutput).ToScheduleV2EntityOwnerPtrOutputWithContext(ctx)
}

// ScheduleV2EntityOwnerPtrInput is an input type that accepts ScheduleV2EntityOwnerArgs, ScheduleV2EntityOwnerPtr and ScheduleV2EntityOwnerPtrOutput values.
// You can construct a concrete instance of `ScheduleV2EntityOwnerPtrInput` via:
//
//	        ScheduleV2EntityOwnerArgs{...}
//
//	or:
//
//	        nil
type ScheduleV2EntityOwnerPtrInput interface {
	pulumi.Input

	ToScheduleV2EntityOwnerPtrOutput() ScheduleV2EntityOwnerPtrOutput
	ToScheduleV2EntityOwnerPtrOutputWithContext(context.Context) ScheduleV2EntityOwnerPtrOutput
}

type scheduleV2EntityOwnerPtrType ScheduleV2EntityOwnerArgs

func ScheduleV2EntityOwnerPtr(v *ScheduleV2EntityOwnerArgs) ScheduleV2EntityOwnerPtrInput {
	return (*scheduleV2EntityOwnerPtrType)(v)
}

func (*scheduleV2EntityOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleV2EntityOwner)(nil)).Elem()
}

func (i *scheduleV2EntityOwnerPtrType) ToScheduleV2EntityOwnerPtrOutput() ScheduleV2EntityOwnerPtrOutput {
	return i.ToScheduleV2EntityOwnerPtrOutputWithContext(context.Background())
}

func (i *scheduleV2EntityOwnerPtrType) ToScheduleV2EntityOwnerPtrOutputWithContext(ctx context.Context) ScheduleV2EntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleV2EntityOwnerPtrOutput)
}

type ScheduleV2EntityOwnerOutput struct{ *pulumi.OutputState }

func (ScheduleV2EntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleV2EntityOwner)(nil)).Elem()
}

func (o ScheduleV2EntityOwnerOutput) ToScheduleV2EntityOwnerOutput() ScheduleV2EntityOwnerOutput {
	return o
}

func (o ScheduleV2EntityOwnerOutput) ToScheduleV2EntityOwnerOutputWithContext(ctx context.Context) ScheduleV2EntityOwnerOutput {
	return o
}

func (o ScheduleV2EntityOwnerOutput) ToScheduleV2EntityOwnerPtrOutput() ScheduleV2EntityOwnerPtrOutput {
	return o.ToScheduleV2EntityOwnerPtrOutputWithContext(context.Background())
}

func (o ScheduleV2EntityOwnerOutput) ToScheduleV2EntityOwnerPtrOutputWithContext(ctx context.Context) ScheduleV2EntityOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleV2EntityOwner) *ScheduleV2EntityOwner {
		return &v
	}).(ScheduleV2EntityOwnerPtrOutput)
}

// Schedule owner id.
func (o ScheduleV2EntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleV2EntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Schedule owner type (user, team, squad).
func (o ScheduleV2EntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleV2EntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type ScheduleV2EntityOwnerPtrOutput struct{ *pulumi.OutputState }

func (ScheduleV2EntityOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleV2EntityOwner)(nil)).Elem()
}

func (o ScheduleV2EntityOwnerPtrOutput) ToScheduleV2EntityOwnerPtrOutput() ScheduleV2EntityOwnerPtrOutput {
	return o
}

func (o ScheduleV2EntityOwnerPtrOutput) ToScheduleV2EntityOwnerPtrOutputWithContext(ctx context.Context) ScheduleV2EntityOwnerPtrOutput {
	return o
}

func (o ScheduleV2EntityOwnerPtrOutput) Elem() ScheduleV2EntityOwnerOutput {
	return o.ApplyT(func(v *ScheduleV2EntityOwner) ScheduleV2EntityOwner {
		if v != nil {
			return *v
		}
		var ret ScheduleV2EntityOwner
		return ret
	}).(ScheduleV2EntityOwnerOutput)
}

// Schedule owner id.
func (o ScheduleV2EntityOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleV2EntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Schedule owner type (user, team, squad).
func (o ScheduleV2EntityOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleV2EntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ScheduleV2Tag struct {
	// Schedule tag color.
	Color *string `pulumi:"color"`
	// Schedule tag key.
	Key string `pulumi:"key"`
	// Schedule tag value.
	Value string `pulumi:"value"`
}

// ScheduleV2TagInput is an input type that accepts ScheduleV2TagArgs and ScheduleV2TagOutput values.
// You can construct a concrete instance of `ScheduleV2TagInput` via:
//
//	ScheduleV2TagArgs{...}
type ScheduleV2TagInput interface {
	pulumi.Input

	ToScheduleV2TagOutput() ScheduleV2TagOutput
	ToScheduleV2TagOutputWithContext(context.Context) ScheduleV2TagOutput
}

type ScheduleV2TagArgs struct {
	// Schedule tag color.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Schedule tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Schedule tag value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ScheduleV2TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleV2Tag)(nil)).Elem()
}

func (i ScheduleV2TagArgs) ToScheduleV2TagOutput() ScheduleV2TagOutput {
	return i.ToScheduleV2TagOutputWithContext(context.Background())
}

func (i ScheduleV2TagArgs) ToScheduleV2TagOutputWithContext(ctx context.Context) ScheduleV2TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleV2TagOutput)
}

// ScheduleV2TagArrayInput is an input type that accepts ScheduleV2TagArray and ScheduleV2TagArrayOutput values.
// You can construct a concrete instance of `ScheduleV2TagArrayInput` via:
//
//	ScheduleV2TagArray{ ScheduleV2TagArgs{...} }
type ScheduleV2TagArrayInput interface {
	pulumi.Input

	ToScheduleV2TagArrayOutput() ScheduleV2TagArrayOutput
	ToScheduleV2TagArrayOutputWithContext(context.Context) ScheduleV2TagArrayOutput
}

type ScheduleV2TagArray []ScheduleV2TagInput

func (ScheduleV2TagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleV2Tag)(nil)).Elem()
}

func (i ScheduleV2TagArray) ToScheduleV2TagArrayOutput() ScheduleV2TagArrayOutput {
	return i.ToScheduleV2TagArrayOutputWithContext(context.Background())
}

func (i ScheduleV2TagArray) ToScheduleV2TagArrayOutputWithContext(ctx context.Context) ScheduleV2TagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleV2TagArrayOutput)
}

type ScheduleV2TagOutput struct{ *pulumi.OutputState }

func (ScheduleV2TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleV2Tag)(nil)).Elem()
}

func (o ScheduleV2TagOutput) ToScheduleV2TagOutput() ScheduleV2TagOutput {
	return o
}

func (o ScheduleV2TagOutput) ToScheduleV2TagOutputWithContext(ctx context.Context) ScheduleV2TagOutput {
	return o
}

// Schedule tag color.
func (o ScheduleV2TagOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleV2Tag) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Schedule tag key.
func (o ScheduleV2TagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleV2Tag) string { return v.Key }).(pulumi.StringOutput)
}

// Schedule tag value.
func (o ScheduleV2TagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleV2Tag) string { return v.Value }).(pulumi.StringOutput)
}

type ScheduleV2TagArrayOutput struct{ *pulumi.OutputState }

func (ScheduleV2TagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleV2Tag)(nil)).Elem()
}

func (o ScheduleV2TagArrayOutput) ToScheduleV2TagArrayOutput() ScheduleV2TagArrayOutput {
	return o
}

func (o ScheduleV2TagArrayOutput) ToScheduleV2TagArrayOutputWithContext(ctx context.Context) ScheduleV2TagArrayOutput {
	return o
}

func (o ScheduleV2TagArrayOutput) Index(i pulumi.IntInput) ScheduleV2TagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleV2Tag {
		return vs[0].([]ScheduleV2Tag)[vs[1].(int)]
	}).(ScheduleV2TagOutput)
}

type SebformInputField struct {
	// Input field Label.
	Label *string `pulumi:"label"`
	// Input field options.
	Options []string `pulumi:"options"`
}

// SebformInputFieldInput is an input type that accepts SebformInputFieldArgs and SebformInputFieldOutput values.
// You can construct a concrete instance of `SebformInputFieldInput` via:
//
//	SebformInputFieldArgs{...}
type SebformInputFieldInput interface {
	pulumi.Input

	ToSebformInputFieldOutput() SebformInputFieldOutput
	ToSebformInputFieldOutputWithContext(context.Context) SebformInputFieldOutput
}

type SebformInputFieldArgs struct {
	// Input field Label.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Input field options.
	Options pulumi.StringArrayInput `pulumi:"options"`
}

func (SebformInputFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SebformInputField)(nil)).Elem()
}

func (i SebformInputFieldArgs) ToSebformInputFieldOutput() SebformInputFieldOutput {
	return i.ToSebformInputFieldOutputWithContext(context.Background())
}

func (i SebformInputFieldArgs) ToSebformInputFieldOutputWithContext(ctx context.Context) SebformInputFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SebformInputFieldOutput)
}

// SebformInputFieldArrayInput is an input type that accepts SebformInputFieldArray and SebformInputFieldArrayOutput values.
// You can construct a concrete instance of `SebformInputFieldArrayInput` via:
//
//	SebformInputFieldArray{ SebformInputFieldArgs{...} }
type SebformInputFieldArrayInput interface {
	pulumi.Input

	ToSebformInputFieldArrayOutput() SebformInputFieldArrayOutput
	ToSebformInputFieldArrayOutputWithContext(context.Context) SebformInputFieldArrayOutput
}

type SebformInputFieldArray []SebformInputFieldInput

func (SebformInputFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SebformInputField)(nil)).Elem()
}

func (i SebformInputFieldArray) ToSebformInputFieldArrayOutput() SebformInputFieldArrayOutput {
	return i.ToSebformInputFieldArrayOutputWithContext(context.Background())
}

func (i SebformInputFieldArray) ToSebformInputFieldArrayOutputWithContext(ctx context.Context) SebformInputFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SebformInputFieldArrayOutput)
}

type SebformInputFieldOutput struct{ *pulumi.OutputState }

func (SebformInputFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SebformInputField)(nil)).Elem()
}

func (o SebformInputFieldOutput) ToSebformInputFieldOutput() SebformInputFieldOutput {
	return o
}

func (o SebformInputFieldOutput) ToSebformInputFieldOutputWithContext(ctx context.Context) SebformInputFieldOutput {
	return o
}

// Input field Label.
func (o SebformInputFieldOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SebformInputField) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Input field options.
func (o SebformInputFieldOutput) Options() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SebformInputField) []string { return v.Options }).(pulumi.StringArrayOutput)
}

type SebformInputFieldArrayOutput struct{ *pulumi.OutputState }

func (SebformInputFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SebformInputField)(nil)).Elem()
}

func (o SebformInputFieldArrayOutput) ToSebformInputFieldArrayOutput() SebformInputFieldArrayOutput {
	return o
}

func (o SebformInputFieldArrayOutput) ToSebformInputFieldArrayOutputWithContext(ctx context.Context) SebformInputFieldArrayOutput {
	return o
}

func (o SebformInputFieldArrayOutput) Index(i pulumi.IntInput) SebformInputFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SebformInputField {
		return vs[0].([]SebformInputField)[vs[1].(int)]
	}).(SebformInputFieldOutput)
}

type SebformOwner struct {
	// Form owner id.
	Id string `pulumi:"id"`
	// Form owner name.
	Name *string `pulumi:"name"`
	// Form owner type (user, team, squad).
	Type string `pulumi:"type"`
}

// SebformOwnerInput is an input type that accepts SebformOwnerArgs and SebformOwnerOutput values.
// You can construct a concrete instance of `SebformOwnerInput` via:
//
//	SebformOwnerArgs{...}
type SebformOwnerInput interface {
	pulumi.Input

	ToSebformOwnerOutput() SebformOwnerOutput
	ToSebformOwnerOutputWithContext(context.Context) SebformOwnerOutput
}

type SebformOwnerArgs struct {
	// Form owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Form owner name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Form owner type (user, team, squad).
	Type pulumi.StringInput `pulumi:"type"`
}

func (SebformOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SebformOwner)(nil)).Elem()
}

func (i SebformOwnerArgs) ToSebformOwnerOutput() SebformOwnerOutput {
	return i.ToSebformOwnerOutputWithContext(context.Background())
}

func (i SebformOwnerArgs) ToSebformOwnerOutputWithContext(ctx context.Context) SebformOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SebformOwnerOutput)
}

func (i SebformOwnerArgs) ToSebformOwnerPtrOutput() SebformOwnerPtrOutput {
	return i.ToSebformOwnerPtrOutputWithContext(context.Background())
}

func (i SebformOwnerArgs) ToSebformOwnerPtrOutputWithContext(ctx context.Context) SebformOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SebformOwnerOutput).ToSebformOwnerPtrOutputWithContext(ctx)
}

// SebformOwnerPtrInput is an input type that accepts SebformOwnerArgs, SebformOwnerPtr and SebformOwnerPtrOutput values.
// You can construct a concrete instance of `SebformOwnerPtrInput` via:
//
//	        SebformOwnerArgs{...}
//
//	or:
//
//	        nil
type SebformOwnerPtrInput interface {
	pulumi.Input

	ToSebformOwnerPtrOutput() SebformOwnerPtrOutput
	ToSebformOwnerPtrOutputWithContext(context.Context) SebformOwnerPtrOutput
}

type sebformOwnerPtrType SebformOwnerArgs

func SebformOwnerPtr(v *SebformOwnerArgs) SebformOwnerPtrInput {
	return (*sebformOwnerPtrType)(v)
}

func (*sebformOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SebformOwner)(nil)).Elem()
}

func (i *sebformOwnerPtrType) ToSebformOwnerPtrOutput() SebformOwnerPtrOutput {
	return i.ToSebformOwnerPtrOutputWithContext(context.Background())
}

func (i *sebformOwnerPtrType) ToSebformOwnerPtrOutputWithContext(ctx context.Context) SebformOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SebformOwnerPtrOutput)
}

type SebformOwnerOutput struct{ *pulumi.OutputState }

func (SebformOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SebformOwner)(nil)).Elem()
}

func (o SebformOwnerOutput) ToSebformOwnerOutput() SebformOwnerOutput {
	return o
}

func (o SebformOwnerOutput) ToSebformOwnerOutputWithContext(ctx context.Context) SebformOwnerOutput {
	return o
}

func (o SebformOwnerOutput) ToSebformOwnerPtrOutput() SebformOwnerPtrOutput {
	return o.ToSebformOwnerPtrOutputWithContext(context.Background())
}

func (o SebformOwnerOutput) ToSebformOwnerPtrOutputWithContext(ctx context.Context) SebformOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SebformOwner) *SebformOwner {
		return &v
	}).(SebformOwnerPtrOutput)
}

// Form owner id.
func (o SebformOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SebformOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Form owner name.
func (o SebformOwnerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SebformOwner) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Form owner type (user, team, squad).
func (o SebformOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SebformOwner) string { return v.Type }).(pulumi.StringOutput)
}

type SebformOwnerPtrOutput struct{ *pulumi.OutputState }

func (SebformOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SebformOwner)(nil)).Elem()
}

func (o SebformOwnerPtrOutput) ToSebformOwnerPtrOutput() SebformOwnerPtrOutput {
	return o
}

func (o SebformOwnerPtrOutput) ToSebformOwnerPtrOutputWithContext(ctx context.Context) SebformOwnerPtrOutput {
	return o
}

func (o SebformOwnerPtrOutput) Elem() SebformOwnerOutput {
	return o.ApplyT(func(v *SebformOwner) SebformOwner {
		if v != nil {
			return *v
		}
		var ret SebformOwner
		return ret
	}).(SebformOwnerOutput)
}

// Form owner id.
func (o SebformOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SebformOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Form owner name.
func (o SebformOwnerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SebformOwner) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Form owner type (user, team, squad).
func (o SebformOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SebformOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type SebformService struct {
	// Service alias.
	Alias *string `pulumi:"alias"`
	// Service name.
	Name *string `pulumi:"name"`
	// Service ID.
	ServiceId string `pulumi:"serviceId"`
}

// SebformServiceInput is an input type that accepts SebformServiceArgs and SebformServiceOutput values.
// You can construct a concrete instance of `SebformServiceInput` via:
//
//	SebformServiceArgs{...}
type SebformServiceInput interface {
	pulumi.Input

	ToSebformServiceOutput() SebformServiceOutput
	ToSebformServiceOutputWithContext(context.Context) SebformServiceOutput
}

type SebformServiceArgs struct {
	// Service alias.
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// Service name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Service ID.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
}

func (SebformServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SebformService)(nil)).Elem()
}

func (i SebformServiceArgs) ToSebformServiceOutput() SebformServiceOutput {
	return i.ToSebformServiceOutputWithContext(context.Background())
}

func (i SebformServiceArgs) ToSebformServiceOutputWithContext(ctx context.Context) SebformServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SebformServiceOutput)
}

// SebformServiceArrayInput is an input type that accepts SebformServiceArray and SebformServiceArrayOutput values.
// You can construct a concrete instance of `SebformServiceArrayInput` via:
//
//	SebformServiceArray{ SebformServiceArgs{...} }
type SebformServiceArrayInput interface {
	pulumi.Input

	ToSebformServiceArrayOutput() SebformServiceArrayOutput
	ToSebformServiceArrayOutputWithContext(context.Context) SebformServiceArrayOutput
}

type SebformServiceArray []SebformServiceInput

func (SebformServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SebformService)(nil)).Elem()
}

func (i SebformServiceArray) ToSebformServiceArrayOutput() SebformServiceArrayOutput {
	return i.ToSebformServiceArrayOutputWithContext(context.Background())
}

func (i SebformServiceArray) ToSebformServiceArrayOutputWithContext(ctx context.Context) SebformServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SebformServiceArrayOutput)
}

type SebformServiceOutput struct{ *pulumi.OutputState }

func (SebformServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SebformService)(nil)).Elem()
}

func (o SebformServiceOutput) ToSebformServiceOutput() SebformServiceOutput {
	return o
}

func (o SebformServiceOutput) ToSebformServiceOutputWithContext(ctx context.Context) SebformServiceOutput {
	return o
}

// Service alias.
func (o SebformServiceOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SebformService) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// Service name.
func (o SebformServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SebformService) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Service ID.
func (o SebformServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v SebformService) string { return v.ServiceId }).(pulumi.StringOutput)
}

type SebformServiceArrayOutput struct{ *pulumi.OutputState }

func (SebformServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SebformService)(nil)).Elem()
}

func (o SebformServiceArrayOutput) ToSebformServiceArrayOutput() SebformServiceArrayOutput {
	return o
}

func (o SebformServiceArrayOutput) ToSebformServiceArrayOutputWithContext(ctx context.Context) SebformServiceArrayOutput {
	return o
}

func (o SebformServiceArrayOutput) Index(i pulumi.IntInput) SebformServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SebformService {
		return vs[0].([]SebformService)[vs[1].(int)]
	}).(SebformServiceOutput)
}

type SebformSeverity struct {
	// Severity description.
	Description *string `pulumi:"description"`
	// Severity type.
	Type string `pulumi:"type"`
}

// SebformSeverityInput is an input type that accepts SebformSeverityArgs and SebformSeverityOutput values.
// You can construct a concrete instance of `SebformSeverityInput` via:
//
//	SebformSeverityArgs{...}
type SebformSeverityInput interface {
	pulumi.Input

	ToSebformSeverityOutput() SebformSeverityOutput
	ToSebformSeverityOutputWithContext(context.Context) SebformSeverityOutput
}

type SebformSeverityArgs struct {
	// Severity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Severity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SebformSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SebformSeverity)(nil)).Elem()
}

func (i SebformSeverityArgs) ToSebformSeverityOutput() SebformSeverityOutput {
	return i.ToSebformSeverityOutputWithContext(context.Background())
}

func (i SebformSeverityArgs) ToSebformSeverityOutputWithContext(ctx context.Context) SebformSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SebformSeverityOutput)
}

// SebformSeverityArrayInput is an input type that accepts SebformSeverityArray and SebformSeverityArrayOutput values.
// You can construct a concrete instance of `SebformSeverityArrayInput` via:
//
//	SebformSeverityArray{ SebformSeverityArgs{...} }
type SebformSeverityArrayInput interface {
	pulumi.Input

	ToSebformSeverityArrayOutput() SebformSeverityArrayOutput
	ToSebformSeverityArrayOutputWithContext(context.Context) SebformSeverityArrayOutput
}

type SebformSeverityArray []SebformSeverityInput

func (SebformSeverityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SebformSeverity)(nil)).Elem()
}

func (i SebformSeverityArray) ToSebformSeverityArrayOutput() SebformSeverityArrayOutput {
	return i.ToSebformSeverityArrayOutputWithContext(context.Background())
}

func (i SebformSeverityArray) ToSebformSeverityArrayOutputWithContext(ctx context.Context) SebformSeverityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SebformSeverityArrayOutput)
}

type SebformSeverityOutput struct{ *pulumi.OutputState }

func (SebformSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SebformSeverity)(nil)).Elem()
}

func (o SebformSeverityOutput) ToSebformSeverityOutput() SebformSeverityOutput {
	return o
}

func (o SebformSeverityOutput) ToSebformSeverityOutputWithContext(ctx context.Context) SebformSeverityOutput {
	return o
}

// Severity description.
func (o SebformSeverityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SebformSeverity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Severity type.
func (o SebformSeverityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SebformSeverity) string { return v.Type }).(pulumi.StringOutput)
}

type SebformSeverityArrayOutput struct{ *pulumi.OutputState }

func (SebformSeverityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SebformSeverity)(nil)).Elem()
}

func (o SebformSeverityArrayOutput) ToSebformSeverityArrayOutput() SebformSeverityArrayOutput {
	return o
}

func (o SebformSeverityArrayOutput) ToSebformSeverityArrayOutputWithContext(ctx context.Context) SebformSeverityArrayOutput {
	return o
}

func (o SebformSeverityArrayOutput) Index(i pulumi.IntInput) SebformSeverityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SebformSeverity {
		return vs[0].([]SebformSeverity)[vs[1].(int)]
	}).(SebformSeverityOutput)
}

type ServiceMaintainer struct {
	// The id of the maintainer.
	Id string `pulumi:"id"`
	// The type of the maintainer. (user, team or squad)
	Type string `pulumi:"type"`
}

// ServiceMaintainerInput is an input type that accepts ServiceMaintainerArgs and ServiceMaintainerOutput values.
// You can construct a concrete instance of `ServiceMaintainerInput` via:
//
//	ServiceMaintainerArgs{...}
type ServiceMaintainerInput interface {
	pulumi.Input

	ToServiceMaintainerOutput() ServiceMaintainerOutput
	ToServiceMaintainerOutputWithContext(context.Context) ServiceMaintainerOutput
}

type ServiceMaintainerArgs struct {
	// The id of the maintainer.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the maintainer. (user, team or squad)
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceMaintainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMaintainer)(nil)).Elem()
}

func (i ServiceMaintainerArgs) ToServiceMaintainerOutput() ServiceMaintainerOutput {
	return i.ToServiceMaintainerOutputWithContext(context.Background())
}

func (i ServiceMaintainerArgs) ToServiceMaintainerOutputWithContext(ctx context.Context) ServiceMaintainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMaintainerOutput)
}

func (i ServiceMaintainerArgs) ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput {
	return i.ToServiceMaintainerPtrOutputWithContext(context.Background())
}

func (i ServiceMaintainerArgs) ToServiceMaintainerPtrOutputWithContext(ctx context.Context) ServiceMaintainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMaintainerOutput).ToServiceMaintainerPtrOutputWithContext(ctx)
}

// ServiceMaintainerPtrInput is an input type that accepts ServiceMaintainerArgs, ServiceMaintainerPtr and ServiceMaintainerPtrOutput values.
// You can construct a concrete instance of `ServiceMaintainerPtrInput` via:
//
//	        ServiceMaintainerArgs{...}
//
//	or:
//
//	        nil
type ServiceMaintainerPtrInput interface {
	pulumi.Input

	ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput
	ToServiceMaintainerPtrOutputWithContext(context.Context) ServiceMaintainerPtrOutput
}

type serviceMaintainerPtrType ServiceMaintainerArgs

func ServiceMaintainerPtr(v *ServiceMaintainerArgs) ServiceMaintainerPtrInput {
	return (*serviceMaintainerPtrType)(v)
}

func (*serviceMaintainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMaintainer)(nil)).Elem()
}

func (i *serviceMaintainerPtrType) ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput {
	return i.ToServiceMaintainerPtrOutputWithContext(context.Background())
}

func (i *serviceMaintainerPtrType) ToServiceMaintainerPtrOutputWithContext(ctx context.Context) ServiceMaintainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMaintainerPtrOutput)
}

type ServiceMaintainerOutput struct{ *pulumi.OutputState }

func (ServiceMaintainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMaintainer)(nil)).Elem()
}

func (o ServiceMaintainerOutput) ToServiceMaintainerOutput() ServiceMaintainerOutput {
	return o
}

func (o ServiceMaintainerOutput) ToServiceMaintainerOutputWithContext(ctx context.Context) ServiceMaintainerOutput {
	return o
}

func (o ServiceMaintainerOutput) ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput {
	return o.ToServiceMaintainerPtrOutputWithContext(context.Background())
}

func (o ServiceMaintainerOutput) ToServiceMaintainerPtrOutputWithContext(ctx context.Context) ServiceMaintainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceMaintainer) *ServiceMaintainer {
		return &v
	}).(ServiceMaintainerPtrOutput)
}

// The id of the maintainer.
func (o ServiceMaintainerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMaintainer) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the maintainer. (user, team or squad)
func (o ServiceMaintainerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMaintainer) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceMaintainerPtrOutput struct{ *pulumi.OutputState }

func (ServiceMaintainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMaintainer)(nil)).Elem()
}

func (o ServiceMaintainerPtrOutput) ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput {
	return o
}

func (o ServiceMaintainerPtrOutput) ToServiceMaintainerPtrOutputWithContext(ctx context.Context) ServiceMaintainerPtrOutput {
	return o
}

func (o ServiceMaintainerPtrOutput) Elem() ServiceMaintainerOutput {
	return o.ApplyT(func(v *ServiceMaintainer) ServiceMaintainer {
		if v != nil {
			return *v
		}
		var ret ServiceMaintainer
		return ret
	}).(ServiceMaintainerOutput)
}

// The id of the maintainer.
func (o ServiceMaintainerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMaintainer) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The type of the maintainer. (user, team or squad)
func (o ServiceMaintainerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMaintainer) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceMaintenanceWindow struct {
	// Starting Time
	From string `pulumi:"from"`
	// repeat frequency. ('day', 'week', '2 weeks', '3 weeks', 'month')
	RepeatFrequency *string `pulumi:"repeatFrequency"`
	// Till when you want to repeat this Maintenance mode
	RepeatTill *string `pulumi:"repeatTill"`
	// End Time.
	Till string `pulumi:"till"`
}

// ServiceMaintenanceWindowInput is an input type that accepts ServiceMaintenanceWindowArgs and ServiceMaintenanceWindowOutput values.
// You can construct a concrete instance of `ServiceMaintenanceWindowInput` via:
//
//	ServiceMaintenanceWindowArgs{...}
type ServiceMaintenanceWindowInput interface {
	pulumi.Input

	ToServiceMaintenanceWindowOutput() ServiceMaintenanceWindowOutput
	ToServiceMaintenanceWindowOutputWithContext(context.Context) ServiceMaintenanceWindowOutput
}

type ServiceMaintenanceWindowArgs struct {
	// Starting Time
	From pulumi.StringInput `pulumi:"from"`
	// repeat frequency. ('day', 'week', '2 weeks', '3 weeks', 'month')
	RepeatFrequency pulumi.StringPtrInput `pulumi:"repeatFrequency"`
	// Till when you want to repeat this Maintenance mode
	RepeatTill pulumi.StringPtrInput `pulumi:"repeatTill"`
	// End Time.
	Till pulumi.StringInput `pulumi:"till"`
}

func (ServiceMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMaintenanceWindow)(nil)).Elem()
}

func (i ServiceMaintenanceWindowArgs) ToServiceMaintenanceWindowOutput() ServiceMaintenanceWindowOutput {
	return i.ToServiceMaintenanceWindowOutputWithContext(context.Background())
}

func (i ServiceMaintenanceWindowArgs) ToServiceMaintenanceWindowOutputWithContext(ctx context.Context) ServiceMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMaintenanceWindowOutput)
}

// ServiceMaintenanceWindowArrayInput is an input type that accepts ServiceMaintenanceWindowArray and ServiceMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `ServiceMaintenanceWindowArrayInput` via:
//
//	ServiceMaintenanceWindowArray{ ServiceMaintenanceWindowArgs{...} }
type ServiceMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToServiceMaintenanceWindowArrayOutput() ServiceMaintenanceWindowArrayOutput
	ToServiceMaintenanceWindowArrayOutputWithContext(context.Context) ServiceMaintenanceWindowArrayOutput
}

type ServiceMaintenanceWindowArray []ServiceMaintenanceWindowInput

func (ServiceMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceMaintenanceWindow)(nil)).Elem()
}

func (i ServiceMaintenanceWindowArray) ToServiceMaintenanceWindowArrayOutput() ServiceMaintenanceWindowArrayOutput {
	return i.ToServiceMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i ServiceMaintenanceWindowArray) ToServiceMaintenanceWindowArrayOutputWithContext(ctx context.Context) ServiceMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMaintenanceWindowArrayOutput)
}

type ServiceMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (ServiceMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMaintenanceWindow)(nil)).Elem()
}

func (o ServiceMaintenanceWindowOutput) ToServiceMaintenanceWindowOutput() ServiceMaintenanceWindowOutput {
	return o
}

func (o ServiceMaintenanceWindowOutput) ToServiceMaintenanceWindowOutputWithContext(ctx context.Context) ServiceMaintenanceWindowOutput {
	return o
}

// Starting Time
func (o ServiceMaintenanceWindowOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMaintenanceWindow) string { return v.From }).(pulumi.StringOutput)
}

// repeat frequency. ('day', 'week', '2 weeks', '3 weeks', 'month')
func (o ServiceMaintenanceWindowOutput) RepeatFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceMaintenanceWindow) *string { return v.RepeatFrequency }).(pulumi.StringPtrOutput)
}

// Till when you want to repeat this Maintenance mode
func (o ServiceMaintenanceWindowOutput) RepeatTill() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceMaintenanceWindow) *string { return v.RepeatTill }).(pulumi.StringPtrOutput)
}

// End Time.
func (o ServiceMaintenanceWindowOutput) Till() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMaintenanceWindow) string { return v.Till }).(pulumi.StringOutput)
}

type ServiceMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (ServiceMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceMaintenanceWindow)(nil)).Elem()
}

func (o ServiceMaintenanceWindowArrayOutput) ToServiceMaintenanceWindowArrayOutput() ServiceMaintenanceWindowArrayOutput {
	return o
}

func (o ServiceMaintenanceWindowArrayOutput) ToServiceMaintenanceWindowArrayOutputWithContext(ctx context.Context) ServiceMaintenanceWindowArrayOutput {
	return o
}

func (o ServiceMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) ServiceMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceMaintenanceWindow {
		return vs[0].([]ServiceMaintenanceWindow)[vs[1].(int)]
	}).(ServiceMaintenanceWindowOutput)
}

type ServiceTag struct {
	// key
	Key string `pulumi:"key"`
	// value
	Value string `pulumi:"value"`
}

// ServiceTagInput is an input type that accepts ServiceTagArgs and ServiceTagOutput values.
// You can construct a concrete instance of `ServiceTagInput` via:
//
//	ServiceTagArgs{...}
type ServiceTagInput interface {
	pulumi.Input

	ToServiceTagOutput() ServiceTagOutput
	ToServiceTagOutputWithContext(context.Context) ServiceTagOutput
}

type ServiceTagArgs struct {
	// key
	Key pulumi.StringInput `pulumi:"key"`
	// value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (i ServiceTagArgs) ToServiceTagOutput() ServiceTagOutput {
	return i.ToServiceTagOutputWithContext(context.Background())
}

func (i ServiceTagArgs) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagOutput)
}

// ServiceTagArrayInput is an input type that accepts ServiceTagArray and ServiceTagArrayOutput values.
// You can construct a concrete instance of `ServiceTagArrayInput` via:
//
//	ServiceTagArray{ ServiceTagArgs{...} }
type ServiceTagArrayInput interface {
	pulumi.Input

	ToServiceTagArrayOutput() ServiceTagArrayOutput
	ToServiceTagArrayOutputWithContext(context.Context) ServiceTagArrayOutput
}

type ServiceTagArray []ServiceTagInput

func (ServiceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (i ServiceTagArray) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return i.ToServiceTagArrayOutputWithContext(context.Background())
}

func (i ServiceTagArray) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagArrayOutput)
}

type ServiceTagOutput struct{ *pulumi.OutputState }

func (ServiceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (o ServiceTagOutput) ToServiceTagOutput() ServiceTagOutput {
	return o
}

func (o ServiceTagOutput) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return o
}

// key
func (o ServiceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTag) string { return v.Key }).(pulumi.StringOutput)
}

// value
func (o ServiceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTag) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceTagArrayOutput struct{ *pulumi.OutputState }

func (ServiceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) Index(i pulumi.IntInput) ServiceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTag {
		return vs[0].([]ServiceTag)[vs[1].(int)]
	}).(ServiceTagOutput)
}

type SuppressionRulesRule struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions []SuppressionRulesRuleBasicExpression `pulumi:"basicExpressions"`
	// description.
	Description *string `pulumi:"description"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression *string `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic bool `pulumi:"isBasic"`
	// is_timebased will be true when users use the time based suppression rule
	IsTimebased *bool `pulumi:"isTimebased"`
	// The timeslots for which this rule should be applied.
	Timeslots []SuppressionRulesRuleTimeslot `pulumi:"timeslots"`
}

// SuppressionRulesRuleInput is an input type that accepts SuppressionRulesRuleArgs and SuppressionRulesRuleOutput values.
// You can construct a concrete instance of `SuppressionRulesRuleInput` via:
//
//	SuppressionRulesRuleArgs{...}
type SuppressionRulesRuleInput interface {
	pulumi.Input

	ToSuppressionRulesRuleOutput() SuppressionRulesRuleOutput
	ToSuppressionRulesRuleOutputWithContext(context.Context) SuppressionRulesRuleOutput
}

type SuppressionRulesRuleArgs struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions SuppressionRulesRuleBasicExpressionArrayInput `pulumi:"basicExpressions"`
	// description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic pulumi.BoolInput `pulumi:"isBasic"`
	// is_timebased will be true when users use the time based suppression rule
	IsTimebased pulumi.BoolPtrInput `pulumi:"isTimebased"`
	// The timeslots for which this rule should be applied.
	Timeslots SuppressionRulesRuleTimeslotArrayInput `pulumi:"timeslots"`
}

func (SuppressionRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionRulesRule)(nil)).Elem()
}

func (i SuppressionRulesRuleArgs) ToSuppressionRulesRuleOutput() SuppressionRulesRuleOutput {
	return i.ToSuppressionRulesRuleOutputWithContext(context.Background())
}

func (i SuppressionRulesRuleArgs) ToSuppressionRulesRuleOutputWithContext(ctx context.Context) SuppressionRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionRulesRuleOutput)
}

// SuppressionRulesRuleArrayInput is an input type that accepts SuppressionRulesRuleArray and SuppressionRulesRuleArrayOutput values.
// You can construct a concrete instance of `SuppressionRulesRuleArrayInput` via:
//
//	SuppressionRulesRuleArray{ SuppressionRulesRuleArgs{...} }
type SuppressionRulesRuleArrayInput interface {
	pulumi.Input

	ToSuppressionRulesRuleArrayOutput() SuppressionRulesRuleArrayOutput
	ToSuppressionRulesRuleArrayOutputWithContext(context.Context) SuppressionRulesRuleArrayOutput
}

type SuppressionRulesRuleArray []SuppressionRulesRuleInput

func (SuppressionRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuppressionRulesRule)(nil)).Elem()
}

func (i SuppressionRulesRuleArray) ToSuppressionRulesRuleArrayOutput() SuppressionRulesRuleArrayOutput {
	return i.ToSuppressionRulesRuleArrayOutputWithContext(context.Background())
}

func (i SuppressionRulesRuleArray) ToSuppressionRulesRuleArrayOutputWithContext(ctx context.Context) SuppressionRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionRulesRuleArrayOutput)
}

type SuppressionRulesRuleOutput struct{ *pulumi.OutputState }

func (SuppressionRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionRulesRule)(nil)).Elem()
}

func (o SuppressionRulesRuleOutput) ToSuppressionRulesRuleOutput() SuppressionRulesRuleOutput {
	return o
}

func (o SuppressionRulesRuleOutput) ToSuppressionRulesRuleOutputWithContext(ctx context.Context) SuppressionRulesRuleOutput {
	return o
}

// The basic expression which needs to be evaluated to be true for this rule to apply.
func (o SuppressionRulesRuleOutput) BasicExpressions() SuppressionRulesRuleBasicExpressionArrayOutput {
	return o.ApplyT(func(v SuppressionRulesRule) []SuppressionRulesRuleBasicExpression { return v.BasicExpressions }).(SuppressionRulesRuleBasicExpressionArrayOutput)
}

// description.
func (o SuppressionRulesRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionRulesRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The expression which needs to be evaluated to be true for this rule to apply.
func (o SuppressionRulesRuleOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionRulesRule) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
func (o SuppressionRulesRuleOutput) IsBasic() pulumi.BoolOutput {
	return o.ApplyT(func(v SuppressionRulesRule) bool { return v.IsBasic }).(pulumi.BoolOutput)
}

// is_timebased will be true when users use the time based suppression rule
func (o SuppressionRulesRuleOutput) IsTimebased() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SuppressionRulesRule) *bool { return v.IsTimebased }).(pulumi.BoolPtrOutput)
}

// The timeslots for which this rule should be applied.
func (o SuppressionRulesRuleOutput) Timeslots() SuppressionRulesRuleTimeslotArrayOutput {
	return o.ApplyT(func(v SuppressionRulesRule) []SuppressionRulesRuleTimeslot { return v.Timeslots }).(SuppressionRulesRuleTimeslotArrayOutput)
}

type SuppressionRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (SuppressionRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuppressionRulesRule)(nil)).Elem()
}

func (o SuppressionRulesRuleArrayOutput) ToSuppressionRulesRuleArrayOutput() SuppressionRulesRuleArrayOutput {
	return o
}

func (o SuppressionRulesRuleArrayOutput) ToSuppressionRulesRuleArrayOutputWithContext(ctx context.Context) SuppressionRulesRuleArrayOutput {
	return o
}

func (o SuppressionRulesRuleArrayOutput) Index(i pulumi.IntInput) SuppressionRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SuppressionRulesRule {
		return vs[0].([]SuppressionRulesRule)[vs[1].(int)]
	}).(SuppressionRulesRuleOutput)
}

type SuppressionRulesRuleBasicExpression struct {
	Lhs string `pulumi:"lhs"`
	Op  string `pulumi:"op"`
	Rhs string `pulumi:"rhs"`
}

// SuppressionRulesRuleBasicExpressionInput is an input type that accepts SuppressionRulesRuleBasicExpressionArgs and SuppressionRulesRuleBasicExpressionOutput values.
// You can construct a concrete instance of `SuppressionRulesRuleBasicExpressionInput` via:
//
//	SuppressionRulesRuleBasicExpressionArgs{...}
type SuppressionRulesRuleBasicExpressionInput interface {
	pulumi.Input

	ToSuppressionRulesRuleBasicExpressionOutput() SuppressionRulesRuleBasicExpressionOutput
	ToSuppressionRulesRuleBasicExpressionOutputWithContext(context.Context) SuppressionRulesRuleBasicExpressionOutput
}

type SuppressionRulesRuleBasicExpressionArgs struct {
	Lhs pulumi.StringInput `pulumi:"lhs"`
	Op  pulumi.StringInput `pulumi:"op"`
	Rhs pulumi.StringInput `pulumi:"rhs"`
}

func (SuppressionRulesRuleBasicExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionRulesRuleBasicExpression)(nil)).Elem()
}

func (i SuppressionRulesRuleBasicExpressionArgs) ToSuppressionRulesRuleBasicExpressionOutput() SuppressionRulesRuleBasicExpressionOutput {
	return i.ToSuppressionRulesRuleBasicExpressionOutputWithContext(context.Background())
}

func (i SuppressionRulesRuleBasicExpressionArgs) ToSuppressionRulesRuleBasicExpressionOutputWithContext(ctx context.Context) SuppressionRulesRuleBasicExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionRulesRuleBasicExpressionOutput)
}

// SuppressionRulesRuleBasicExpressionArrayInput is an input type that accepts SuppressionRulesRuleBasicExpressionArray and SuppressionRulesRuleBasicExpressionArrayOutput values.
// You can construct a concrete instance of `SuppressionRulesRuleBasicExpressionArrayInput` via:
//
//	SuppressionRulesRuleBasicExpressionArray{ SuppressionRulesRuleBasicExpressionArgs{...} }
type SuppressionRulesRuleBasicExpressionArrayInput interface {
	pulumi.Input

	ToSuppressionRulesRuleBasicExpressionArrayOutput() SuppressionRulesRuleBasicExpressionArrayOutput
	ToSuppressionRulesRuleBasicExpressionArrayOutputWithContext(context.Context) SuppressionRulesRuleBasicExpressionArrayOutput
}

type SuppressionRulesRuleBasicExpressionArray []SuppressionRulesRuleBasicExpressionInput

func (SuppressionRulesRuleBasicExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuppressionRulesRuleBasicExpression)(nil)).Elem()
}

func (i SuppressionRulesRuleBasicExpressionArray) ToSuppressionRulesRuleBasicExpressionArrayOutput() SuppressionRulesRuleBasicExpressionArrayOutput {
	return i.ToSuppressionRulesRuleBasicExpressionArrayOutputWithContext(context.Background())
}

func (i SuppressionRulesRuleBasicExpressionArray) ToSuppressionRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) SuppressionRulesRuleBasicExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionRulesRuleBasicExpressionArrayOutput)
}

type SuppressionRulesRuleBasicExpressionOutput struct{ *pulumi.OutputState }

func (SuppressionRulesRuleBasicExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionRulesRuleBasicExpression)(nil)).Elem()
}

func (o SuppressionRulesRuleBasicExpressionOutput) ToSuppressionRulesRuleBasicExpressionOutput() SuppressionRulesRuleBasicExpressionOutput {
	return o
}

func (o SuppressionRulesRuleBasicExpressionOutput) ToSuppressionRulesRuleBasicExpressionOutputWithContext(ctx context.Context) SuppressionRulesRuleBasicExpressionOutput {
	return o
}

func (o SuppressionRulesRuleBasicExpressionOutput) Lhs() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionRulesRuleBasicExpression) string { return v.Lhs }).(pulumi.StringOutput)
}

func (o SuppressionRulesRuleBasicExpressionOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionRulesRuleBasicExpression) string { return v.Op }).(pulumi.StringOutput)
}

func (o SuppressionRulesRuleBasicExpressionOutput) Rhs() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionRulesRuleBasicExpression) string { return v.Rhs }).(pulumi.StringOutput)
}

type SuppressionRulesRuleBasicExpressionArrayOutput struct{ *pulumi.OutputState }

func (SuppressionRulesRuleBasicExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuppressionRulesRuleBasicExpression)(nil)).Elem()
}

func (o SuppressionRulesRuleBasicExpressionArrayOutput) ToSuppressionRulesRuleBasicExpressionArrayOutput() SuppressionRulesRuleBasicExpressionArrayOutput {
	return o
}

func (o SuppressionRulesRuleBasicExpressionArrayOutput) ToSuppressionRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) SuppressionRulesRuleBasicExpressionArrayOutput {
	return o
}

func (o SuppressionRulesRuleBasicExpressionArrayOutput) Index(i pulumi.IntInput) SuppressionRulesRuleBasicExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SuppressionRulesRuleBasicExpression {
		return vs[0].([]SuppressionRulesRuleBasicExpression)[vs[1].(int)]
	}).(SuppressionRulesRuleBasicExpressionOutput)
}

type SuppressionRulesRuleTimeslot struct {
	Customs    []SuppressionRulesRuleTimeslotCustom `pulumi:"customs"`
	EndTime    string                               `pulumi:"endTime"`
	EndsNever  *bool                                `pulumi:"endsNever"`
	EndsOn     string                               `pulumi:"endsOn"`
	IsAllday   *bool                                `pulumi:"isAllday"`
	IsCustom   *bool                                `pulumi:"isCustom"`
	Repetition string                               `pulumi:"repetition"`
	StartTime  string                               `pulumi:"startTime"`
	TimeZone   string                               `pulumi:"timeZone"`
}

// SuppressionRulesRuleTimeslotInput is an input type that accepts SuppressionRulesRuleTimeslotArgs and SuppressionRulesRuleTimeslotOutput values.
// You can construct a concrete instance of `SuppressionRulesRuleTimeslotInput` via:
//
//	SuppressionRulesRuleTimeslotArgs{...}
type SuppressionRulesRuleTimeslotInput interface {
	pulumi.Input

	ToSuppressionRulesRuleTimeslotOutput() SuppressionRulesRuleTimeslotOutput
	ToSuppressionRulesRuleTimeslotOutputWithContext(context.Context) SuppressionRulesRuleTimeslotOutput
}

type SuppressionRulesRuleTimeslotArgs struct {
	Customs    SuppressionRulesRuleTimeslotCustomArrayInput `pulumi:"customs"`
	EndTime    pulumi.StringInput                           `pulumi:"endTime"`
	EndsNever  pulumi.BoolPtrInput                          `pulumi:"endsNever"`
	EndsOn     pulumi.StringInput                           `pulumi:"endsOn"`
	IsAllday   pulumi.BoolPtrInput                          `pulumi:"isAllday"`
	IsCustom   pulumi.BoolPtrInput                          `pulumi:"isCustom"`
	Repetition pulumi.StringInput                           `pulumi:"repetition"`
	StartTime  pulumi.StringInput                           `pulumi:"startTime"`
	TimeZone   pulumi.StringInput                           `pulumi:"timeZone"`
}

func (SuppressionRulesRuleTimeslotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionRulesRuleTimeslot)(nil)).Elem()
}

func (i SuppressionRulesRuleTimeslotArgs) ToSuppressionRulesRuleTimeslotOutput() SuppressionRulesRuleTimeslotOutput {
	return i.ToSuppressionRulesRuleTimeslotOutputWithContext(context.Background())
}

func (i SuppressionRulesRuleTimeslotArgs) ToSuppressionRulesRuleTimeslotOutputWithContext(ctx context.Context) SuppressionRulesRuleTimeslotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionRulesRuleTimeslotOutput)
}

// SuppressionRulesRuleTimeslotArrayInput is an input type that accepts SuppressionRulesRuleTimeslotArray and SuppressionRulesRuleTimeslotArrayOutput values.
// You can construct a concrete instance of `SuppressionRulesRuleTimeslotArrayInput` via:
//
//	SuppressionRulesRuleTimeslotArray{ SuppressionRulesRuleTimeslotArgs{...} }
type SuppressionRulesRuleTimeslotArrayInput interface {
	pulumi.Input

	ToSuppressionRulesRuleTimeslotArrayOutput() SuppressionRulesRuleTimeslotArrayOutput
	ToSuppressionRulesRuleTimeslotArrayOutputWithContext(context.Context) SuppressionRulesRuleTimeslotArrayOutput
}

type SuppressionRulesRuleTimeslotArray []SuppressionRulesRuleTimeslotInput

func (SuppressionRulesRuleTimeslotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuppressionRulesRuleTimeslot)(nil)).Elem()
}

func (i SuppressionRulesRuleTimeslotArray) ToSuppressionRulesRuleTimeslotArrayOutput() SuppressionRulesRuleTimeslotArrayOutput {
	return i.ToSuppressionRulesRuleTimeslotArrayOutputWithContext(context.Background())
}

func (i SuppressionRulesRuleTimeslotArray) ToSuppressionRulesRuleTimeslotArrayOutputWithContext(ctx context.Context) SuppressionRulesRuleTimeslotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionRulesRuleTimeslotArrayOutput)
}

type SuppressionRulesRuleTimeslotOutput struct{ *pulumi.OutputState }

func (SuppressionRulesRuleTimeslotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionRulesRuleTimeslot)(nil)).Elem()
}

func (o SuppressionRulesRuleTimeslotOutput) ToSuppressionRulesRuleTimeslotOutput() SuppressionRulesRuleTimeslotOutput {
	return o
}

func (o SuppressionRulesRuleTimeslotOutput) ToSuppressionRulesRuleTimeslotOutputWithContext(ctx context.Context) SuppressionRulesRuleTimeslotOutput {
	return o
}

func (o SuppressionRulesRuleTimeslotOutput) Customs() SuppressionRulesRuleTimeslotCustomArrayOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslot) []SuppressionRulesRuleTimeslotCustom { return v.Customs }).(SuppressionRulesRuleTimeslotCustomArrayOutput)
}

func (o SuppressionRulesRuleTimeslotOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslot) string { return v.EndTime }).(pulumi.StringOutput)
}

func (o SuppressionRulesRuleTimeslotOutput) EndsNever() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslot) *bool { return v.EndsNever }).(pulumi.BoolPtrOutput)
}

func (o SuppressionRulesRuleTimeslotOutput) EndsOn() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslot) string { return v.EndsOn }).(pulumi.StringOutput)
}

func (o SuppressionRulesRuleTimeslotOutput) IsAllday() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslot) *bool { return v.IsAllday }).(pulumi.BoolPtrOutput)
}

func (o SuppressionRulesRuleTimeslotOutput) IsCustom() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslot) *bool { return v.IsCustom }).(pulumi.BoolPtrOutput)
}

func (o SuppressionRulesRuleTimeslotOutput) Repetition() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslot) string { return v.Repetition }).(pulumi.StringOutput)
}

func (o SuppressionRulesRuleTimeslotOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslot) string { return v.StartTime }).(pulumi.StringOutput)
}

func (o SuppressionRulesRuleTimeslotOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslot) string { return v.TimeZone }).(pulumi.StringOutput)
}

type SuppressionRulesRuleTimeslotArrayOutput struct{ *pulumi.OutputState }

func (SuppressionRulesRuleTimeslotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuppressionRulesRuleTimeslot)(nil)).Elem()
}

func (o SuppressionRulesRuleTimeslotArrayOutput) ToSuppressionRulesRuleTimeslotArrayOutput() SuppressionRulesRuleTimeslotArrayOutput {
	return o
}

func (o SuppressionRulesRuleTimeslotArrayOutput) ToSuppressionRulesRuleTimeslotArrayOutputWithContext(ctx context.Context) SuppressionRulesRuleTimeslotArrayOutput {
	return o
}

func (o SuppressionRulesRuleTimeslotArrayOutput) Index(i pulumi.IntInput) SuppressionRulesRuleTimeslotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SuppressionRulesRuleTimeslot {
		return vs[0].([]SuppressionRulesRuleTimeslot)[vs[1].(int)]
	}).(SuppressionRulesRuleTimeslotOutput)
}

type SuppressionRulesRuleTimeslotCustom struct {
	Repeats           string  `pulumi:"repeats"`
	RepeatsCount      *int    `pulumi:"repeatsCount"`
	RepeatsOnMonth    *string `pulumi:"repeatsOnMonth"`
	RepeatsOnWeekdays []int   `pulumi:"repeatsOnWeekdays"`
}

// SuppressionRulesRuleTimeslotCustomInput is an input type that accepts SuppressionRulesRuleTimeslotCustomArgs and SuppressionRulesRuleTimeslotCustomOutput values.
// You can construct a concrete instance of `SuppressionRulesRuleTimeslotCustomInput` via:
//
//	SuppressionRulesRuleTimeslotCustomArgs{...}
type SuppressionRulesRuleTimeslotCustomInput interface {
	pulumi.Input

	ToSuppressionRulesRuleTimeslotCustomOutput() SuppressionRulesRuleTimeslotCustomOutput
	ToSuppressionRulesRuleTimeslotCustomOutputWithContext(context.Context) SuppressionRulesRuleTimeslotCustomOutput
}

type SuppressionRulesRuleTimeslotCustomArgs struct {
	Repeats           pulumi.StringInput    `pulumi:"repeats"`
	RepeatsCount      pulumi.IntPtrInput    `pulumi:"repeatsCount"`
	RepeatsOnMonth    pulumi.StringPtrInput `pulumi:"repeatsOnMonth"`
	RepeatsOnWeekdays pulumi.IntArrayInput  `pulumi:"repeatsOnWeekdays"`
}

func (SuppressionRulesRuleTimeslotCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionRulesRuleTimeslotCustom)(nil)).Elem()
}

func (i SuppressionRulesRuleTimeslotCustomArgs) ToSuppressionRulesRuleTimeslotCustomOutput() SuppressionRulesRuleTimeslotCustomOutput {
	return i.ToSuppressionRulesRuleTimeslotCustomOutputWithContext(context.Background())
}

func (i SuppressionRulesRuleTimeslotCustomArgs) ToSuppressionRulesRuleTimeslotCustomOutputWithContext(ctx context.Context) SuppressionRulesRuleTimeslotCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionRulesRuleTimeslotCustomOutput)
}

// SuppressionRulesRuleTimeslotCustomArrayInput is an input type that accepts SuppressionRulesRuleTimeslotCustomArray and SuppressionRulesRuleTimeslotCustomArrayOutput values.
// You can construct a concrete instance of `SuppressionRulesRuleTimeslotCustomArrayInput` via:
//
//	SuppressionRulesRuleTimeslotCustomArray{ SuppressionRulesRuleTimeslotCustomArgs{...} }
type SuppressionRulesRuleTimeslotCustomArrayInput interface {
	pulumi.Input

	ToSuppressionRulesRuleTimeslotCustomArrayOutput() SuppressionRulesRuleTimeslotCustomArrayOutput
	ToSuppressionRulesRuleTimeslotCustomArrayOutputWithContext(context.Context) SuppressionRulesRuleTimeslotCustomArrayOutput
}

type SuppressionRulesRuleTimeslotCustomArray []SuppressionRulesRuleTimeslotCustomInput

func (SuppressionRulesRuleTimeslotCustomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuppressionRulesRuleTimeslotCustom)(nil)).Elem()
}

func (i SuppressionRulesRuleTimeslotCustomArray) ToSuppressionRulesRuleTimeslotCustomArrayOutput() SuppressionRulesRuleTimeslotCustomArrayOutput {
	return i.ToSuppressionRulesRuleTimeslotCustomArrayOutputWithContext(context.Background())
}

func (i SuppressionRulesRuleTimeslotCustomArray) ToSuppressionRulesRuleTimeslotCustomArrayOutputWithContext(ctx context.Context) SuppressionRulesRuleTimeslotCustomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionRulesRuleTimeslotCustomArrayOutput)
}

type SuppressionRulesRuleTimeslotCustomOutput struct{ *pulumi.OutputState }

func (SuppressionRulesRuleTimeslotCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionRulesRuleTimeslotCustom)(nil)).Elem()
}

func (o SuppressionRulesRuleTimeslotCustomOutput) ToSuppressionRulesRuleTimeslotCustomOutput() SuppressionRulesRuleTimeslotCustomOutput {
	return o
}

func (o SuppressionRulesRuleTimeslotCustomOutput) ToSuppressionRulesRuleTimeslotCustomOutputWithContext(ctx context.Context) SuppressionRulesRuleTimeslotCustomOutput {
	return o
}

func (o SuppressionRulesRuleTimeslotCustomOutput) Repeats() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslotCustom) string { return v.Repeats }).(pulumi.StringOutput)
}

func (o SuppressionRulesRuleTimeslotCustomOutput) RepeatsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslotCustom) *int { return v.RepeatsCount }).(pulumi.IntPtrOutput)
}

func (o SuppressionRulesRuleTimeslotCustomOutput) RepeatsOnMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslotCustom) *string { return v.RepeatsOnMonth }).(pulumi.StringPtrOutput)
}

func (o SuppressionRulesRuleTimeslotCustomOutput) RepeatsOnWeekdays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionRulesRuleTimeslotCustom) []int { return v.RepeatsOnWeekdays }).(pulumi.IntArrayOutput)
}

type SuppressionRulesRuleTimeslotCustomArrayOutput struct{ *pulumi.OutputState }

func (SuppressionRulesRuleTimeslotCustomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuppressionRulesRuleTimeslotCustom)(nil)).Elem()
}

func (o SuppressionRulesRuleTimeslotCustomArrayOutput) ToSuppressionRulesRuleTimeslotCustomArrayOutput() SuppressionRulesRuleTimeslotCustomArrayOutput {
	return o
}

func (o SuppressionRulesRuleTimeslotCustomArrayOutput) ToSuppressionRulesRuleTimeslotCustomArrayOutputWithContext(ctx context.Context) SuppressionRulesRuleTimeslotCustomArrayOutput {
	return o
}

func (o SuppressionRulesRuleTimeslotCustomArrayOutput) Index(i pulumi.IntInput) SuppressionRulesRuleTimeslotCustomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SuppressionRulesRuleTimeslotCustom {
		return vs[0].([]SuppressionRulesRuleTimeslotCustom)[vs[1].(int)]
	}).(SuppressionRulesRuleTimeslotCustomOutput)
}

type TaggingRulesRule struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions []TaggingRulesRuleBasicExpression `pulumi:"basicExpressions"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression *string `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic bool `pulumi:"isBasic"`
	// The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
	Tags []TaggingRulesRuleTag `pulumi:"tags"`
}

// TaggingRulesRuleInput is an input type that accepts TaggingRulesRuleArgs and TaggingRulesRuleOutput values.
// You can construct a concrete instance of `TaggingRulesRuleInput` via:
//
//	TaggingRulesRuleArgs{...}
type TaggingRulesRuleInput interface {
	pulumi.Input

	ToTaggingRulesRuleOutput() TaggingRulesRuleOutput
	ToTaggingRulesRuleOutputWithContext(context.Context) TaggingRulesRuleOutput
}

type TaggingRulesRuleArgs struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions TaggingRulesRuleBasicExpressionArrayInput `pulumi:"basicExpressions"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic pulumi.BoolInput `pulumi:"isBasic"`
	// The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
	Tags TaggingRulesRuleTagArrayInput `pulumi:"tags"`
}

func (TaggingRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaggingRulesRule)(nil)).Elem()
}

func (i TaggingRulesRuleArgs) ToTaggingRulesRuleOutput() TaggingRulesRuleOutput {
	return i.ToTaggingRulesRuleOutputWithContext(context.Background())
}

func (i TaggingRulesRuleArgs) ToTaggingRulesRuleOutputWithContext(ctx context.Context) TaggingRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaggingRulesRuleOutput)
}

// TaggingRulesRuleArrayInput is an input type that accepts TaggingRulesRuleArray and TaggingRulesRuleArrayOutput values.
// You can construct a concrete instance of `TaggingRulesRuleArrayInput` via:
//
//	TaggingRulesRuleArray{ TaggingRulesRuleArgs{...} }
type TaggingRulesRuleArrayInput interface {
	pulumi.Input

	ToTaggingRulesRuleArrayOutput() TaggingRulesRuleArrayOutput
	ToTaggingRulesRuleArrayOutputWithContext(context.Context) TaggingRulesRuleArrayOutput
}

type TaggingRulesRuleArray []TaggingRulesRuleInput

func (TaggingRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaggingRulesRule)(nil)).Elem()
}

func (i TaggingRulesRuleArray) ToTaggingRulesRuleArrayOutput() TaggingRulesRuleArrayOutput {
	return i.ToTaggingRulesRuleArrayOutputWithContext(context.Background())
}

func (i TaggingRulesRuleArray) ToTaggingRulesRuleArrayOutputWithContext(ctx context.Context) TaggingRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaggingRulesRuleArrayOutput)
}

type TaggingRulesRuleOutput struct{ *pulumi.OutputState }

func (TaggingRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaggingRulesRule)(nil)).Elem()
}

func (o TaggingRulesRuleOutput) ToTaggingRulesRuleOutput() TaggingRulesRuleOutput {
	return o
}

func (o TaggingRulesRuleOutput) ToTaggingRulesRuleOutputWithContext(ctx context.Context) TaggingRulesRuleOutput {
	return o
}

// The basic expression which needs to be evaluated to be true for this rule to apply.
func (o TaggingRulesRuleOutput) BasicExpressions() TaggingRulesRuleBasicExpressionArrayOutput {
	return o.ApplyT(func(v TaggingRulesRule) []TaggingRulesRuleBasicExpression { return v.BasicExpressions }).(TaggingRulesRuleBasicExpressionArrayOutput)
}

// The expression which needs to be evaluated to be true for this rule to apply.
func (o TaggingRulesRuleOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaggingRulesRule) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
func (o TaggingRulesRuleOutput) IsBasic() pulumi.BoolOutput {
	return o.ApplyT(func(v TaggingRulesRule) bool { return v.IsBasic }).(pulumi.BoolOutput)
}

// The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
func (o TaggingRulesRuleOutput) Tags() TaggingRulesRuleTagArrayOutput {
	return o.ApplyT(func(v TaggingRulesRule) []TaggingRulesRuleTag { return v.Tags }).(TaggingRulesRuleTagArrayOutput)
}

type TaggingRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (TaggingRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaggingRulesRule)(nil)).Elem()
}

func (o TaggingRulesRuleArrayOutput) ToTaggingRulesRuleArrayOutput() TaggingRulesRuleArrayOutput {
	return o
}

func (o TaggingRulesRuleArrayOutput) ToTaggingRulesRuleArrayOutputWithContext(ctx context.Context) TaggingRulesRuleArrayOutput {
	return o
}

func (o TaggingRulesRuleArrayOutput) Index(i pulumi.IntInput) TaggingRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaggingRulesRule {
		return vs[0].([]TaggingRulesRule)[vs[1].(int)]
	}).(TaggingRulesRuleOutput)
}

type TaggingRulesRuleBasicExpression struct {
	Lhs string `pulumi:"lhs"`
	Op  string `pulumi:"op"`
	Rhs string `pulumi:"rhs"`
}

// TaggingRulesRuleBasicExpressionInput is an input type that accepts TaggingRulesRuleBasicExpressionArgs and TaggingRulesRuleBasicExpressionOutput values.
// You can construct a concrete instance of `TaggingRulesRuleBasicExpressionInput` via:
//
//	TaggingRulesRuleBasicExpressionArgs{...}
type TaggingRulesRuleBasicExpressionInput interface {
	pulumi.Input

	ToTaggingRulesRuleBasicExpressionOutput() TaggingRulesRuleBasicExpressionOutput
	ToTaggingRulesRuleBasicExpressionOutputWithContext(context.Context) TaggingRulesRuleBasicExpressionOutput
}

type TaggingRulesRuleBasicExpressionArgs struct {
	Lhs pulumi.StringInput `pulumi:"lhs"`
	Op  pulumi.StringInput `pulumi:"op"`
	Rhs pulumi.StringInput `pulumi:"rhs"`
}

func (TaggingRulesRuleBasicExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaggingRulesRuleBasicExpression)(nil)).Elem()
}

func (i TaggingRulesRuleBasicExpressionArgs) ToTaggingRulesRuleBasicExpressionOutput() TaggingRulesRuleBasicExpressionOutput {
	return i.ToTaggingRulesRuleBasicExpressionOutputWithContext(context.Background())
}

func (i TaggingRulesRuleBasicExpressionArgs) ToTaggingRulesRuleBasicExpressionOutputWithContext(ctx context.Context) TaggingRulesRuleBasicExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaggingRulesRuleBasicExpressionOutput)
}

// TaggingRulesRuleBasicExpressionArrayInput is an input type that accepts TaggingRulesRuleBasicExpressionArray and TaggingRulesRuleBasicExpressionArrayOutput values.
// You can construct a concrete instance of `TaggingRulesRuleBasicExpressionArrayInput` via:
//
//	TaggingRulesRuleBasicExpressionArray{ TaggingRulesRuleBasicExpressionArgs{...} }
type TaggingRulesRuleBasicExpressionArrayInput interface {
	pulumi.Input

	ToTaggingRulesRuleBasicExpressionArrayOutput() TaggingRulesRuleBasicExpressionArrayOutput
	ToTaggingRulesRuleBasicExpressionArrayOutputWithContext(context.Context) TaggingRulesRuleBasicExpressionArrayOutput
}

type TaggingRulesRuleBasicExpressionArray []TaggingRulesRuleBasicExpressionInput

func (TaggingRulesRuleBasicExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaggingRulesRuleBasicExpression)(nil)).Elem()
}

func (i TaggingRulesRuleBasicExpressionArray) ToTaggingRulesRuleBasicExpressionArrayOutput() TaggingRulesRuleBasicExpressionArrayOutput {
	return i.ToTaggingRulesRuleBasicExpressionArrayOutputWithContext(context.Background())
}

func (i TaggingRulesRuleBasicExpressionArray) ToTaggingRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) TaggingRulesRuleBasicExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaggingRulesRuleBasicExpressionArrayOutput)
}

type TaggingRulesRuleBasicExpressionOutput struct{ *pulumi.OutputState }

func (TaggingRulesRuleBasicExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaggingRulesRuleBasicExpression)(nil)).Elem()
}

func (o TaggingRulesRuleBasicExpressionOutput) ToTaggingRulesRuleBasicExpressionOutput() TaggingRulesRuleBasicExpressionOutput {
	return o
}

func (o TaggingRulesRuleBasicExpressionOutput) ToTaggingRulesRuleBasicExpressionOutputWithContext(ctx context.Context) TaggingRulesRuleBasicExpressionOutput {
	return o
}

func (o TaggingRulesRuleBasicExpressionOutput) Lhs() pulumi.StringOutput {
	return o.ApplyT(func(v TaggingRulesRuleBasicExpression) string { return v.Lhs }).(pulumi.StringOutput)
}

func (o TaggingRulesRuleBasicExpressionOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v TaggingRulesRuleBasicExpression) string { return v.Op }).(pulumi.StringOutput)
}

func (o TaggingRulesRuleBasicExpressionOutput) Rhs() pulumi.StringOutput {
	return o.ApplyT(func(v TaggingRulesRuleBasicExpression) string { return v.Rhs }).(pulumi.StringOutput)
}

type TaggingRulesRuleBasicExpressionArrayOutput struct{ *pulumi.OutputState }

func (TaggingRulesRuleBasicExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaggingRulesRuleBasicExpression)(nil)).Elem()
}

func (o TaggingRulesRuleBasicExpressionArrayOutput) ToTaggingRulesRuleBasicExpressionArrayOutput() TaggingRulesRuleBasicExpressionArrayOutput {
	return o
}

func (o TaggingRulesRuleBasicExpressionArrayOutput) ToTaggingRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) TaggingRulesRuleBasicExpressionArrayOutput {
	return o
}

func (o TaggingRulesRuleBasicExpressionArrayOutput) Index(i pulumi.IntInput) TaggingRulesRuleBasicExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaggingRulesRuleBasicExpression {
		return vs[0].([]TaggingRulesRuleBasicExpression)[vs[1].(int)]
	}).(TaggingRulesRuleBasicExpressionOutput)
}

type TaggingRulesRuleTag struct {
	Color string `pulumi:"color"`
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// TaggingRulesRuleTagInput is an input type that accepts TaggingRulesRuleTagArgs and TaggingRulesRuleTagOutput values.
// You can construct a concrete instance of `TaggingRulesRuleTagInput` via:
//
//	TaggingRulesRuleTagArgs{...}
type TaggingRulesRuleTagInput interface {
	pulumi.Input

	ToTaggingRulesRuleTagOutput() TaggingRulesRuleTagOutput
	ToTaggingRulesRuleTagOutputWithContext(context.Context) TaggingRulesRuleTagOutput
}

type TaggingRulesRuleTagArgs struct {
	Color pulumi.StringInput `pulumi:"color"`
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (TaggingRulesRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaggingRulesRuleTag)(nil)).Elem()
}

func (i TaggingRulesRuleTagArgs) ToTaggingRulesRuleTagOutput() TaggingRulesRuleTagOutput {
	return i.ToTaggingRulesRuleTagOutputWithContext(context.Background())
}

func (i TaggingRulesRuleTagArgs) ToTaggingRulesRuleTagOutputWithContext(ctx context.Context) TaggingRulesRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaggingRulesRuleTagOutput)
}

// TaggingRulesRuleTagArrayInput is an input type that accepts TaggingRulesRuleTagArray and TaggingRulesRuleTagArrayOutput values.
// You can construct a concrete instance of `TaggingRulesRuleTagArrayInput` via:
//
//	TaggingRulesRuleTagArray{ TaggingRulesRuleTagArgs{...} }
type TaggingRulesRuleTagArrayInput interface {
	pulumi.Input

	ToTaggingRulesRuleTagArrayOutput() TaggingRulesRuleTagArrayOutput
	ToTaggingRulesRuleTagArrayOutputWithContext(context.Context) TaggingRulesRuleTagArrayOutput
}

type TaggingRulesRuleTagArray []TaggingRulesRuleTagInput

func (TaggingRulesRuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaggingRulesRuleTag)(nil)).Elem()
}

func (i TaggingRulesRuleTagArray) ToTaggingRulesRuleTagArrayOutput() TaggingRulesRuleTagArrayOutput {
	return i.ToTaggingRulesRuleTagArrayOutputWithContext(context.Background())
}

func (i TaggingRulesRuleTagArray) ToTaggingRulesRuleTagArrayOutputWithContext(ctx context.Context) TaggingRulesRuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaggingRulesRuleTagArrayOutput)
}

type TaggingRulesRuleTagOutput struct{ *pulumi.OutputState }

func (TaggingRulesRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaggingRulesRuleTag)(nil)).Elem()
}

func (o TaggingRulesRuleTagOutput) ToTaggingRulesRuleTagOutput() TaggingRulesRuleTagOutput {
	return o
}

func (o TaggingRulesRuleTagOutput) ToTaggingRulesRuleTagOutputWithContext(ctx context.Context) TaggingRulesRuleTagOutput {
	return o
}

func (o TaggingRulesRuleTagOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v TaggingRulesRuleTag) string { return v.Color }).(pulumi.StringOutput)
}

func (o TaggingRulesRuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TaggingRulesRuleTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o TaggingRulesRuleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TaggingRulesRuleTag) string { return v.Value }).(pulumi.StringOutput)
}

type TaggingRulesRuleTagArrayOutput struct{ *pulumi.OutputState }

func (TaggingRulesRuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaggingRulesRuleTag)(nil)).Elem()
}

func (o TaggingRulesRuleTagArrayOutput) ToTaggingRulesRuleTagArrayOutput() TaggingRulesRuleTagArrayOutput {
	return o
}

func (o TaggingRulesRuleTagArrayOutput) ToTaggingRulesRuleTagArrayOutputWithContext(ctx context.Context) TaggingRulesRuleTagArrayOutput {
	return o
}

func (o TaggingRulesRuleTagArrayOutput) Index(i pulumi.IntInput) TaggingRulesRuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaggingRulesRuleTag {
		return vs[0].([]TaggingRulesRuleTag)[vs[1].(int)]
	}).(TaggingRulesRuleTagOutput)
}

type GetEscalationPolicyEntityOwner struct {
	// Escalation policy owner id.
	Id string `pulumi:"id"`
	// Escalation policy owner type. (user or squad or team)
	Type string `pulumi:"type"`
}

// GetEscalationPolicyEntityOwnerInput is an input type that accepts GetEscalationPolicyEntityOwnerArgs and GetEscalationPolicyEntityOwnerOutput values.
// You can construct a concrete instance of `GetEscalationPolicyEntityOwnerInput` via:
//
//	GetEscalationPolicyEntityOwnerArgs{...}
type GetEscalationPolicyEntityOwnerInput interface {
	pulumi.Input

	ToGetEscalationPolicyEntityOwnerOutput() GetEscalationPolicyEntityOwnerOutput
	ToGetEscalationPolicyEntityOwnerOutputWithContext(context.Context) GetEscalationPolicyEntityOwnerOutput
}

type GetEscalationPolicyEntityOwnerArgs struct {
	// Escalation policy owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Escalation policy owner type. (user or squad or team)
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetEscalationPolicyEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyEntityOwner)(nil)).Elem()
}

func (i GetEscalationPolicyEntityOwnerArgs) ToGetEscalationPolicyEntityOwnerOutput() GetEscalationPolicyEntityOwnerOutput {
	return i.ToGetEscalationPolicyEntityOwnerOutputWithContext(context.Background())
}

func (i GetEscalationPolicyEntityOwnerArgs) ToGetEscalationPolicyEntityOwnerOutputWithContext(ctx context.Context) GetEscalationPolicyEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyEntityOwnerOutput)
}

// GetEscalationPolicyEntityOwnerArrayInput is an input type that accepts GetEscalationPolicyEntityOwnerArray and GetEscalationPolicyEntityOwnerArrayOutput values.
// You can construct a concrete instance of `GetEscalationPolicyEntityOwnerArrayInput` via:
//
//	GetEscalationPolicyEntityOwnerArray{ GetEscalationPolicyEntityOwnerArgs{...} }
type GetEscalationPolicyEntityOwnerArrayInput interface {
	pulumi.Input

	ToGetEscalationPolicyEntityOwnerArrayOutput() GetEscalationPolicyEntityOwnerArrayOutput
	ToGetEscalationPolicyEntityOwnerArrayOutputWithContext(context.Context) GetEscalationPolicyEntityOwnerArrayOutput
}

type GetEscalationPolicyEntityOwnerArray []GetEscalationPolicyEntityOwnerInput

func (GetEscalationPolicyEntityOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyEntityOwner)(nil)).Elem()
}

func (i GetEscalationPolicyEntityOwnerArray) ToGetEscalationPolicyEntityOwnerArrayOutput() GetEscalationPolicyEntityOwnerArrayOutput {
	return i.ToGetEscalationPolicyEntityOwnerArrayOutputWithContext(context.Background())
}

func (i GetEscalationPolicyEntityOwnerArray) ToGetEscalationPolicyEntityOwnerArrayOutputWithContext(ctx context.Context) GetEscalationPolicyEntityOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyEntityOwnerArrayOutput)
}

type GetEscalationPolicyEntityOwnerOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyEntityOwner)(nil)).Elem()
}

func (o GetEscalationPolicyEntityOwnerOutput) ToGetEscalationPolicyEntityOwnerOutput() GetEscalationPolicyEntityOwnerOutput {
	return o
}

func (o GetEscalationPolicyEntityOwnerOutput) ToGetEscalationPolicyEntityOwnerOutputWithContext(ctx context.Context) GetEscalationPolicyEntityOwnerOutput {
	return o
}

// Escalation policy owner id.
func (o GetEscalationPolicyEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEscalationPolicyEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Escalation policy owner type. (user or squad or team)
func (o GetEscalationPolicyEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEscalationPolicyEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type GetEscalationPolicyEntityOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyEntityOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyEntityOwner)(nil)).Elem()
}

func (o GetEscalationPolicyEntityOwnerArrayOutput) ToGetEscalationPolicyEntityOwnerArrayOutput() GetEscalationPolicyEntityOwnerArrayOutput {
	return o
}

func (o GetEscalationPolicyEntityOwnerArrayOutput) ToGetEscalationPolicyEntityOwnerArrayOutputWithContext(ctx context.Context) GetEscalationPolicyEntityOwnerArrayOutput {
	return o
}

func (o GetEscalationPolicyEntityOwnerArrayOutput) Index(i pulumi.IntInput) GetEscalationPolicyEntityOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationPolicyEntityOwner {
		return vs[0].([]GetEscalationPolicyEntityOwner)[vs[1].(int)]
	}).(GetEscalationPolicyEntityOwnerOutput)
}

type GetEscalationPolicyRepeat struct {
	DelayMinutes int `pulumi:"delayMinutes"`
	Times        int `pulumi:"times"`
}

// GetEscalationPolicyRepeatInput is an input type that accepts GetEscalationPolicyRepeatArgs and GetEscalationPolicyRepeatOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRepeatInput` via:
//
//	GetEscalationPolicyRepeatArgs{...}
type GetEscalationPolicyRepeatInput interface {
	pulumi.Input

	ToGetEscalationPolicyRepeatOutput() GetEscalationPolicyRepeatOutput
	ToGetEscalationPolicyRepeatOutputWithContext(context.Context) GetEscalationPolicyRepeatOutput
}

type GetEscalationPolicyRepeatArgs struct {
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	Times        pulumi.IntInput `pulumi:"times"`
}

func (GetEscalationPolicyRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRepeat)(nil)).Elem()
}

func (i GetEscalationPolicyRepeatArgs) ToGetEscalationPolicyRepeatOutput() GetEscalationPolicyRepeatOutput {
	return i.ToGetEscalationPolicyRepeatOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRepeatArgs) ToGetEscalationPolicyRepeatOutputWithContext(ctx context.Context) GetEscalationPolicyRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRepeatOutput)
}

// GetEscalationPolicyRepeatArrayInput is an input type that accepts GetEscalationPolicyRepeatArray and GetEscalationPolicyRepeatArrayOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRepeatArrayInput` via:
//
//	GetEscalationPolicyRepeatArray{ GetEscalationPolicyRepeatArgs{...} }
type GetEscalationPolicyRepeatArrayInput interface {
	pulumi.Input

	ToGetEscalationPolicyRepeatArrayOutput() GetEscalationPolicyRepeatArrayOutput
	ToGetEscalationPolicyRepeatArrayOutputWithContext(context.Context) GetEscalationPolicyRepeatArrayOutput
}

type GetEscalationPolicyRepeatArray []GetEscalationPolicyRepeatInput

func (GetEscalationPolicyRepeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRepeat)(nil)).Elem()
}

func (i GetEscalationPolicyRepeatArray) ToGetEscalationPolicyRepeatArrayOutput() GetEscalationPolicyRepeatArrayOutput {
	return i.ToGetEscalationPolicyRepeatArrayOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRepeatArray) ToGetEscalationPolicyRepeatArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRepeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRepeatArrayOutput)
}

type GetEscalationPolicyRepeatOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRepeat)(nil)).Elem()
}

func (o GetEscalationPolicyRepeatOutput) ToGetEscalationPolicyRepeatOutput() GetEscalationPolicyRepeatOutput {
	return o
}

func (o GetEscalationPolicyRepeatOutput) ToGetEscalationPolicyRepeatOutputWithContext(ctx context.Context) GetEscalationPolicyRepeatOutput {
	return o
}

func (o GetEscalationPolicyRepeatOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetEscalationPolicyRepeat) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

func (o GetEscalationPolicyRepeatOutput) Times() pulumi.IntOutput {
	return o.ApplyT(func(v GetEscalationPolicyRepeat) int { return v.Times }).(pulumi.IntOutput)
}

type GetEscalationPolicyRepeatArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRepeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRepeat)(nil)).Elem()
}

func (o GetEscalationPolicyRepeatArrayOutput) ToGetEscalationPolicyRepeatArrayOutput() GetEscalationPolicyRepeatArrayOutput {
	return o
}

func (o GetEscalationPolicyRepeatArrayOutput) ToGetEscalationPolicyRepeatArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRepeatArrayOutput {
	return o
}

func (o GetEscalationPolicyRepeatArrayOutput) Index(i pulumi.IntInput) GetEscalationPolicyRepeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationPolicyRepeat {
		return vs[0].([]GetEscalationPolicyRepeat)[vs[1].(int)]
	}).(GetEscalationPolicyRepeatOutput)
}

type GetEscalationPolicyRule struct {
	DelayMinutes         int      `pulumi:"delayMinutes"`
	NotificationChannels []string `pulumi:"notificationChannels"`
	// You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
	Repeats     []GetEscalationPolicyRuleRepeat     `pulumi:"repeats"`
	RoundRobins []GetEscalationPolicyRuleRoundRobin `pulumi:"roundRobins"`
	Targets     []GetEscalationPolicyRuleTarget     `pulumi:"targets"`
}

// GetEscalationPolicyRuleInput is an input type that accepts GetEscalationPolicyRuleArgs and GetEscalationPolicyRuleOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleInput` via:
//
//	GetEscalationPolicyRuleArgs{...}
type GetEscalationPolicyRuleInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleOutput() GetEscalationPolicyRuleOutput
	ToGetEscalationPolicyRuleOutputWithContext(context.Context) GetEscalationPolicyRuleOutput
}

type GetEscalationPolicyRuleArgs struct {
	DelayMinutes         pulumi.IntInput         `pulumi:"delayMinutes"`
	NotificationChannels pulumi.StringArrayInput `pulumi:"notificationChannels"`
	// You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
	Repeats     GetEscalationPolicyRuleRepeatArrayInput     `pulumi:"repeats"`
	RoundRobins GetEscalationPolicyRuleRoundRobinArrayInput `pulumi:"roundRobins"`
	Targets     GetEscalationPolicyRuleTargetArrayInput     `pulumi:"targets"`
}

func (GetEscalationPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRule)(nil)).Elem()
}

func (i GetEscalationPolicyRuleArgs) ToGetEscalationPolicyRuleOutput() GetEscalationPolicyRuleOutput {
	return i.ToGetEscalationPolicyRuleOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleArgs) ToGetEscalationPolicyRuleOutputWithContext(ctx context.Context) GetEscalationPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleOutput)
}

// GetEscalationPolicyRuleArrayInput is an input type that accepts GetEscalationPolicyRuleArray and GetEscalationPolicyRuleArrayOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleArrayInput` via:
//
//	GetEscalationPolicyRuleArray{ GetEscalationPolicyRuleArgs{...} }
type GetEscalationPolicyRuleArrayInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleArrayOutput() GetEscalationPolicyRuleArrayOutput
	ToGetEscalationPolicyRuleArrayOutputWithContext(context.Context) GetEscalationPolicyRuleArrayOutput
}

type GetEscalationPolicyRuleArray []GetEscalationPolicyRuleInput

func (GetEscalationPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRule)(nil)).Elem()
}

func (i GetEscalationPolicyRuleArray) ToGetEscalationPolicyRuleArrayOutput() GetEscalationPolicyRuleArrayOutput {
	return i.ToGetEscalationPolicyRuleArrayOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleArray) ToGetEscalationPolicyRuleArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleArrayOutput)
}

type GetEscalationPolicyRuleOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRule)(nil)).Elem()
}

func (o GetEscalationPolicyRuleOutput) ToGetEscalationPolicyRuleOutput() GetEscalationPolicyRuleOutput {
	return o
}

func (o GetEscalationPolicyRuleOutput) ToGetEscalationPolicyRuleOutputWithContext(ctx context.Context) GetEscalationPolicyRuleOutput {
	return o
}

func (o GetEscalationPolicyRuleOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetEscalationPolicyRule) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

func (o GetEscalationPolicyRuleOutput) NotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEscalationPolicyRule) []string { return v.NotificationChannels }).(pulumi.StringArrayOutput)
}

// You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
func (o GetEscalationPolicyRuleOutput) Repeats() GetEscalationPolicyRuleRepeatArrayOutput {
	return o.ApplyT(func(v GetEscalationPolicyRule) []GetEscalationPolicyRuleRepeat { return v.Repeats }).(GetEscalationPolicyRuleRepeatArrayOutput)
}

func (o GetEscalationPolicyRuleOutput) RoundRobins() GetEscalationPolicyRuleRoundRobinArrayOutput {
	return o.ApplyT(func(v GetEscalationPolicyRule) []GetEscalationPolicyRuleRoundRobin { return v.RoundRobins }).(GetEscalationPolicyRuleRoundRobinArrayOutput)
}

func (o GetEscalationPolicyRuleOutput) Targets() GetEscalationPolicyRuleTargetArrayOutput {
	return o.ApplyT(func(v GetEscalationPolicyRule) []GetEscalationPolicyRuleTarget { return v.Targets }).(GetEscalationPolicyRuleTargetArrayOutput)
}

type GetEscalationPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRule)(nil)).Elem()
}

func (o GetEscalationPolicyRuleArrayOutput) ToGetEscalationPolicyRuleArrayOutput() GetEscalationPolicyRuleArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleArrayOutput) ToGetEscalationPolicyRuleArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleArrayOutput) Index(i pulumi.IntInput) GetEscalationPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationPolicyRule {
		return vs[0].([]GetEscalationPolicyRule)[vs[1].(int)]
	}).(GetEscalationPolicyRuleOutput)
}

type GetEscalationPolicyRuleRepeat struct {
	DelayMinutes int `pulumi:"delayMinutes"`
	Times        int `pulumi:"times"`
}

// GetEscalationPolicyRuleRepeatInput is an input type that accepts GetEscalationPolicyRuleRepeatArgs and GetEscalationPolicyRuleRepeatOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleRepeatInput` via:
//
//	GetEscalationPolicyRuleRepeatArgs{...}
type GetEscalationPolicyRuleRepeatInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleRepeatOutput() GetEscalationPolicyRuleRepeatOutput
	ToGetEscalationPolicyRuleRepeatOutputWithContext(context.Context) GetEscalationPolicyRuleRepeatOutput
}

type GetEscalationPolicyRuleRepeatArgs struct {
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	Times        pulumi.IntInput `pulumi:"times"`
}

func (GetEscalationPolicyRuleRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRuleRepeat)(nil)).Elem()
}

func (i GetEscalationPolicyRuleRepeatArgs) ToGetEscalationPolicyRuleRepeatOutput() GetEscalationPolicyRuleRepeatOutput {
	return i.ToGetEscalationPolicyRuleRepeatOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleRepeatArgs) ToGetEscalationPolicyRuleRepeatOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleRepeatOutput)
}

// GetEscalationPolicyRuleRepeatArrayInput is an input type that accepts GetEscalationPolicyRuleRepeatArray and GetEscalationPolicyRuleRepeatArrayOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleRepeatArrayInput` via:
//
//	GetEscalationPolicyRuleRepeatArray{ GetEscalationPolicyRuleRepeatArgs{...} }
type GetEscalationPolicyRuleRepeatArrayInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleRepeatArrayOutput() GetEscalationPolicyRuleRepeatArrayOutput
	ToGetEscalationPolicyRuleRepeatArrayOutputWithContext(context.Context) GetEscalationPolicyRuleRepeatArrayOutput
}

type GetEscalationPolicyRuleRepeatArray []GetEscalationPolicyRuleRepeatInput

func (GetEscalationPolicyRuleRepeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRuleRepeat)(nil)).Elem()
}

func (i GetEscalationPolicyRuleRepeatArray) ToGetEscalationPolicyRuleRepeatArrayOutput() GetEscalationPolicyRuleRepeatArrayOutput {
	return i.ToGetEscalationPolicyRuleRepeatArrayOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleRepeatArray) ToGetEscalationPolicyRuleRepeatArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRepeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleRepeatArrayOutput)
}

type GetEscalationPolicyRuleRepeatOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRuleRepeat)(nil)).Elem()
}

func (o GetEscalationPolicyRuleRepeatOutput) ToGetEscalationPolicyRuleRepeatOutput() GetEscalationPolicyRuleRepeatOutput {
	return o
}

func (o GetEscalationPolicyRuleRepeatOutput) ToGetEscalationPolicyRuleRepeatOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRepeatOutput {
	return o
}

func (o GetEscalationPolicyRuleRepeatOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetEscalationPolicyRuleRepeat) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

func (o GetEscalationPolicyRuleRepeatOutput) Times() pulumi.IntOutput {
	return o.ApplyT(func(v GetEscalationPolicyRuleRepeat) int { return v.Times }).(pulumi.IntOutput)
}

type GetEscalationPolicyRuleRepeatArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleRepeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRuleRepeat)(nil)).Elem()
}

func (o GetEscalationPolicyRuleRepeatArrayOutput) ToGetEscalationPolicyRuleRepeatArrayOutput() GetEscalationPolicyRuleRepeatArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleRepeatArrayOutput) ToGetEscalationPolicyRuleRepeatArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRepeatArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleRepeatArrayOutput) Index(i pulumi.IntInput) GetEscalationPolicyRuleRepeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationPolicyRuleRepeat {
		return vs[0].([]GetEscalationPolicyRuleRepeat)[vs[1].(int)]
	}).(GetEscalationPolicyRuleRepeatOutput)
}

type GetEscalationPolicyRuleRoundRobin struct {
	Enabled   bool                                        `pulumi:"enabled"`
	Rotations []GetEscalationPolicyRuleRoundRobinRotation `pulumi:"rotations"`
}

// GetEscalationPolicyRuleRoundRobinInput is an input type that accepts GetEscalationPolicyRuleRoundRobinArgs and GetEscalationPolicyRuleRoundRobinOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleRoundRobinInput` via:
//
//	GetEscalationPolicyRuleRoundRobinArgs{...}
type GetEscalationPolicyRuleRoundRobinInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleRoundRobinOutput() GetEscalationPolicyRuleRoundRobinOutput
	ToGetEscalationPolicyRuleRoundRobinOutputWithContext(context.Context) GetEscalationPolicyRuleRoundRobinOutput
}

type GetEscalationPolicyRuleRoundRobinArgs struct {
	Enabled   pulumi.BoolInput                                    `pulumi:"enabled"`
	Rotations GetEscalationPolicyRuleRoundRobinRotationArrayInput `pulumi:"rotations"`
}

func (GetEscalationPolicyRuleRoundRobinArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRuleRoundRobin)(nil)).Elem()
}

func (i GetEscalationPolicyRuleRoundRobinArgs) ToGetEscalationPolicyRuleRoundRobinOutput() GetEscalationPolicyRuleRoundRobinOutput {
	return i.ToGetEscalationPolicyRuleRoundRobinOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleRoundRobinArgs) ToGetEscalationPolicyRuleRoundRobinOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRoundRobinOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleRoundRobinOutput)
}

// GetEscalationPolicyRuleRoundRobinArrayInput is an input type that accepts GetEscalationPolicyRuleRoundRobinArray and GetEscalationPolicyRuleRoundRobinArrayOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleRoundRobinArrayInput` via:
//
//	GetEscalationPolicyRuleRoundRobinArray{ GetEscalationPolicyRuleRoundRobinArgs{...} }
type GetEscalationPolicyRuleRoundRobinArrayInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleRoundRobinArrayOutput() GetEscalationPolicyRuleRoundRobinArrayOutput
	ToGetEscalationPolicyRuleRoundRobinArrayOutputWithContext(context.Context) GetEscalationPolicyRuleRoundRobinArrayOutput
}

type GetEscalationPolicyRuleRoundRobinArray []GetEscalationPolicyRuleRoundRobinInput

func (GetEscalationPolicyRuleRoundRobinArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRuleRoundRobin)(nil)).Elem()
}

func (i GetEscalationPolicyRuleRoundRobinArray) ToGetEscalationPolicyRuleRoundRobinArrayOutput() GetEscalationPolicyRuleRoundRobinArrayOutput {
	return i.ToGetEscalationPolicyRuleRoundRobinArrayOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleRoundRobinArray) ToGetEscalationPolicyRuleRoundRobinArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRoundRobinArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleRoundRobinArrayOutput)
}

type GetEscalationPolicyRuleRoundRobinOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleRoundRobinOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRuleRoundRobin)(nil)).Elem()
}

func (o GetEscalationPolicyRuleRoundRobinOutput) ToGetEscalationPolicyRuleRoundRobinOutput() GetEscalationPolicyRuleRoundRobinOutput {
	return o
}

func (o GetEscalationPolicyRuleRoundRobinOutput) ToGetEscalationPolicyRuleRoundRobinOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRoundRobinOutput {
	return o
}

func (o GetEscalationPolicyRuleRoundRobinOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEscalationPolicyRuleRoundRobin) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetEscalationPolicyRuleRoundRobinOutput) Rotations() GetEscalationPolicyRuleRoundRobinRotationArrayOutput {
	return o.ApplyT(func(v GetEscalationPolicyRuleRoundRobin) []GetEscalationPolicyRuleRoundRobinRotation {
		return v.Rotations
	}).(GetEscalationPolicyRuleRoundRobinRotationArrayOutput)
}

type GetEscalationPolicyRuleRoundRobinArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleRoundRobinArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRuleRoundRobin)(nil)).Elem()
}

func (o GetEscalationPolicyRuleRoundRobinArrayOutput) ToGetEscalationPolicyRuleRoundRobinArrayOutput() GetEscalationPolicyRuleRoundRobinArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleRoundRobinArrayOutput) ToGetEscalationPolicyRuleRoundRobinArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRoundRobinArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleRoundRobinArrayOutput) Index(i pulumi.IntInput) GetEscalationPolicyRuleRoundRobinOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationPolicyRuleRoundRobin {
		return vs[0].([]GetEscalationPolicyRuleRoundRobin)[vs[1].(int)]
	}).(GetEscalationPolicyRuleRoundRobinOutput)
}

type GetEscalationPolicyRuleRoundRobinRotation struct {
	DelayMinutes int  `pulumi:"delayMinutes"`
	Enabled      bool `pulumi:"enabled"`
}

// GetEscalationPolicyRuleRoundRobinRotationInput is an input type that accepts GetEscalationPolicyRuleRoundRobinRotationArgs and GetEscalationPolicyRuleRoundRobinRotationOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleRoundRobinRotationInput` via:
//
//	GetEscalationPolicyRuleRoundRobinRotationArgs{...}
type GetEscalationPolicyRuleRoundRobinRotationInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleRoundRobinRotationOutput() GetEscalationPolicyRuleRoundRobinRotationOutput
	ToGetEscalationPolicyRuleRoundRobinRotationOutputWithContext(context.Context) GetEscalationPolicyRuleRoundRobinRotationOutput
}

type GetEscalationPolicyRuleRoundRobinRotationArgs struct {
	DelayMinutes pulumi.IntInput  `pulumi:"delayMinutes"`
	Enabled      pulumi.BoolInput `pulumi:"enabled"`
}

func (GetEscalationPolicyRuleRoundRobinRotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (i GetEscalationPolicyRuleRoundRobinRotationArgs) ToGetEscalationPolicyRuleRoundRobinRotationOutput() GetEscalationPolicyRuleRoundRobinRotationOutput {
	return i.ToGetEscalationPolicyRuleRoundRobinRotationOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleRoundRobinRotationArgs) ToGetEscalationPolicyRuleRoundRobinRotationOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRoundRobinRotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleRoundRobinRotationOutput)
}

// GetEscalationPolicyRuleRoundRobinRotationArrayInput is an input type that accepts GetEscalationPolicyRuleRoundRobinRotationArray and GetEscalationPolicyRuleRoundRobinRotationArrayOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleRoundRobinRotationArrayInput` via:
//
//	GetEscalationPolicyRuleRoundRobinRotationArray{ GetEscalationPolicyRuleRoundRobinRotationArgs{...} }
type GetEscalationPolicyRuleRoundRobinRotationArrayInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleRoundRobinRotationArrayOutput() GetEscalationPolicyRuleRoundRobinRotationArrayOutput
	ToGetEscalationPolicyRuleRoundRobinRotationArrayOutputWithContext(context.Context) GetEscalationPolicyRuleRoundRobinRotationArrayOutput
}

type GetEscalationPolicyRuleRoundRobinRotationArray []GetEscalationPolicyRuleRoundRobinRotationInput

func (GetEscalationPolicyRuleRoundRobinRotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (i GetEscalationPolicyRuleRoundRobinRotationArray) ToGetEscalationPolicyRuleRoundRobinRotationArrayOutput() GetEscalationPolicyRuleRoundRobinRotationArrayOutput {
	return i.ToGetEscalationPolicyRuleRoundRobinRotationArrayOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleRoundRobinRotationArray) ToGetEscalationPolicyRuleRoundRobinRotationArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRoundRobinRotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleRoundRobinRotationArrayOutput)
}

type GetEscalationPolicyRuleRoundRobinRotationOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleRoundRobinRotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (o GetEscalationPolicyRuleRoundRobinRotationOutput) ToGetEscalationPolicyRuleRoundRobinRotationOutput() GetEscalationPolicyRuleRoundRobinRotationOutput {
	return o
}

func (o GetEscalationPolicyRuleRoundRobinRotationOutput) ToGetEscalationPolicyRuleRoundRobinRotationOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRoundRobinRotationOutput {
	return o
}

func (o GetEscalationPolicyRuleRoundRobinRotationOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetEscalationPolicyRuleRoundRobinRotation) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

func (o GetEscalationPolicyRuleRoundRobinRotationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEscalationPolicyRuleRoundRobinRotation) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetEscalationPolicyRuleRoundRobinRotationArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleRoundRobinRotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (o GetEscalationPolicyRuleRoundRobinRotationArrayOutput) ToGetEscalationPolicyRuleRoundRobinRotationArrayOutput() GetEscalationPolicyRuleRoundRobinRotationArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleRoundRobinRotationArrayOutput) ToGetEscalationPolicyRuleRoundRobinRotationArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleRoundRobinRotationArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleRoundRobinRotationArrayOutput) Index(i pulumi.IntInput) GetEscalationPolicyRuleRoundRobinRotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationPolicyRuleRoundRobinRotation {
		return vs[0].([]GetEscalationPolicyRuleRoundRobinRotation)[vs[1].(int)]
	}).(GetEscalationPolicyRuleRoundRobinRotationOutput)
}

type GetEscalationPolicyRuleTarget struct {
	// EscalationPolicy id.
	Id   string `pulumi:"id"`
	Type string `pulumi:"type"`
}

// GetEscalationPolicyRuleTargetInput is an input type that accepts GetEscalationPolicyRuleTargetArgs and GetEscalationPolicyRuleTargetOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleTargetInput` via:
//
//	GetEscalationPolicyRuleTargetArgs{...}
type GetEscalationPolicyRuleTargetInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleTargetOutput() GetEscalationPolicyRuleTargetOutput
	ToGetEscalationPolicyRuleTargetOutputWithContext(context.Context) GetEscalationPolicyRuleTargetOutput
}

type GetEscalationPolicyRuleTargetArgs struct {
	// EscalationPolicy id.
	Id   pulumi.StringInput `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetEscalationPolicyRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRuleTarget)(nil)).Elem()
}

func (i GetEscalationPolicyRuleTargetArgs) ToGetEscalationPolicyRuleTargetOutput() GetEscalationPolicyRuleTargetOutput {
	return i.ToGetEscalationPolicyRuleTargetOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleTargetArgs) ToGetEscalationPolicyRuleTargetOutputWithContext(ctx context.Context) GetEscalationPolicyRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleTargetOutput)
}

// GetEscalationPolicyRuleTargetArrayInput is an input type that accepts GetEscalationPolicyRuleTargetArray and GetEscalationPolicyRuleTargetArrayOutput values.
// You can construct a concrete instance of `GetEscalationPolicyRuleTargetArrayInput` via:
//
//	GetEscalationPolicyRuleTargetArray{ GetEscalationPolicyRuleTargetArgs{...} }
type GetEscalationPolicyRuleTargetArrayInput interface {
	pulumi.Input

	ToGetEscalationPolicyRuleTargetArrayOutput() GetEscalationPolicyRuleTargetArrayOutput
	ToGetEscalationPolicyRuleTargetArrayOutputWithContext(context.Context) GetEscalationPolicyRuleTargetArrayOutput
}

type GetEscalationPolicyRuleTargetArray []GetEscalationPolicyRuleTargetInput

func (GetEscalationPolicyRuleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRuleTarget)(nil)).Elem()
}

func (i GetEscalationPolicyRuleTargetArray) ToGetEscalationPolicyRuleTargetArrayOutput() GetEscalationPolicyRuleTargetArrayOutput {
	return i.ToGetEscalationPolicyRuleTargetArrayOutputWithContext(context.Background())
}

func (i GetEscalationPolicyRuleTargetArray) ToGetEscalationPolicyRuleTargetArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationPolicyRuleTargetArrayOutput)
}

type GetEscalationPolicyRuleTargetOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationPolicyRuleTarget)(nil)).Elem()
}

func (o GetEscalationPolicyRuleTargetOutput) ToGetEscalationPolicyRuleTargetOutput() GetEscalationPolicyRuleTargetOutput {
	return o
}

func (o GetEscalationPolicyRuleTargetOutput) ToGetEscalationPolicyRuleTargetOutputWithContext(ctx context.Context) GetEscalationPolicyRuleTargetOutput {
	return o
}

// EscalationPolicy id.
func (o GetEscalationPolicyRuleTargetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEscalationPolicyRuleTarget) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEscalationPolicyRuleTargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEscalationPolicyRuleTarget) string { return v.Type }).(pulumi.StringOutput)
}

type GetEscalationPolicyRuleTargetArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationPolicyRuleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationPolicyRuleTarget)(nil)).Elem()
}

func (o GetEscalationPolicyRuleTargetArrayOutput) ToGetEscalationPolicyRuleTargetArrayOutput() GetEscalationPolicyRuleTargetArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleTargetArrayOutput) ToGetEscalationPolicyRuleTargetArrayOutputWithContext(ctx context.Context) GetEscalationPolicyRuleTargetArrayOutput {
	return o
}

func (o GetEscalationPolicyRuleTargetArrayOutput) Index(i pulumi.IntInput) GetEscalationPolicyRuleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationPolicyRuleTarget {
		return vs[0].([]GetEscalationPolicyRuleTarget)[vs[1].(int)]
	}).(GetEscalationPolicyRuleTargetOutput)
}

type GetRunbookEntityOwner struct {
	// Runbook owner id.
	Id string `pulumi:"id"`
	// Runbook owner type. (user or squad or team)
	Type string `pulumi:"type"`
}

// GetRunbookEntityOwnerInput is an input type that accepts GetRunbookEntityOwnerArgs and GetRunbookEntityOwnerOutput values.
// You can construct a concrete instance of `GetRunbookEntityOwnerInput` via:
//
//	GetRunbookEntityOwnerArgs{...}
type GetRunbookEntityOwnerInput interface {
	pulumi.Input

	ToGetRunbookEntityOwnerOutput() GetRunbookEntityOwnerOutput
	ToGetRunbookEntityOwnerOutputWithContext(context.Context) GetRunbookEntityOwnerOutput
}

type GetRunbookEntityOwnerArgs struct {
	// Runbook owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Runbook owner type. (user or squad or team)
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRunbookEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunbookEntityOwner)(nil)).Elem()
}

func (i GetRunbookEntityOwnerArgs) ToGetRunbookEntityOwnerOutput() GetRunbookEntityOwnerOutput {
	return i.ToGetRunbookEntityOwnerOutputWithContext(context.Background())
}

func (i GetRunbookEntityOwnerArgs) ToGetRunbookEntityOwnerOutputWithContext(ctx context.Context) GetRunbookEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunbookEntityOwnerOutput)
}

// GetRunbookEntityOwnerArrayInput is an input type that accepts GetRunbookEntityOwnerArray and GetRunbookEntityOwnerArrayOutput values.
// You can construct a concrete instance of `GetRunbookEntityOwnerArrayInput` via:
//
//	GetRunbookEntityOwnerArray{ GetRunbookEntityOwnerArgs{...} }
type GetRunbookEntityOwnerArrayInput interface {
	pulumi.Input

	ToGetRunbookEntityOwnerArrayOutput() GetRunbookEntityOwnerArrayOutput
	ToGetRunbookEntityOwnerArrayOutputWithContext(context.Context) GetRunbookEntityOwnerArrayOutput
}

type GetRunbookEntityOwnerArray []GetRunbookEntityOwnerInput

func (GetRunbookEntityOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunbookEntityOwner)(nil)).Elem()
}

func (i GetRunbookEntityOwnerArray) ToGetRunbookEntityOwnerArrayOutput() GetRunbookEntityOwnerArrayOutput {
	return i.ToGetRunbookEntityOwnerArrayOutputWithContext(context.Background())
}

func (i GetRunbookEntityOwnerArray) ToGetRunbookEntityOwnerArrayOutputWithContext(ctx context.Context) GetRunbookEntityOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunbookEntityOwnerArrayOutput)
}

type GetRunbookEntityOwnerOutput struct{ *pulumi.OutputState }

func (GetRunbookEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunbookEntityOwner)(nil)).Elem()
}

func (o GetRunbookEntityOwnerOutput) ToGetRunbookEntityOwnerOutput() GetRunbookEntityOwnerOutput {
	return o
}

func (o GetRunbookEntityOwnerOutput) ToGetRunbookEntityOwnerOutputWithContext(ctx context.Context) GetRunbookEntityOwnerOutput {
	return o
}

// Runbook owner id.
func (o GetRunbookEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunbookEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Runbook owner type. (user or squad or team)
func (o GetRunbookEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunbookEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type GetRunbookEntityOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetRunbookEntityOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunbookEntityOwner)(nil)).Elem()
}

func (o GetRunbookEntityOwnerArrayOutput) ToGetRunbookEntityOwnerArrayOutput() GetRunbookEntityOwnerArrayOutput {
	return o
}

func (o GetRunbookEntityOwnerArrayOutput) ToGetRunbookEntityOwnerArrayOutputWithContext(ctx context.Context) GetRunbookEntityOwnerArrayOutput {
	return o
}

func (o GetRunbookEntityOwnerArrayOutput) Index(i pulumi.IntInput) GetRunbookEntityOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRunbookEntityOwner {
		return vs[0].([]GetRunbookEntityOwner)[vs[1].(int)]
	}).(GetRunbookEntityOwnerOutput)
}

type GetRunbookStep struct {
	Content string `pulumi:"content"`
}

// GetRunbookStepInput is an input type that accepts GetRunbookStepArgs and GetRunbookStepOutput values.
// You can construct a concrete instance of `GetRunbookStepInput` via:
//
//	GetRunbookStepArgs{...}
type GetRunbookStepInput interface {
	pulumi.Input

	ToGetRunbookStepOutput() GetRunbookStepOutput
	ToGetRunbookStepOutputWithContext(context.Context) GetRunbookStepOutput
}

type GetRunbookStepArgs struct {
	Content pulumi.StringInput `pulumi:"content"`
}

func (GetRunbookStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunbookStep)(nil)).Elem()
}

func (i GetRunbookStepArgs) ToGetRunbookStepOutput() GetRunbookStepOutput {
	return i.ToGetRunbookStepOutputWithContext(context.Background())
}

func (i GetRunbookStepArgs) ToGetRunbookStepOutputWithContext(ctx context.Context) GetRunbookStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunbookStepOutput)
}

// GetRunbookStepArrayInput is an input type that accepts GetRunbookStepArray and GetRunbookStepArrayOutput values.
// You can construct a concrete instance of `GetRunbookStepArrayInput` via:
//
//	GetRunbookStepArray{ GetRunbookStepArgs{...} }
type GetRunbookStepArrayInput interface {
	pulumi.Input

	ToGetRunbookStepArrayOutput() GetRunbookStepArrayOutput
	ToGetRunbookStepArrayOutputWithContext(context.Context) GetRunbookStepArrayOutput
}

type GetRunbookStepArray []GetRunbookStepInput

func (GetRunbookStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunbookStep)(nil)).Elem()
}

func (i GetRunbookStepArray) ToGetRunbookStepArrayOutput() GetRunbookStepArrayOutput {
	return i.ToGetRunbookStepArrayOutputWithContext(context.Background())
}

func (i GetRunbookStepArray) ToGetRunbookStepArrayOutputWithContext(ctx context.Context) GetRunbookStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunbookStepArrayOutput)
}

type GetRunbookStepOutput struct{ *pulumi.OutputState }

func (GetRunbookStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunbookStep)(nil)).Elem()
}

func (o GetRunbookStepOutput) ToGetRunbookStepOutput() GetRunbookStepOutput {
	return o
}

func (o GetRunbookStepOutput) ToGetRunbookStepOutputWithContext(ctx context.Context) GetRunbookStepOutput {
	return o
}

func (o GetRunbookStepOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunbookStep) string { return v.Content }).(pulumi.StringOutput)
}

type GetRunbookStepArrayOutput struct{ *pulumi.OutputState }

func (GetRunbookStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunbookStep)(nil)).Elem()
}

func (o GetRunbookStepArrayOutput) ToGetRunbookStepArrayOutput() GetRunbookStepArrayOutput {
	return o
}

func (o GetRunbookStepArrayOutput) ToGetRunbookStepArrayOutputWithContext(ctx context.Context) GetRunbookStepArrayOutput {
	return o
}

func (o GetRunbookStepArrayOutput) Index(i pulumi.IntInput) GetRunbookStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRunbookStep {
		return vs[0].([]GetRunbookStep)[vs[1].(int)]
	}).(GetRunbookStepOutput)
}

type GetScheduleV2EntityOwner struct {
	// Schedule id.
	Id   string `pulumi:"id"`
	Type string `pulumi:"type"`
}

// GetScheduleV2EntityOwnerInput is an input type that accepts GetScheduleV2EntityOwnerArgs and GetScheduleV2EntityOwnerOutput values.
// You can construct a concrete instance of `GetScheduleV2EntityOwnerInput` via:
//
//	GetScheduleV2EntityOwnerArgs{...}
type GetScheduleV2EntityOwnerInput interface {
	pulumi.Input

	ToGetScheduleV2EntityOwnerOutput() GetScheduleV2EntityOwnerOutput
	ToGetScheduleV2EntityOwnerOutputWithContext(context.Context) GetScheduleV2EntityOwnerOutput
}

type GetScheduleV2EntityOwnerArgs struct {
	// Schedule id.
	Id   pulumi.StringInput `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetScheduleV2EntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduleV2EntityOwner)(nil)).Elem()
}

func (i GetScheduleV2EntityOwnerArgs) ToGetScheduleV2EntityOwnerOutput() GetScheduleV2EntityOwnerOutput {
	return i.ToGetScheduleV2EntityOwnerOutputWithContext(context.Background())
}

func (i GetScheduleV2EntityOwnerArgs) ToGetScheduleV2EntityOwnerOutputWithContext(ctx context.Context) GetScheduleV2EntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduleV2EntityOwnerOutput)
}

// GetScheduleV2EntityOwnerArrayInput is an input type that accepts GetScheduleV2EntityOwnerArray and GetScheduleV2EntityOwnerArrayOutput values.
// You can construct a concrete instance of `GetScheduleV2EntityOwnerArrayInput` via:
//
//	GetScheduleV2EntityOwnerArray{ GetScheduleV2EntityOwnerArgs{...} }
type GetScheduleV2EntityOwnerArrayInput interface {
	pulumi.Input

	ToGetScheduleV2EntityOwnerArrayOutput() GetScheduleV2EntityOwnerArrayOutput
	ToGetScheduleV2EntityOwnerArrayOutputWithContext(context.Context) GetScheduleV2EntityOwnerArrayOutput
}

type GetScheduleV2EntityOwnerArray []GetScheduleV2EntityOwnerInput

func (GetScheduleV2EntityOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduleV2EntityOwner)(nil)).Elem()
}

func (i GetScheduleV2EntityOwnerArray) ToGetScheduleV2EntityOwnerArrayOutput() GetScheduleV2EntityOwnerArrayOutput {
	return i.ToGetScheduleV2EntityOwnerArrayOutputWithContext(context.Background())
}

func (i GetScheduleV2EntityOwnerArray) ToGetScheduleV2EntityOwnerArrayOutputWithContext(ctx context.Context) GetScheduleV2EntityOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduleV2EntityOwnerArrayOutput)
}

type GetScheduleV2EntityOwnerOutput struct{ *pulumi.OutputState }

func (GetScheduleV2EntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduleV2EntityOwner)(nil)).Elem()
}

func (o GetScheduleV2EntityOwnerOutput) ToGetScheduleV2EntityOwnerOutput() GetScheduleV2EntityOwnerOutput {
	return o
}

func (o GetScheduleV2EntityOwnerOutput) ToGetScheduleV2EntityOwnerOutputWithContext(ctx context.Context) GetScheduleV2EntityOwnerOutput {
	return o
}

// Schedule id.
func (o GetScheduleV2EntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduleV2EntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetScheduleV2EntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduleV2EntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type GetScheduleV2EntityOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetScheduleV2EntityOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduleV2EntityOwner)(nil)).Elem()
}

func (o GetScheduleV2EntityOwnerArrayOutput) ToGetScheduleV2EntityOwnerArrayOutput() GetScheduleV2EntityOwnerArrayOutput {
	return o
}

func (o GetScheduleV2EntityOwnerArrayOutput) ToGetScheduleV2EntityOwnerArrayOutputWithContext(ctx context.Context) GetScheduleV2EntityOwnerArrayOutput {
	return o
}

func (o GetScheduleV2EntityOwnerArrayOutput) Index(i pulumi.IntInput) GetScheduleV2EntityOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScheduleV2EntityOwner {
		return vs[0].([]GetScheduleV2EntityOwner)[vs[1].(int)]
	}).(GetScheduleV2EntityOwnerOutput)
}

type GetScheduleV2Tag struct {
	Color string `pulumi:"color"`
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetScheduleV2TagInput is an input type that accepts GetScheduleV2TagArgs and GetScheduleV2TagOutput values.
// You can construct a concrete instance of `GetScheduleV2TagInput` via:
//
//	GetScheduleV2TagArgs{...}
type GetScheduleV2TagInput interface {
	pulumi.Input

	ToGetScheduleV2TagOutput() GetScheduleV2TagOutput
	ToGetScheduleV2TagOutputWithContext(context.Context) GetScheduleV2TagOutput
}

type GetScheduleV2TagArgs struct {
	Color pulumi.StringInput `pulumi:"color"`
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetScheduleV2TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduleV2Tag)(nil)).Elem()
}

func (i GetScheduleV2TagArgs) ToGetScheduleV2TagOutput() GetScheduleV2TagOutput {
	return i.ToGetScheduleV2TagOutputWithContext(context.Background())
}

func (i GetScheduleV2TagArgs) ToGetScheduleV2TagOutputWithContext(ctx context.Context) GetScheduleV2TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduleV2TagOutput)
}

// GetScheduleV2TagArrayInput is an input type that accepts GetScheduleV2TagArray and GetScheduleV2TagArrayOutput values.
// You can construct a concrete instance of `GetScheduleV2TagArrayInput` via:
//
//	GetScheduleV2TagArray{ GetScheduleV2TagArgs{...} }
type GetScheduleV2TagArrayInput interface {
	pulumi.Input

	ToGetScheduleV2TagArrayOutput() GetScheduleV2TagArrayOutput
	ToGetScheduleV2TagArrayOutputWithContext(context.Context) GetScheduleV2TagArrayOutput
}

type GetScheduleV2TagArray []GetScheduleV2TagInput

func (GetScheduleV2TagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduleV2Tag)(nil)).Elem()
}

func (i GetScheduleV2TagArray) ToGetScheduleV2TagArrayOutput() GetScheduleV2TagArrayOutput {
	return i.ToGetScheduleV2TagArrayOutputWithContext(context.Background())
}

func (i GetScheduleV2TagArray) ToGetScheduleV2TagArrayOutputWithContext(ctx context.Context) GetScheduleV2TagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduleV2TagArrayOutput)
}

type GetScheduleV2TagOutput struct{ *pulumi.OutputState }

func (GetScheduleV2TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduleV2Tag)(nil)).Elem()
}

func (o GetScheduleV2TagOutput) ToGetScheduleV2TagOutput() GetScheduleV2TagOutput {
	return o
}

func (o GetScheduleV2TagOutput) ToGetScheduleV2TagOutputWithContext(ctx context.Context) GetScheduleV2TagOutput {
	return o
}

func (o GetScheduleV2TagOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduleV2Tag) string { return v.Color }).(pulumi.StringOutput)
}

func (o GetScheduleV2TagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduleV2Tag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetScheduleV2TagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduleV2Tag) string { return v.Value }).(pulumi.StringOutput)
}

type GetScheduleV2TagArrayOutput struct{ *pulumi.OutputState }

func (GetScheduleV2TagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduleV2Tag)(nil)).Elem()
}

func (o GetScheduleV2TagArrayOutput) ToGetScheduleV2TagArrayOutput() GetScheduleV2TagArrayOutput {
	return o
}

func (o GetScheduleV2TagArrayOutput) ToGetScheduleV2TagArrayOutputWithContext(ctx context.Context) GetScheduleV2TagArrayOutput {
	return o
}

func (o GetScheduleV2TagArrayOutput) Index(i pulumi.IntInput) GetScheduleV2TagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScheduleV2Tag {
		return vs[0].([]GetScheduleV2Tag)[vs[1].(int)]
	}).(GetScheduleV2TagOutput)
}

type GetServiceMaintainer struct {
	// The id of the maintainer.
	Id string `pulumi:"id"`
	// The type of the maintainer. (user, team or squad)
	Type string `pulumi:"type"`
}

// GetServiceMaintainerInput is an input type that accepts GetServiceMaintainerArgs and GetServiceMaintainerOutput values.
// You can construct a concrete instance of `GetServiceMaintainerInput` via:
//
//	GetServiceMaintainerArgs{...}
type GetServiceMaintainerInput interface {
	pulumi.Input

	ToGetServiceMaintainerOutput() GetServiceMaintainerOutput
	ToGetServiceMaintainerOutputWithContext(context.Context) GetServiceMaintainerOutput
}

type GetServiceMaintainerArgs struct {
	// The id of the maintainer.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the maintainer. (user, team or squad)
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetServiceMaintainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceMaintainer)(nil)).Elem()
}

func (i GetServiceMaintainerArgs) ToGetServiceMaintainerOutput() GetServiceMaintainerOutput {
	return i.ToGetServiceMaintainerOutputWithContext(context.Background())
}

func (i GetServiceMaintainerArgs) ToGetServiceMaintainerOutputWithContext(ctx context.Context) GetServiceMaintainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceMaintainerOutput)
}

// GetServiceMaintainerArrayInput is an input type that accepts GetServiceMaintainerArray and GetServiceMaintainerArrayOutput values.
// You can construct a concrete instance of `GetServiceMaintainerArrayInput` via:
//
//	GetServiceMaintainerArray{ GetServiceMaintainerArgs{...} }
type GetServiceMaintainerArrayInput interface {
	pulumi.Input

	ToGetServiceMaintainerArrayOutput() GetServiceMaintainerArrayOutput
	ToGetServiceMaintainerArrayOutputWithContext(context.Context) GetServiceMaintainerArrayOutput
}

type GetServiceMaintainerArray []GetServiceMaintainerInput

func (GetServiceMaintainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceMaintainer)(nil)).Elem()
}

func (i GetServiceMaintainerArray) ToGetServiceMaintainerArrayOutput() GetServiceMaintainerArrayOutput {
	return i.ToGetServiceMaintainerArrayOutputWithContext(context.Background())
}

func (i GetServiceMaintainerArray) ToGetServiceMaintainerArrayOutputWithContext(ctx context.Context) GetServiceMaintainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceMaintainerArrayOutput)
}

type GetServiceMaintainerOutput struct{ *pulumi.OutputState }

func (GetServiceMaintainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceMaintainer)(nil)).Elem()
}

func (o GetServiceMaintainerOutput) ToGetServiceMaintainerOutput() GetServiceMaintainerOutput {
	return o
}

func (o GetServiceMaintainerOutput) ToGetServiceMaintainerOutputWithContext(ctx context.Context) GetServiceMaintainerOutput {
	return o
}

// The id of the maintainer.
func (o GetServiceMaintainerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceMaintainer) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the maintainer. (user, team or squad)
func (o GetServiceMaintainerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceMaintainer) string { return v.Type }).(pulumi.StringOutput)
}

type GetServiceMaintainerArrayOutput struct{ *pulumi.OutputState }

func (GetServiceMaintainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceMaintainer)(nil)).Elem()
}

func (o GetServiceMaintainerArrayOutput) ToGetServiceMaintainerArrayOutput() GetServiceMaintainerArrayOutput {
	return o
}

func (o GetServiceMaintainerArrayOutput) ToGetServiceMaintainerArrayOutputWithContext(ctx context.Context) GetServiceMaintainerArrayOutput {
	return o
}

func (o GetServiceMaintainerArrayOutput) Index(i pulumi.IntInput) GetServiceMaintainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceMaintainer {
		return vs[0].([]GetServiceMaintainer)[vs[1].(int)]
	}).(GetServiceMaintainerOutput)
}

type GetServiceTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetServiceTagInput is an input type that accepts GetServiceTagArgs and GetServiceTagOutput values.
// You can construct a concrete instance of `GetServiceTagInput` via:
//
//	GetServiceTagArgs{...}
type GetServiceTagInput interface {
	pulumi.Input

	ToGetServiceTagOutput() GetServiceTagOutput
	ToGetServiceTagOutputWithContext(context.Context) GetServiceTagOutput
}

type GetServiceTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServiceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTag)(nil)).Elem()
}

func (i GetServiceTagArgs) ToGetServiceTagOutput() GetServiceTagOutput {
	return i.ToGetServiceTagOutputWithContext(context.Background())
}

func (i GetServiceTagArgs) ToGetServiceTagOutputWithContext(ctx context.Context) GetServiceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTagOutput)
}

// GetServiceTagArrayInput is an input type that accepts GetServiceTagArray and GetServiceTagArrayOutput values.
// You can construct a concrete instance of `GetServiceTagArrayInput` via:
//
//	GetServiceTagArray{ GetServiceTagArgs{...} }
type GetServiceTagArrayInput interface {
	pulumi.Input

	ToGetServiceTagArrayOutput() GetServiceTagArrayOutput
	ToGetServiceTagArrayOutputWithContext(context.Context) GetServiceTagArrayOutput
}

type GetServiceTagArray []GetServiceTagInput

func (GetServiceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTag)(nil)).Elem()
}

func (i GetServiceTagArray) ToGetServiceTagArrayOutput() GetServiceTagArrayOutput {
	return i.ToGetServiceTagArrayOutputWithContext(context.Background())
}

func (i GetServiceTagArray) ToGetServiceTagArrayOutputWithContext(ctx context.Context) GetServiceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTagArrayOutput)
}

type GetServiceTagOutput struct{ *pulumi.OutputState }

func (GetServiceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTag)(nil)).Elem()
}

func (o GetServiceTagOutput) ToGetServiceTagOutput() GetServiceTagOutput {
	return o
}

func (o GetServiceTagOutput) ToGetServiceTagOutputWithContext(ctx context.Context) GetServiceTagOutput {
	return o
}

func (o GetServiceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetServiceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetServiceTagArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTag)(nil)).Elem()
}

func (o GetServiceTagArrayOutput) ToGetServiceTagArrayOutput() GetServiceTagArrayOutput {
	return o
}

func (o GetServiceTagArrayOutput) ToGetServiceTagArrayOutputWithContext(ctx context.Context) GetServiceTagArrayOutput {
	return o
}

func (o GetServiceTagArrayOutput) Index(i pulumi.IntInput) GetServiceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTag {
		return vs[0].([]GetServiceTag)[vs[1].(int)]
	}).(GetServiceTagOutput)
}

type GetTeamMemberType struct {
	RoleIds []string `pulumi:"roleIds"`
	UserId  string   `pulumi:"userId"`
}

// GetTeamMemberTypeInput is an input type that accepts GetTeamMemberTypeArgs and GetTeamMemberTypeOutput values.
// You can construct a concrete instance of `GetTeamMemberTypeInput` via:
//
//	GetTeamMemberTypeArgs{...}
type GetTeamMemberTypeInput interface {
	pulumi.Input

	ToGetTeamMemberTypeOutput() GetTeamMemberTypeOutput
	ToGetTeamMemberTypeOutputWithContext(context.Context) GetTeamMemberTypeOutput
}

type GetTeamMemberTypeArgs struct {
	RoleIds pulumi.StringArrayInput `pulumi:"roleIds"`
	UserId  pulumi.StringInput      `pulumi:"userId"`
}

func (GetTeamMemberTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMemberType)(nil)).Elem()
}

func (i GetTeamMemberTypeArgs) ToGetTeamMemberTypeOutput() GetTeamMemberTypeOutput {
	return i.ToGetTeamMemberTypeOutputWithContext(context.Background())
}

func (i GetTeamMemberTypeArgs) ToGetTeamMemberTypeOutputWithContext(ctx context.Context) GetTeamMemberTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMemberTypeOutput)
}

// GetTeamMemberTypeArrayInput is an input type that accepts GetTeamMemberTypeArray and GetTeamMemberTypeArrayOutput values.
// You can construct a concrete instance of `GetTeamMemberTypeArrayInput` via:
//
//	GetTeamMemberTypeArray{ GetTeamMemberTypeArgs{...} }
type GetTeamMemberTypeArrayInput interface {
	pulumi.Input

	ToGetTeamMemberTypeArrayOutput() GetTeamMemberTypeArrayOutput
	ToGetTeamMemberTypeArrayOutputWithContext(context.Context) GetTeamMemberTypeArrayOutput
}

type GetTeamMemberTypeArray []GetTeamMemberTypeInput

func (GetTeamMemberTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMemberType)(nil)).Elem()
}

func (i GetTeamMemberTypeArray) ToGetTeamMemberTypeArrayOutput() GetTeamMemberTypeArrayOutput {
	return i.ToGetTeamMemberTypeArrayOutputWithContext(context.Background())
}

func (i GetTeamMemberTypeArray) ToGetTeamMemberTypeArrayOutputWithContext(ctx context.Context) GetTeamMemberTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMemberTypeArrayOutput)
}

type GetTeamMemberTypeOutput struct{ *pulumi.OutputState }

func (GetTeamMemberTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMemberType)(nil)).Elem()
}

func (o GetTeamMemberTypeOutput) ToGetTeamMemberTypeOutput() GetTeamMemberTypeOutput {
	return o
}

func (o GetTeamMemberTypeOutput) ToGetTeamMemberTypeOutputWithContext(ctx context.Context) GetTeamMemberTypeOutput {
	return o
}

func (o GetTeamMemberTypeOutput) RoleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTeamMemberType) []string { return v.RoleIds }).(pulumi.StringArrayOutput)
}

func (o GetTeamMemberTypeOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMemberType) string { return v.UserId }).(pulumi.StringOutput)
}

type GetTeamMemberTypeArrayOutput struct{ *pulumi.OutputState }

func (GetTeamMemberTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMemberType)(nil)).Elem()
}

func (o GetTeamMemberTypeArrayOutput) ToGetTeamMemberTypeArrayOutput() GetTeamMemberTypeArrayOutput {
	return o
}

func (o GetTeamMemberTypeArrayOutput) ToGetTeamMemberTypeArrayOutputWithContext(ctx context.Context) GetTeamMemberTypeArrayOutput {
	return o
}

func (o GetTeamMemberTypeArrayOutput) Index(i pulumi.IntInput) GetTeamMemberTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamMemberType {
		return vs[0].([]GetTeamMemberType)[vs[1].(int)]
	}).(GetTeamMemberTypeOutput)
}

type GetTeamRoleType struct {
	Abilities []string `pulumi:"abilities"`
	// Squadcast has one default team and this field let's us know if this is the default team.
	Default bool `pulumi:"default"`
	// Team id.
	Id string `pulumi:"id"`
	// Name of the Team.
	Name string `pulumi:"name"`
}

// GetTeamRoleTypeInput is an input type that accepts GetTeamRoleTypeArgs and GetTeamRoleTypeOutput values.
// You can construct a concrete instance of `GetTeamRoleTypeInput` via:
//
//	GetTeamRoleTypeArgs{...}
type GetTeamRoleTypeInput interface {
	pulumi.Input

	ToGetTeamRoleTypeOutput() GetTeamRoleTypeOutput
	ToGetTeamRoleTypeOutputWithContext(context.Context) GetTeamRoleTypeOutput
}

type GetTeamRoleTypeArgs struct {
	Abilities pulumi.StringArrayInput `pulumi:"abilities"`
	// Squadcast has one default team and this field let's us know if this is the default team.
	Default pulumi.BoolInput `pulumi:"default"`
	// Team id.
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the Team.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetTeamRoleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamRoleType)(nil)).Elem()
}

func (i GetTeamRoleTypeArgs) ToGetTeamRoleTypeOutput() GetTeamRoleTypeOutput {
	return i.ToGetTeamRoleTypeOutputWithContext(context.Background())
}

func (i GetTeamRoleTypeArgs) ToGetTeamRoleTypeOutputWithContext(ctx context.Context) GetTeamRoleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamRoleTypeOutput)
}

// GetTeamRoleTypeArrayInput is an input type that accepts GetTeamRoleTypeArray and GetTeamRoleTypeArrayOutput values.
// You can construct a concrete instance of `GetTeamRoleTypeArrayInput` via:
//
//	GetTeamRoleTypeArray{ GetTeamRoleTypeArgs{...} }
type GetTeamRoleTypeArrayInput interface {
	pulumi.Input

	ToGetTeamRoleTypeArrayOutput() GetTeamRoleTypeArrayOutput
	ToGetTeamRoleTypeArrayOutputWithContext(context.Context) GetTeamRoleTypeArrayOutput
}

type GetTeamRoleTypeArray []GetTeamRoleTypeInput

func (GetTeamRoleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamRoleType)(nil)).Elem()
}

func (i GetTeamRoleTypeArray) ToGetTeamRoleTypeArrayOutput() GetTeamRoleTypeArrayOutput {
	return i.ToGetTeamRoleTypeArrayOutputWithContext(context.Background())
}

func (i GetTeamRoleTypeArray) ToGetTeamRoleTypeArrayOutputWithContext(ctx context.Context) GetTeamRoleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamRoleTypeArrayOutput)
}

type GetTeamRoleTypeOutput struct{ *pulumi.OutputState }

func (GetTeamRoleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamRoleType)(nil)).Elem()
}

func (o GetTeamRoleTypeOutput) ToGetTeamRoleTypeOutput() GetTeamRoleTypeOutput {
	return o
}

func (o GetTeamRoleTypeOutput) ToGetTeamRoleTypeOutputWithContext(ctx context.Context) GetTeamRoleTypeOutput {
	return o
}

func (o GetTeamRoleTypeOutput) Abilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTeamRoleType) []string { return v.Abilities }).(pulumi.StringArrayOutput)
}

// Squadcast has one default team and this field let's us know if this is the default team.
func (o GetTeamRoleTypeOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTeamRoleType) bool { return v.Default }).(pulumi.BoolOutput)
}

// Team id.
func (o GetTeamRoleTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamRoleType) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the Team.
func (o GetTeamRoleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamRoleType) string { return v.Name }).(pulumi.StringOutput)
}

type GetTeamRoleTypeArrayOutput struct{ *pulumi.OutputState }

func (GetTeamRoleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamRoleType)(nil)).Elem()
}

func (o GetTeamRoleTypeArrayOutput) ToGetTeamRoleTypeArrayOutput() GetTeamRoleTypeArrayOutput {
	return o
}

func (o GetTeamRoleTypeArrayOutput) ToGetTeamRoleTypeArrayOutputWithContext(ctx context.Context) GetTeamRoleTypeArrayOutput {
	return o
}

func (o GetTeamRoleTypeArrayOutput) Index(i pulumi.IntInput) GetTeamRoleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamRoleType {
		return vs[0].([]GetTeamRoleType)[vs[1].(int)]
	}).(GetTeamRoleTypeOutput)
}

type GetUserNotificationRule struct {
	DelayMinutes int    `pulumi:"delayMinutes"`
	Type         string `pulumi:"type"`
}

// GetUserNotificationRuleInput is an input type that accepts GetUserNotificationRuleArgs and GetUserNotificationRuleOutput values.
// You can construct a concrete instance of `GetUserNotificationRuleInput` via:
//
//	GetUserNotificationRuleArgs{...}
type GetUserNotificationRuleInput interface {
	pulumi.Input

	ToGetUserNotificationRuleOutput() GetUserNotificationRuleOutput
	ToGetUserNotificationRuleOutputWithContext(context.Context) GetUserNotificationRuleOutput
}

type GetUserNotificationRuleArgs struct {
	DelayMinutes pulumi.IntInput    `pulumi:"delayMinutes"`
	Type         pulumi.StringInput `pulumi:"type"`
}

func (GetUserNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserNotificationRule)(nil)).Elem()
}

func (i GetUserNotificationRuleArgs) ToGetUserNotificationRuleOutput() GetUserNotificationRuleOutput {
	return i.ToGetUserNotificationRuleOutputWithContext(context.Background())
}

func (i GetUserNotificationRuleArgs) ToGetUserNotificationRuleOutputWithContext(ctx context.Context) GetUserNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserNotificationRuleOutput)
}

// GetUserNotificationRuleArrayInput is an input type that accepts GetUserNotificationRuleArray and GetUserNotificationRuleArrayOutput values.
// You can construct a concrete instance of `GetUserNotificationRuleArrayInput` via:
//
//	GetUserNotificationRuleArray{ GetUserNotificationRuleArgs{...} }
type GetUserNotificationRuleArrayInput interface {
	pulumi.Input

	ToGetUserNotificationRuleArrayOutput() GetUserNotificationRuleArrayOutput
	ToGetUserNotificationRuleArrayOutputWithContext(context.Context) GetUserNotificationRuleArrayOutput
}

type GetUserNotificationRuleArray []GetUserNotificationRuleInput

func (GetUserNotificationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserNotificationRule)(nil)).Elem()
}

func (i GetUserNotificationRuleArray) ToGetUserNotificationRuleArrayOutput() GetUserNotificationRuleArrayOutput {
	return i.ToGetUserNotificationRuleArrayOutputWithContext(context.Background())
}

func (i GetUserNotificationRuleArray) ToGetUserNotificationRuleArrayOutputWithContext(ctx context.Context) GetUserNotificationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserNotificationRuleArrayOutput)
}

type GetUserNotificationRuleOutput struct{ *pulumi.OutputState }

func (GetUserNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserNotificationRule)(nil)).Elem()
}

func (o GetUserNotificationRuleOutput) ToGetUserNotificationRuleOutput() GetUserNotificationRuleOutput {
	return o
}

func (o GetUserNotificationRuleOutput) ToGetUserNotificationRuleOutputWithContext(ctx context.Context) GetUserNotificationRuleOutput {
	return o
}

func (o GetUserNotificationRuleOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserNotificationRule) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

func (o GetUserNotificationRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserNotificationRule) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserNotificationRuleArrayOutput struct{ *pulumi.OutputState }

func (GetUserNotificationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserNotificationRule)(nil)).Elem()
}

func (o GetUserNotificationRuleArrayOutput) ToGetUserNotificationRuleArrayOutput() GetUserNotificationRuleArrayOutput {
	return o
}

func (o GetUserNotificationRuleArrayOutput) ToGetUserNotificationRuleArrayOutputWithContext(ctx context.Context) GetUserNotificationRuleArrayOutput {
	return o
}

func (o GetUserNotificationRuleArrayOutput) Index(i pulumi.IntInput) GetUserNotificationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserNotificationRule {
		return vs[0].([]GetUserNotificationRule)[vs[1].(int)]
	}).(GetUserNotificationRuleOutput)
}

type GetUserOncallReminderRule struct {
	DelayMinutes int    `pulumi:"delayMinutes"`
	Type         string `pulumi:"type"`
}

// GetUserOncallReminderRuleInput is an input type that accepts GetUserOncallReminderRuleArgs and GetUserOncallReminderRuleOutput values.
// You can construct a concrete instance of `GetUserOncallReminderRuleInput` via:
//
//	GetUserOncallReminderRuleArgs{...}
type GetUserOncallReminderRuleInput interface {
	pulumi.Input

	ToGetUserOncallReminderRuleOutput() GetUserOncallReminderRuleOutput
	ToGetUserOncallReminderRuleOutputWithContext(context.Context) GetUserOncallReminderRuleOutput
}

type GetUserOncallReminderRuleArgs struct {
	DelayMinutes pulumi.IntInput    `pulumi:"delayMinutes"`
	Type         pulumi.StringInput `pulumi:"type"`
}

func (GetUserOncallReminderRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserOncallReminderRule)(nil)).Elem()
}

func (i GetUserOncallReminderRuleArgs) ToGetUserOncallReminderRuleOutput() GetUserOncallReminderRuleOutput {
	return i.ToGetUserOncallReminderRuleOutputWithContext(context.Background())
}

func (i GetUserOncallReminderRuleArgs) ToGetUserOncallReminderRuleOutputWithContext(ctx context.Context) GetUserOncallReminderRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserOncallReminderRuleOutput)
}

// GetUserOncallReminderRuleArrayInput is an input type that accepts GetUserOncallReminderRuleArray and GetUserOncallReminderRuleArrayOutput values.
// You can construct a concrete instance of `GetUserOncallReminderRuleArrayInput` via:
//
//	GetUserOncallReminderRuleArray{ GetUserOncallReminderRuleArgs{...} }
type GetUserOncallReminderRuleArrayInput interface {
	pulumi.Input

	ToGetUserOncallReminderRuleArrayOutput() GetUserOncallReminderRuleArrayOutput
	ToGetUserOncallReminderRuleArrayOutputWithContext(context.Context) GetUserOncallReminderRuleArrayOutput
}

type GetUserOncallReminderRuleArray []GetUserOncallReminderRuleInput

func (GetUserOncallReminderRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserOncallReminderRule)(nil)).Elem()
}

func (i GetUserOncallReminderRuleArray) ToGetUserOncallReminderRuleArrayOutput() GetUserOncallReminderRuleArrayOutput {
	return i.ToGetUserOncallReminderRuleArrayOutputWithContext(context.Background())
}

func (i GetUserOncallReminderRuleArray) ToGetUserOncallReminderRuleArrayOutputWithContext(ctx context.Context) GetUserOncallReminderRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserOncallReminderRuleArrayOutput)
}

type GetUserOncallReminderRuleOutput struct{ *pulumi.OutputState }

func (GetUserOncallReminderRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserOncallReminderRule)(nil)).Elem()
}

func (o GetUserOncallReminderRuleOutput) ToGetUserOncallReminderRuleOutput() GetUserOncallReminderRuleOutput {
	return o
}

func (o GetUserOncallReminderRuleOutput) ToGetUserOncallReminderRuleOutputWithContext(ctx context.Context) GetUserOncallReminderRuleOutput {
	return o
}

func (o GetUserOncallReminderRuleOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserOncallReminderRule) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

func (o GetUserOncallReminderRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOncallReminderRule) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserOncallReminderRuleArrayOutput struct{ *pulumi.OutputState }

func (GetUserOncallReminderRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserOncallReminderRule)(nil)).Elem()
}

func (o GetUserOncallReminderRuleArrayOutput) ToGetUserOncallReminderRuleArrayOutput() GetUserOncallReminderRuleArrayOutput {
	return o
}

func (o GetUserOncallReminderRuleArrayOutput) ToGetUserOncallReminderRuleArrayOutputWithContext(ctx context.Context) GetUserOncallReminderRuleArrayOutput {
	return o
}

func (o GetUserOncallReminderRuleArrayOutput) Index(i pulumi.IntInput) GetUserOncallReminderRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserOncallReminderRule {
		return vs[0].([]GetUserOncallReminderRule)[vs[1].(int)]
	}).(GetUserOncallReminderRuleOutput)
}

type GetWebformInputField struct {
	// Input field Label.
	Label string `pulumi:"label"`
	// Input field options.
	Options []string `pulumi:"options"`
}

// GetWebformInputFieldInput is an input type that accepts GetWebformInputFieldArgs and GetWebformInputFieldOutput values.
// You can construct a concrete instance of `GetWebformInputFieldInput` via:
//
//	GetWebformInputFieldArgs{...}
type GetWebformInputFieldInput interface {
	pulumi.Input

	ToGetWebformInputFieldOutput() GetWebformInputFieldOutput
	ToGetWebformInputFieldOutputWithContext(context.Context) GetWebformInputFieldOutput
}

type GetWebformInputFieldArgs struct {
	// Input field Label.
	Label pulumi.StringInput `pulumi:"label"`
	// Input field options.
	Options pulumi.StringArrayInput `pulumi:"options"`
}

func (GetWebformInputFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformInputField)(nil)).Elem()
}

func (i GetWebformInputFieldArgs) ToGetWebformInputFieldOutput() GetWebformInputFieldOutput {
	return i.ToGetWebformInputFieldOutputWithContext(context.Background())
}

func (i GetWebformInputFieldArgs) ToGetWebformInputFieldOutputWithContext(ctx context.Context) GetWebformInputFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformInputFieldOutput)
}

// GetWebformInputFieldArrayInput is an input type that accepts GetWebformInputFieldArray and GetWebformInputFieldArrayOutput values.
// You can construct a concrete instance of `GetWebformInputFieldArrayInput` via:
//
//	GetWebformInputFieldArray{ GetWebformInputFieldArgs{...} }
type GetWebformInputFieldArrayInput interface {
	pulumi.Input

	ToGetWebformInputFieldArrayOutput() GetWebformInputFieldArrayOutput
	ToGetWebformInputFieldArrayOutputWithContext(context.Context) GetWebformInputFieldArrayOutput
}

type GetWebformInputFieldArray []GetWebformInputFieldInput

func (GetWebformInputFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformInputField)(nil)).Elem()
}

func (i GetWebformInputFieldArray) ToGetWebformInputFieldArrayOutput() GetWebformInputFieldArrayOutput {
	return i.ToGetWebformInputFieldArrayOutputWithContext(context.Background())
}

func (i GetWebformInputFieldArray) ToGetWebformInputFieldArrayOutputWithContext(ctx context.Context) GetWebformInputFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformInputFieldArrayOutput)
}

type GetWebformInputFieldOutput struct{ *pulumi.OutputState }

func (GetWebformInputFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformInputField)(nil)).Elem()
}

func (o GetWebformInputFieldOutput) ToGetWebformInputFieldOutput() GetWebformInputFieldOutput {
	return o
}

func (o GetWebformInputFieldOutput) ToGetWebformInputFieldOutputWithContext(ctx context.Context) GetWebformInputFieldOutput {
	return o
}

// Input field Label.
func (o GetWebformInputFieldOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformInputField) string { return v.Label }).(pulumi.StringOutput)
}

// Input field options.
func (o GetWebformInputFieldOutput) Options() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWebformInputField) []string { return v.Options }).(pulumi.StringArrayOutput)
}

type GetWebformInputFieldArrayOutput struct{ *pulumi.OutputState }

func (GetWebformInputFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformInputField)(nil)).Elem()
}

func (o GetWebformInputFieldArrayOutput) ToGetWebformInputFieldArrayOutput() GetWebformInputFieldArrayOutput {
	return o
}

func (o GetWebformInputFieldArrayOutput) ToGetWebformInputFieldArrayOutputWithContext(ctx context.Context) GetWebformInputFieldArrayOutput {
	return o
}

func (o GetWebformInputFieldArrayOutput) Index(i pulumi.IntInput) GetWebformInputFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebformInputField {
		return vs[0].([]GetWebformInputField)[vs[1].(int)]
	}).(GetWebformInputFieldOutput)
}

type GetWebformOwner struct {
	// Form owner id.
	Id string `pulumi:"id"`
	// Form owner name.
	Name string `pulumi:"name"`
	// Form owner type (user, team, squad).
	Type string `pulumi:"type"`
}

// GetWebformOwnerInput is an input type that accepts GetWebformOwnerArgs and GetWebformOwnerOutput values.
// You can construct a concrete instance of `GetWebformOwnerInput` via:
//
//	GetWebformOwnerArgs{...}
type GetWebformOwnerInput interface {
	pulumi.Input

	ToGetWebformOwnerOutput() GetWebformOwnerOutput
	ToGetWebformOwnerOutputWithContext(context.Context) GetWebformOwnerOutput
}

type GetWebformOwnerArgs struct {
	// Form owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Form owner name.
	Name pulumi.StringInput `pulumi:"name"`
	// Form owner type (user, team, squad).
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetWebformOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformOwner)(nil)).Elem()
}

func (i GetWebformOwnerArgs) ToGetWebformOwnerOutput() GetWebformOwnerOutput {
	return i.ToGetWebformOwnerOutputWithContext(context.Background())
}

func (i GetWebformOwnerArgs) ToGetWebformOwnerOutputWithContext(ctx context.Context) GetWebformOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformOwnerOutput)
}

// GetWebformOwnerArrayInput is an input type that accepts GetWebformOwnerArray and GetWebformOwnerArrayOutput values.
// You can construct a concrete instance of `GetWebformOwnerArrayInput` via:
//
//	GetWebformOwnerArray{ GetWebformOwnerArgs{...} }
type GetWebformOwnerArrayInput interface {
	pulumi.Input

	ToGetWebformOwnerArrayOutput() GetWebformOwnerArrayOutput
	ToGetWebformOwnerArrayOutputWithContext(context.Context) GetWebformOwnerArrayOutput
}

type GetWebformOwnerArray []GetWebformOwnerInput

func (GetWebformOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformOwner)(nil)).Elem()
}

func (i GetWebformOwnerArray) ToGetWebformOwnerArrayOutput() GetWebformOwnerArrayOutput {
	return i.ToGetWebformOwnerArrayOutputWithContext(context.Background())
}

func (i GetWebformOwnerArray) ToGetWebformOwnerArrayOutputWithContext(ctx context.Context) GetWebformOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformOwnerArrayOutput)
}

type GetWebformOwnerOutput struct{ *pulumi.OutputState }

func (GetWebformOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformOwner)(nil)).Elem()
}

func (o GetWebformOwnerOutput) ToGetWebformOwnerOutput() GetWebformOwnerOutput {
	return o
}

func (o GetWebformOwnerOutput) ToGetWebformOwnerOutputWithContext(ctx context.Context) GetWebformOwnerOutput {
	return o
}

// Form owner id.
func (o GetWebformOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Form owner name.
func (o GetWebformOwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformOwner) string { return v.Name }).(pulumi.StringOutput)
}

// Form owner type (user, team, squad).
func (o GetWebformOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformOwner) string { return v.Type }).(pulumi.StringOutput)
}

type GetWebformOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetWebformOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformOwner)(nil)).Elem()
}

func (o GetWebformOwnerArrayOutput) ToGetWebformOwnerArrayOutput() GetWebformOwnerArrayOutput {
	return o
}

func (o GetWebformOwnerArrayOutput) ToGetWebformOwnerArrayOutputWithContext(ctx context.Context) GetWebformOwnerArrayOutput {
	return o
}

func (o GetWebformOwnerArrayOutput) Index(i pulumi.IntInput) GetWebformOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebformOwner {
		return vs[0].([]GetWebformOwner)[vs[1].(int)]
	}).(GetWebformOwnerOutput)
}

type GetWebformService struct {
	// Service alias.
	Alias string `pulumi:"alias"`
	// Service name.
	Name string `pulumi:"name"`
	// Service id.
	ServiceId string `pulumi:"serviceId"`
}

// GetWebformServiceInput is an input type that accepts GetWebformServiceArgs and GetWebformServiceOutput values.
// You can construct a concrete instance of `GetWebformServiceInput` via:
//
//	GetWebformServiceArgs{...}
type GetWebformServiceInput interface {
	pulumi.Input

	ToGetWebformServiceOutput() GetWebformServiceOutput
	ToGetWebformServiceOutputWithContext(context.Context) GetWebformServiceOutput
}

type GetWebformServiceArgs struct {
	// Service alias.
	Alias pulumi.StringInput `pulumi:"alias"`
	// Service name.
	Name pulumi.StringInput `pulumi:"name"`
	// Service id.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
}

func (GetWebformServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformService)(nil)).Elem()
}

func (i GetWebformServiceArgs) ToGetWebformServiceOutput() GetWebformServiceOutput {
	return i.ToGetWebformServiceOutputWithContext(context.Background())
}

func (i GetWebformServiceArgs) ToGetWebformServiceOutputWithContext(ctx context.Context) GetWebformServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformServiceOutput)
}

// GetWebformServiceArrayInput is an input type that accepts GetWebformServiceArray and GetWebformServiceArrayOutput values.
// You can construct a concrete instance of `GetWebformServiceArrayInput` via:
//
//	GetWebformServiceArray{ GetWebformServiceArgs{...} }
type GetWebformServiceArrayInput interface {
	pulumi.Input

	ToGetWebformServiceArrayOutput() GetWebformServiceArrayOutput
	ToGetWebformServiceArrayOutputWithContext(context.Context) GetWebformServiceArrayOutput
}

type GetWebformServiceArray []GetWebformServiceInput

func (GetWebformServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformService)(nil)).Elem()
}

func (i GetWebformServiceArray) ToGetWebformServiceArrayOutput() GetWebformServiceArrayOutput {
	return i.ToGetWebformServiceArrayOutputWithContext(context.Background())
}

func (i GetWebformServiceArray) ToGetWebformServiceArrayOutputWithContext(ctx context.Context) GetWebformServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformServiceArrayOutput)
}

type GetWebformServiceOutput struct{ *pulumi.OutputState }

func (GetWebformServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformService)(nil)).Elem()
}

func (o GetWebformServiceOutput) ToGetWebformServiceOutput() GetWebformServiceOutput {
	return o
}

func (o GetWebformServiceOutput) ToGetWebformServiceOutputWithContext(ctx context.Context) GetWebformServiceOutput {
	return o
}

// Service alias.
func (o GetWebformServiceOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformService) string { return v.Alias }).(pulumi.StringOutput)
}

// Service name.
func (o GetWebformServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformService) string { return v.Name }).(pulumi.StringOutput)
}

// Service id.
func (o GetWebformServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformService) string { return v.ServiceId }).(pulumi.StringOutput)
}

type GetWebformServiceArrayOutput struct{ *pulumi.OutputState }

func (GetWebformServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformService)(nil)).Elem()
}

func (o GetWebformServiceArrayOutput) ToGetWebformServiceArrayOutput() GetWebformServiceArrayOutput {
	return o
}

func (o GetWebformServiceArrayOutput) ToGetWebformServiceArrayOutputWithContext(ctx context.Context) GetWebformServiceArrayOutput {
	return o
}

func (o GetWebformServiceArrayOutput) Index(i pulumi.IntInput) GetWebformServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebformService {
		return vs[0].([]GetWebformService)[vs[1].(int)]
	}).(GetWebformServiceOutput)
}

type GetWebformSeverity struct {
	// Severity description.
	Description string `pulumi:"description"`
	// Severity type.
	Type string `pulumi:"type"`
}

// GetWebformSeverityInput is an input type that accepts GetWebformSeverityArgs and GetWebformSeverityOutput values.
// You can construct a concrete instance of `GetWebformSeverityInput` via:
//
//	GetWebformSeverityArgs{...}
type GetWebformSeverityInput interface {
	pulumi.Input

	ToGetWebformSeverityOutput() GetWebformSeverityOutput
	ToGetWebformSeverityOutputWithContext(context.Context) GetWebformSeverityOutput
}

type GetWebformSeverityArgs struct {
	// Severity description.
	Description pulumi.StringInput `pulumi:"description"`
	// Severity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetWebformSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformSeverity)(nil)).Elem()
}

func (i GetWebformSeverityArgs) ToGetWebformSeverityOutput() GetWebformSeverityOutput {
	return i.ToGetWebformSeverityOutputWithContext(context.Background())
}

func (i GetWebformSeverityArgs) ToGetWebformSeverityOutputWithContext(ctx context.Context) GetWebformSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformSeverityOutput)
}

// GetWebformSeverityArrayInput is an input type that accepts GetWebformSeverityArray and GetWebformSeverityArrayOutput values.
// You can construct a concrete instance of `GetWebformSeverityArrayInput` via:
//
//	GetWebformSeverityArray{ GetWebformSeverityArgs{...} }
type GetWebformSeverityArrayInput interface {
	pulumi.Input

	ToGetWebformSeverityArrayOutput() GetWebformSeverityArrayOutput
	ToGetWebformSeverityArrayOutputWithContext(context.Context) GetWebformSeverityArrayOutput
}

type GetWebformSeverityArray []GetWebformSeverityInput

func (GetWebformSeverityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformSeverity)(nil)).Elem()
}

func (i GetWebformSeverityArray) ToGetWebformSeverityArrayOutput() GetWebformSeverityArrayOutput {
	return i.ToGetWebformSeverityArrayOutputWithContext(context.Background())
}

func (i GetWebformSeverityArray) ToGetWebformSeverityArrayOutputWithContext(ctx context.Context) GetWebformSeverityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformSeverityArrayOutput)
}

type GetWebformSeverityOutput struct{ *pulumi.OutputState }

func (GetWebformSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformSeverity)(nil)).Elem()
}

func (o GetWebformSeverityOutput) ToGetWebformSeverityOutput() GetWebformSeverityOutput {
	return o
}

func (o GetWebformSeverityOutput) ToGetWebformSeverityOutputWithContext(ctx context.Context) GetWebformSeverityOutput {
	return o
}

// Severity description.
func (o GetWebformSeverityOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformSeverity) string { return v.Description }).(pulumi.StringOutput)
}

// Severity type.
func (o GetWebformSeverityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformSeverity) string { return v.Type }).(pulumi.StringOutput)
}

type GetWebformSeverityArrayOutput struct{ *pulumi.OutputState }

func (GetWebformSeverityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformSeverity)(nil)).Elem()
}

func (o GetWebformSeverityArrayOutput) ToGetWebformSeverityArrayOutput() GetWebformSeverityArrayOutput {
	return o
}

func (o GetWebformSeverityArrayOutput) ToGetWebformSeverityArrayOutputWithContext(ctx context.Context) GetWebformSeverityArrayOutput {
	return o
}

func (o GetWebformSeverityArrayOutput) Index(i pulumi.IntInput) GetWebformSeverityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebformSeverity {
		return vs[0].([]GetWebformSeverity)[vs[1].(int)]
	}).(GetWebformSeverityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeduplicationRulesRuleInput)(nil)).Elem(), DeduplicationRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeduplicationRulesRuleArrayInput)(nil)).Elem(), DeduplicationRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeduplicationRulesRuleBasicExpressionInput)(nil)).Elem(), DeduplicationRulesRuleBasicExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeduplicationRulesRuleBasicExpressionArrayInput)(nil)).Elem(), DeduplicationRulesRuleBasicExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyEntityOwnerInput)(nil)).Elem(), EscalationPolicyEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyEntityOwnerPtrInput)(nil)).Elem(), EscalationPolicyEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRepeatInput)(nil)).Elem(), EscalationPolicyRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRepeatPtrInput)(nil)).Elem(), EscalationPolicyRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleInput)(nil)).Elem(), EscalationPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleArrayInput)(nil)).Elem(), EscalationPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleRepeatInput)(nil)).Elem(), EscalationPolicyRuleRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleRepeatPtrInput)(nil)).Elem(), EscalationPolicyRuleRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleRoundRobinInput)(nil)).Elem(), EscalationPolicyRuleRoundRobinArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleRoundRobinPtrInput)(nil)).Elem(), EscalationPolicyRuleRoundRobinArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleRoundRobinRotationInput)(nil)).Elem(), EscalationPolicyRuleRoundRobinRotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleRoundRobinRotationPtrInput)(nil)).Elem(), EscalationPolicyRuleRoundRobinRotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleTargetInput)(nil)).Elem(), EscalationPolicyRuleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleTargetArrayInput)(nil)).Elem(), EscalationPolicyRuleTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRulesRuleInput)(nil)).Elem(), RoutingRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRulesRuleArrayInput)(nil)).Elem(), RoutingRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRulesRuleBasicExpressionInput)(nil)).Elem(), RoutingRulesRuleBasicExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRulesRuleBasicExpressionArrayInput)(nil)).Elem(), RoutingRulesRuleBasicExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookEntityOwnerInput)(nil)).Elem(), RunbookEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookEntityOwnerPtrInput)(nil)).Elem(), RunbookEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookStepInput)(nil)).Elem(), RunbookStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookStepArrayInput)(nil)).Elem(), RunbookStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOEntityOwnerInput)(nil)).Elem(), SLOEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOEntityOwnerPtrInput)(nil)).Elem(), SLOEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLONotifyInput)(nil)).Elem(), SLONotifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLONotifyPtrInput)(nil)).Elem(), SLONotifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLORuleInput)(nil)).Elem(), SLORuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLORuleArrayInput)(nil)).Elem(), SLORuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationV2ParticipantGroupInput)(nil)).Elem(), ScheduleRotationV2ParticipantGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationV2ParticipantGroupArrayInput)(nil)).Elem(), ScheduleRotationV2ParticipantGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationV2ParticipantGroupParticipantInput)(nil)).Elem(), ScheduleRotationV2ParticipantGroupParticipantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationV2ParticipantGroupParticipantArrayInput)(nil)).Elem(), ScheduleRotationV2ParticipantGroupParticipantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationV2ShiftTimeslotInput)(nil)).Elem(), ScheduleRotationV2ShiftTimeslotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationV2ShiftTimeslotArrayInput)(nil)).Elem(), ScheduleRotationV2ShiftTimeslotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleV2EntityOwnerInput)(nil)).Elem(), ScheduleV2EntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleV2EntityOwnerPtrInput)(nil)).Elem(), ScheduleV2EntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleV2TagInput)(nil)).Elem(), ScheduleV2TagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleV2TagArrayInput)(nil)).Elem(), ScheduleV2TagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SebformInputFieldInput)(nil)).Elem(), SebformInputFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SebformInputFieldArrayInput)(nil)).Elem(), SebformInputFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SebformOwnerInput)(nil)).Elem(), SebformOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SebformOwnerPtrInput)(nil)).Elem(), SebformOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SebformServiceInput)(nil)).Elem(), SebformServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SebformServiceArrayInput)(nil)).Elem(), SebformServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SebformSeverityInput)(nil)).Elem(), SebformSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SebformSeverityArrayInput)(nil)).Elem(), SebformSeverityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMaintainerInput)(nil)).Elem(), ServiceMaintainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMaintainerPtrInput)(nil)).Elem(), ServiceMaintainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMaintenanceWindowInput)(nil)).Elem(), ServiceMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMaintenanceWindowArrayInput)(nil)).Elem(), ServiceMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagInput)(nil)).Elem(), ServiceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagArrayInput)(nil)).Elem(), ServiceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressionRulesRuleInput)(nil)).Elem(), SuppressionRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressionRulesRuleArrayInput)(nil)).Elem(), SuppressionRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressionRulesRuleBasicExpressionInput)(nil)).Elem(), SuppressionRulesRuleBasicExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressionRulesRuleBasicExpressionArrayInput)(nil)).Elem(), SuppressionRulesRuleBasicExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressionRulesRuleTimeslotInput)(nil)).Elem(), SuppressionRulesRuleTimeslotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressionRulesRuleTimeslotArrayInput)(nil)).Elem(), SuppressionRulesRuleTimeslotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressionRulesRuleTimeslotCustomInput)(nil)).Elem(), SuppressionRulesRuleTimeslotCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressionRulesRuleTimeslotCustomArrayInput)(nil)).Elem(), SuppressionRulesRuleTimeslotCustomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaggingRulesRuleInput)(nil)).Elem(), TaggingRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaggingRulesRuleArrayInput)(nil)).Elem(), TaggingRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaggingRulesRuleBasicExpressionInput)(nil)).Elem(), TaggingRulesRuleBasicExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaggingRulesRuleBasicExpressionArrayInput)(nil)).Elem(), TaggingRulesRuleBasicExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaggingRulesRuleTagInput)(nil)).Elem(), TaggingRulesRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaggingRulesRuleTagArrayInput)(nil)).Elem(), TaggingRulesRuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyEntityOwnerInput)(nil)).Elem(), GetEscalationPolicyEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyEntityOwnerArrayInput)(nil)).Elem(), GetEscalationPolicyEntityOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRepeatInput)(nil)).Elem(), GetEscalationPolicyRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRepeatArrayInput)(nil)).Elem(), GetEscalationPolicyRepeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleInput)(nil)).Elem(), GetEscalationPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleArrayInput)(nil)).Elem(), GetEscalationPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleRepeatInput)(nil)).Elem(), GetEscalationPolicyRuleRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleRepeatArrayInput)(nil)).Elem(), GetEscalationPolicyRuleRepeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleRoundRobinInput)(nil)).Elem(), GetEscalationPolicyRuleRoundRobinArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleRoundRobinArrayInput)(nil)).Elem(), GetEscalationPolicyRuleRoundRobinArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleRoundRobinRotationInput)(nil)).Elem(), GetEscalationPolicyRuleRoundRobinRotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleRoundRobinRotationArrayInput)(nil)).Elem(), GetEscalationPolicyRuleRoundRobinRotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleTargetInput)(nil)).Elem(), GetEscalationPolicyRuleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationPolicyRuleTargetArrayInput)(nil)).Elem(), GetEscalationPolicyRuleTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunbookEntityOwnerInput)(nil)).Elem(), GetRunbookEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunbookEntityOwnerArrayInput)(nil)).Elem(), GetRunbookEntityOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunbookStepInput)(nil)).Elem(), GetRunbookStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunbookStepArrayInput)(nil)).Elem(), GetRunbookStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduleV2EntityOwnerInput)(nil)).Elem(), GetScheduleV2EntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduleV2EntityOwnerArrayInput)(nil)).Elem(), GetScheduleV2EntityOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduleV2TagInput)(nil)).Elem(), GetScheduleV2TagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduleV2TagArrayInput)(nil)).Elem(), GetScheduleV2TagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceMaintainerInput)(nil)).Elem(), GetServiceMaintainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceMaintainerArrayInput)(nil)).Elem(), GetServiceMaintainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTagInput)(nil)).Elem(), GetServiceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTagArrayInput)(nil)).Elem(), GetServiceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMemberTypeInput)(nil)).Elem(), GetTeamMemberTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMemberTypeArrayInput)(nil)).Elem(), GetTeamMemberTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamRoleTypeInput)(nil)).Elem(), GetTeamRoleTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamRoleTypeArrayInput)(nil)).Elem(), GetTeamRoleTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserNotificationRuleInput)(nil)).Elem(), GetUserNotificationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserNotificationRuleArrayInput)(nil)).Elem(), GetUserNotificationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserOncallReminderRuleInput)(nil)).Elem(), GetUserOncallReminderRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserOncallReminderRuleArrayInput)(nil)).Elem(), GetUserOncallReminderRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformInputFieldInput)(nil)).Elem(), GetWebformInputFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformInputFieldArrayInput)(nil)).Elem(), GetWebformInputFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformOwnerInput)(nil)).Elem(), GetWebformOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformOwnerArrayInput)(nil)).Elem(), GetWebformOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformServiceInput)(nil)).Elem(), GetWebformServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformServiceArrayInput)(nil)).Elem(), GetWebformServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformSeverityInput)(nil)).Elem(), GetWebformSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformSeverityArrayInput)(nil)).Elem(), GetWebformSeverityArray{})
	pulumi.RegisterOutputType(DeduplicationRulesRuleOutput{})
	pulumi.RegisterOutputType(DeduplicationRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(DeduplicationRulesRuleBasicExpressionOutput{})
	pulumi.RegisterOutputType(DeduplicationRulesRuleBasicExpressionArrayOutput{})
	pulumi.RegisterOutputType(EscalationPolicyEntityOwnerOutput{})
	pulumi.RegisterOutputType(EscalationPolicyEntityOwnerPtrOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRepeatOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRepeatPtrOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleRepeatOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleRepeatPtrOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleRoundRobinOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleRoundRobinPtrOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleRoundRobinRotationOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleRoundRobinRotationPtrOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleTargetOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleTargetArrayOutput{})
	pulumi.RegisterOutputType(RoutingRulesRuleOutput{})
	pulumi.RegisterOutputType(RoutingRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(RoutingRulesRuleBasicExpressionOutput{})
	pulumi.RegisterOutputType(RoutingRulesRuleBasicExpressionArrayOutput{})
	pulumi.RegisterOutputType(RunbookEntityOwnerOutput{})
	pulumi.RegisterOutputType(RunbookEntityOwnerPtrOutput{})
	pulumi.RegisterOutputType(RunbookStepOutput{})
	pulumi.RegisterOutputType(RunbookStepArrayOutput{})
	pulumi.RegisterOutputType(SLOEntityOwnerOutput{})
	pulumi.RegisterOutputType(SLOEntityOwnerPtrOutput{})
	pulumi.RegisterOutputType(SLONotifyOutput{})
	pulumi.RegisterOutputType(SLONotifyPtrOutput{})
	pulumi.RegisterOutputType(SLORuleOutput{})
	pulumi.RegisterOutputType(SLORuleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationV2ParticipantGroupOutput{})
	pulumi.RegisterOutputType(ScheduleRotationV2ParticipantGroupArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationV2ParticipantGroupParticipantOutput{})
	pulumi.RegisterOutputType(ScheduleRotationV2ParticipantGroupParticipantArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationV2ShiftTimeslotOutput{})
	pulumi.RegisterOutputType(ScheduleRotationV2ShiftTimeslotArrayOutput{})
	pulumi.RegisterOutputType(ScheduleV2EntityOwnerOutput{})
	pulumi.RegisterOutputType(ScheduleV2EntityOwnerPtrOutput{})
	pulumi.RegisterOutputType(ScheduleV2TagOutput{})
	pulumi.RegisterOutputType(ScheduleV2TagArrayOutput{})
	pulumi.RegisterOutputType(SebformInputFieldOutput{})
	pulumi.RegisterOutputType(SebformInputFieldArrayOutput{})
	pulumi.RegisterOutputType(SebformOwnerOutput{})
	pulumi.RegisterOutputType(SebformOwnerPtrOutput{})
	pulumi.RegisterOutputType(SebformServiceOutput{})
	pulumi.RegisterOutputType(SebformServiceArrayOutput{})
	pulumi.RegisterOutputType(SebformSeverityOutput{})
	pulumi.RegisterOutputType(SebformSeverityArrayOutput{})
	pulumi.RegisterOutputType(ServiceMaintainerOutput{})
	pulumi.RegisterOutputType(ServiceMaintainerPtrOutput{})
	pulumi.RegisterOutputType(ServiceMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(ServiceMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(ServiceTagOutput{})
	pulumi.RegisterOutputType(ServiceTagArrayOutput{})
	pulumi.RegisterOutputType(SuppressionRulesRuleOutput{})
	pulumi.RegisterOutputType(SuppressionRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(SuppressionRulesRuleBasicExpressionOutput{})
	pulumi.RegisterOutputType(SuppressionRulesRuleBasicExpressionArrayOutput{})
	pulumi.RegisterOutputType(SuppressionRulesRuleTimeslotOutput{})
	pulumi.RegisterOutputType(SuppressionRulesRuleTimeslotArrayOutput{})
	pulumi.RegisterOutputType(SuppressionRulesRuleTimeslotCustomOutput{})
	pulumi.RegisterOutputType(SuppressionRulesRuleTimeslotCustomArrayOutput{})
	pulumi.RegisterOutputType(TaggingRulesRuleOutput{})
	pulumi.RegisterOutputType(TaggingRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(TaggingRulesRuleBasicExpressionOutput{})
	pulumi.RegisterOutputType(TaggingRulesRuleBasicExpressionArrayOutput{})
	pulumi.RegisterOutputType(TaggingRulesRuleTagOutput{})
	pulumi.RegisterOutputType(TaggingRulesRuleTagArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyEntityOwnerOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyEntityOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRepeatOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRepeatArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleRepeatOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleRepeatArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleRoundRobinOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleRoundRobinArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleRoundRobinRotationOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleRoundRobinRotationArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleTargetOutput{})
	pulumi.RegisterOutputType(GetEscalationPolicyRuleTargetArrayOutput{})
	pulumi.RegisterOutputType(GetRunbookEntityOwnerOutput{})
	pulumi.RegisterOutputType(GetRunbookEntityOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetRunbookStepOutput{})
	pulumi.RegisterOutputType(GetRunbookStepArrayOutput{})
	pulumi.RegisterOutputType(GetScheduleV2EntityOwnerOutput{})
	pulumi.RegisterOutputType(GetScheduleV2EntityOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetScheduleV2TagOutput{})
	pulumi.RegisterOutputType(GetScheduleV2TagArrayOutput{})
	pulumi.RegisterOutputType(GetServiceMaintainerOutput{})
	pulumi.RegisterOutputType(GetServiceMaintainerArrayOutput{})
	pulumi.RegisterOutputType(GetServiceTagOutput{})
	pulumi.RegisterOutputType(GetServiceTagArrayOutput{})
	pulumi.RegisterOutputType(GetTeamMemberTypeOutput{})
	pulumi.RegisterOutputType(GetTeamMemberTypeArrayOutput{})
	pulumi.RegisterOutputType(GetTeamRoleTypeOutput{})
	pulumi.RegisterOutputType(GetTeamRoleTypeArrayOutput{})
	pulumi.RegisterOutputType(GetUserNotificationRuleOutput{})
	pulumi.RegisterOutputType(GetUserNotificationRuleArrayOutput{})
	pulumi.RegisterOutputType(GetUserOncallReminderRuleOutput{})
	pulumi.RegisterOutputType(GetUserOncallReminderRuleArrayOutput{})
	pulumi.RegisterOutputType(GetWebformInputFieldOutput{})
	pulumi.RegisterOutputType(GetWebformInputFieldArrayOutput{})
	pulumi.RegisterOutputType(GetWebformOwnerOutput{})
	pulumi.RegisterOutputType(GetWebformOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetWebformServiceOutput{})
	pulumi.RegisterOutputType(GetWebformServiceArrayOutput{})
	pulumi.RegisterOutputType(GetWebformSeverityOutput{})
	pulumi.RegisterOutputType(GetWebformSeverityArrayOutput{})
}
