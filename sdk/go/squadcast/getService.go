// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

// [Squadcast Services](https://support.squadcast.com/docs/adding-a-service-1) are the core components of your infrastructure/application for which alerts are generated. Services in Squadcast represent specific systems, applications, components, products, or teams for which an incident is created. To check out some of the best practices on creating Services in Squadcast, refer to the guide [here](https://www.squadcast.com/blog/how-to-configure-services-in-squadcast-best-practices-to-reduce-mttr).Use this data source to get information about a specific service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := squadcast.LookupService(ctx, &squadcast.LookupServiceArgs{
//				Name:   squadcast_service.Test.Name,
//				TeamId: "team id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("squadcast:index/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type LookupServiceArgs struct {
	// Name of the Service.
	Name string `pulumi:"name"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

// A collection of values returned by getService.
type LookupServiceResult struct {
	// Active alert source endpoints.
	ActiveAlertSourceEndpoints map[string]string `pulumi:"activeAlertSourceEndpoints"`
	// All available alert source endpoints.
	AlertSourceEndpoints map[string]string `pulumi:"alertSourceEndpoints"`
	// Unique API key of the service
	ApiKey string `pulumi:"apiKey"`
	// dependencies.
	Dependencies []string `pulumi:"dependencies"`
	// Detailed description about the service.
	Description string `pulumi:"description"`
	// Email.
	Email string `pulumi:"email"`
	// Email prefix.
	EmailPrefix string `pulumi:"emailPrefix"`
	// Escalation policy id.
	EscalationPolicyId string `pulumi:"escalationPolicyId"`
	// Service id.
	Id string `pulumi:"id"`
	// Service owner
	Maintainers []GetServiceMaintainer `pulumi:"maintainers"`
	// Name of the Service.
	Name string `pulumi:"name"`
	// Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
	SlackChannelId string `pulumi:"slackChannelId"`
	// Service tags
	Tags []GetServiceTag `pulumi:"tags"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceResult, error) {
			args := v.(LookupServiceArgs)
			r, err := LookupService(ctx, &args, opts...)
			var s LookupServiceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServiceResultOutput)
}

// A collection of arguments for invoking getService.
type LookupServiceOutputArgs struct {
	// Name of the Service.
	Name pulumi.StringInput `pulumi:"name"`
	// Team id.
	TeamId pulumi.StringInput `pulumi:"teamId"`
}

func (LookupServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceArgs)(nil)).Elem()
}

// A collection of values returned by getService.
type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutput() LookupServiceResultOutput {
	return o
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutputWithContext(ctx context.Context) LookupServiceResultOutput {
	return o
}

// Active alert source endpoints.
func (o LookupServiceResultOutput) ActiveAlertSourceEndpoints() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupServiceResult) map[string]string { return v.ActiveAlertSourceEndpoints }).(pulumi.StringMapOutput)
}

// All available alert source endpoints.
func (o LookupServiceResultOutput) AlertSourceEndpoints() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupServiceResult) map[string]string { return v.AlertSourceEndpoints }).(pulumi.StringMapOutput)
}

// Unique API key of the service
func (o LookupServiceResultOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.ApiKey }).(pulumi.StringOutput)
}

// dependencies.
func (o LookupServiceResultOutput) Dependencies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []string { return v.Dependencies }).(pulumi.StringArrayOutput)
}

// Detailed description about the service.
func (o LookupServiceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Description }).(pulumi.StringOutput)
}

// Email.
func (o LookupServiceResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Email }).(pulumi.StringOutput)
}

// Email prefix.
func (o LookupServiceResultOutput) EmailPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.EmailPrefix }).(pulumi.StringOutput)
}

// Escalation policy id.
func (o LookupServiceResultOutput) EscalationPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.EscalationPolicyId }).(pulumi.StringOutput)
}

// Service id.
func (o LookupServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Service owner
func (o LookupServiceResultOutput) Maintainers() GetServiceMaintainerArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceMaintainer { return v.Maintainers }).(GetServiceMaintainerArrayOutput)
}

// Name of the Service.
func (o LookupServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
func (o LookupServiceResultOutput) SlackChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.SlackChannelId }).(pulumi.StringOutput)
}

// Service tags
func (o LookupServiceResultOutput) Tags() GetServiceTagArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceTag { return v.Tags }).(GetServiceTagArrayOutput)
}

// Team id.
func (o LookupServiceResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceResultOutput{})
}
