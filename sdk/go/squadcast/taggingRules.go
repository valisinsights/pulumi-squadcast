// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

// [Tagging](https://support.squadcast.com/docs/event-tagging) is a rule-based, auto-tagging system with which you can define customised tags based on incident payloads, that get automatically assigned to incidents when they are triggered.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example test name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleService, err := squadcast.LookupService(ctx, &squadcast.LookupServiceArgs{
//				Name:   "example service name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewTaggingRules(ctx, "exampleTaggingRules", &squadcast.TaggingRulesArgs{
//				TeamId:    *pulumi.String(exampleTeam.Id),
//				ServiceId: *pulumi.String(exampleService.Id),
//				Rules: squadcast.TaggingRulesRuleArray{
//					&squadcast.TaggingRulesRuleArgs{
//						IsBasic:    pulumi.Bool(false),
//						Expression: pulumi.String("payload[\"event_id\"] == 40"),
//						Tags: squadcast.TaggingRulesRuleTagArray{
//							&squadcast.TaggingRulesRuleTagArgs{
//								Key:   pulumi.String("MyTag"),
//								Value: pulumi.String("foo"),
//								Color: pulumi.String("#ababab"),
//							},
//						},
//					},
//					&squadcast.TaggingRulesRuleArgs{
//						IsBasic: pulumi.Bool(true),
//						BasicExpressions: squadcast.TaggingRulesRuleBasicExpressionArray{
//							&squadcast.TaggingRulesRuleBasicExpressionArgs{
//								Lhs: pulumi.String("payload[\"foo\"]"),
//								Op:  pulumi.String("is"),
//								Rhs: pulumi.String("bar"),
//							},
//						},
//						Tags: squadcast.TaggingRulesRuleTagArray{
//							&squadcast.TaggingRulesRuleTagArgs{
//								Key:   pulumi.String("MyTag"),
//								Value: pulumi.String("foo"),
//								Color: pulumi.String("#ababab"),
//							},
//							&squadcast.TaggingRulesRuleTagArgs{
//								Key:   pulumi.String("MyTag2"),
//								Value: pulumi.String("bar"),
//								Color: pulumi.String("#f0f0f0"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewTaggingRules(ctx, "exampleTaggingRulesResourceWithouttags", &squadcast.TaggingRulesArgs{
//				TeamId:    *pulumi.String(exampleTeam.Id),
//				ServiceId: *pulumi.String(exampleService.Id),
//				Rules: squadcast.TaggingRulesRuleArray{
//					&squadcast.TaggingRulesRuleArgs{
//						IsBasic:    pulumi.Bool(false),
//						Expression: pulumi.String("addTag(\"EventType\", payload.details.event_type_key, \"#037916\")"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
//
// ```sh
//
//	$ pulumi import squadcast:index/taggingRules:TaggingRules test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
//
// ```
type TaggingRules struct {
	pulumi.CustomResourceState

	Rules TaggingRulesRuleArrayOutput `pulumi:"rules"`
	// Service id.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewTaggingRules registers a new resource with the given unique name, arguments, and options.
func NewTaggingRules(ctx *pulumi.Context,
	name string, args *TaggingRulesArgs, opts ...pulumi.ResourceOption) (*TaggingRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TaggingRules
	err := ctx.RegisterResource("squadcast:index/taggingRules:TaggingRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaggingRules gets an existing TaggingRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaggingRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaggingRulesState, opts ...pulumi.ResourceOption) (*TaggingRules, error) {
	var resource TaggingRules
	err := ctx.ReadResource("squadcast:index/taggingRules:TaggingRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaggingRules resources.
type taggingRulesState struct {
	Rules []TaggingRulesRule `pulumi:"rules"`
	// Service id.
	ServiceId *string `pulumi:"serviceId"`
	// Team id.
	TeamId *string `pulumi:"teamId"`
}

type TaggingRulesState struct {
	Rules TaggingRulesRuleArrayInput
	// Service id.
	ServiceId pulumi.StringPtrInput
	// Team id.
	TeamId pulumi.StringPtrInput
}

func (TaggingRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*taggingRulesState)(nil)).Elem()
}

type taggingRulesArgs struct {
	Rules []TaggingRulesRule `pulumi:"rules"`
	// Service id.
	ServiceId string `pulumi:"serviceId"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a TaggingRules resource.
type TaggingRulesArgs struct {
	Rules TaggingRulesRuleArrayInput
	// Service id.
	ServiceId pulumi.StringInput
	// Team id.
	TeamId pulumi.StringInput
}

func (TaggingRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taggingRulesArgs)(nil)).Elem()
}

type TaggingRulesInput interface {
	pulumi.Input

	ToTaggingRulesOutput() TaggingRulesOutput
	ToTaggingRulesOutputWithContext(ctx context.Context) TaggingRulesOutput
}

func (*TaggingRules) ElementType() reflect.Type {
	return reflect.TypeOf((**TaggingRules)(nil)).Elem()
}

func (i *TaggingRules) ToTaggingRulesOutput() TaggingRulesOutput {
	return i.ToTaggingRulesOutputWithContext(context.Background())
}

func (i *TaggingRules) ToTaggingRulesOutputWithContext(ctx context.Context) TaggingRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaggingRulesOutput)
}

// TaggingRulesArrayInput is an input type that accepts TaggingRulesArray and TaggingRulesArrayOutput values.
// You can construct a concrete instance of `TaggingRulesArrayInput` via:
//
//	TaggingRulesArray{ TaggingRulesArgs{...} }
type TaggingRulesArrayInput interface {
	pulumi.Input

	ToTaggingRulesArrayOutput() TaggingRulesArrayOutput
	ToTaggingRulesArrayOutputWithContext(context.Context) TaggingRulesArrayOutput
}

type TaggingRulesArray []TaggingRulesInput

func (TaggingRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TaggingRules)(nil)).Elem()
}

func (i TaggingRulesArray) ToTaggingRulesArrayOutput() TaggingRulesArrayOutput {
	return i.ToTaggingRulesArrayOutputWithContext(context.Background())
}

func (i TaggingRulesArray) ToTaggingRulesArrayOutputWithContext(ctx context.Context) TaggingRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaggingRulesArrayOutput)
}

// TaggingRulesMapInput is an input type that accepts TaggingRulesMap and TaggingRulesMapOutput values.
// You can construct a concrete instance of `TaggingRulesMapInput` via:
//
//	TaggingRulesMap{ "key": TaggingRulesArgs{...} }
type TaggingRulesMapInput interface {
	pulumi.Input

	ToTaggingRulesMapOutput() TaggingRulesMapOutput
	ToTaggingRulesMapOutputWithContext(context.Context) TaggingRulesMapOutput
}

type TaggingRulesMap map[string]TaggingRulesInput

func (TaggingRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TaggingRules)(nil)).Elem()
}

func (i TaggingRulesMap) ToTaggingRulesMapOutput() TaggingRulesMapOutput {
	return i.ToTaggingRulesMapOutputWithContext(context.Background())
}

func (i TaggingRulesMap) ToTaggingRulesMapOutputWithContext(ctx context.Context) TaggingRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaggingRulesMapOutput)
}

type TaggingRulesOutput struct{ *pulumi.OutputState }

func (TaggingRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaggingRules)(nil)).Elem()
}

func (o TaggingRulesOutput) ToTaggingRulesOutput() TaggingRulesOutput {
	return o
}

func (o TaggingRulesOutput) ToTaggingRulesOutputWithContext(ctx context.Context) TaggingRulesOutput {
	return o
}

func (o TaggingRulesOutput) Rules() TaggingRulesRuleArrayOutput {
	return o.ApplyT(func(v *TaggingRules) TaggingRulesRuleArrayOutput { return v.Rules }).(TaggingRulesRuleArrayOutput)
}

// Service id.
func (o TaggingRulesOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TaggingRules) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Team id.
func (o TaggingRulesOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TaggingRules) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type TaggingRulesArrayOutput struct{ *pulumi.OutputState }

func (TaggingRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TaggingRules)(nil)).Elem()
}

func (o TaggingRulesArrayOutput) ToTaggingRulesArrayOutput() TaggingRulesArrayOutput {
	return o
}

func (o TaggingRulesArrayOutput) ToTaggingRulesArrayOutputWithContext(ctx context.Context) TaggingRulesArrayOutput {
	return o
}

func (o TaggingRulesArrayOutput) Index(i pulumi.IntInput) TaggingRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TaggingRules {
		return vs[0].([]*TaggingRules)[vs[1].(int)]
	}).(TaggingRulesOutput)
}

type TaggingRulesMapOutput struct{ *pulumi.OutputState }

func (TaggingRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TaggingRules)(nil)).Elem()
}

func (o TaggingRulesMapOutput) ToTaggingRulesMapOutput() TaggingRulesMapOutput {
	return o
}

func (o TaggingRulesMapOutput) ToTaggingRulesMapOutputWithContext(ctx context.Context) TaggingRulesMapOutput {
	return o
}

func (o TaggingRulesMapOutput) MapIndex(k pulumi.StringInput) TaggingRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TaggingRules {
		return vs[0].(map[string]*TaggingRules)[vs[1].(string)]
	}).(TaggingRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaggingRulesInput)(nil)).Elem(), &TaggingRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaggingRulesArrayInput)(nil)).Elem(), TaggingRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaggingRulesMapInput)(nil)).Elem(), TaggingRulesMap{})
	pulumi.RegisterOutputType(TaggingRulesOutput{})
	pulumi.RegisterOutputType(TaggingRulesArrayOutput{})
	pulumi.RegisterOutputType(TaggingRulesMapOutput{})
}
