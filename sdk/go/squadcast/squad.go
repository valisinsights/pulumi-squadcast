// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

// [Squads](https://support.squadcast.com/docs/squads) are smaller groups of members within Teams. Squads could correspond to groups of people that are responsible for specific projects within a Team.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example test name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "test@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewSquad(ctx, "exampleSquad", &squadcast.SquadArgs{
//				TeamId: *pulumi.String(exampleTeam.Id),
//				MemberIds: pulumi.StringArray{
//					*pulumi.String(exampleUser.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teamID:squadID Use 'Get All Teams' and 'Get All Squads' APIs to get the id of the squad and slo respectively
//
// ```sh
//
//	$ pulumi import squadcast:index/squad:Squad test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
//
// ```
type Squad struct {
	pulumi.CustomResourceState

	// User ObjectId.
	MemberIds pulumi.StringArrayOutput `pulumi:"memberIds"`
	// Name of the Squad.
	Name pulumi.StringOutput `pulumi:"name"`
	// Team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewSquad registers a new resource with the given unique name, arguments, and options.
func NewSquad(ctx *pulumi.Context,
	name string, args *SquadArgs, opts ...pulumi.ResourceOption) (*Squad, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemberIds == nil {
		return nil, errors.New("invalid value for required argument 'MemberIds'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Squad
	err := ctx.RegisterResource("squadcast:index/squad:Squad", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSquad gets an existing Squad resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSquad(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SquadState, opts ...pulumi.ResourceOption) (*Squad, error) {
	var resource Squad
	err := ctx.ReadResource("squadcast:index/squad:Squad", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Squad resources.
type squadState struct {
	// User ObjectId.
	MemberIds []string `pulumi:"memberIds"`
	// Name of the Squad.
	Name *string `pulumi:"name"`
	// Team id.
	TeamId *string `pulumi:"teamId"`
}

type SquadState struct {
	// User ObjectId.
	MemberIds pulumi.StringArrayInput
	// Name of the Squad.
	Name pulumi.StringPtrInput
	// Team id.
	TeamId pulumi.StringPtrInput
}

func (SquadState) ElementType() reflect.Type {
	return reflect.TypeOf((*squadState)(nil)).Elem()
}

type squadArgs struct {
	// User ObjectId.
	MemberIds []string `pulumi:"memberIds"`
	// Name of the Squad.
	Name *string `pulumi:"name"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a Squad resource.
type SquadArgs struct {
	// User ObjectId.
	MemberIds pulumi.StringArrayInput
	// Name of the Squad.
	Name pulumi.StringPtrInput
	// Team id.
	TeamId pulumi.StringInput
}

func (SquadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*squadArgs)(nil)).Elem()
}

type SquadInput interface {
	pulumi.Input

	ToSquadOutput() SquadOutput
	ToSquadOutputWithContext(ctx context.Context) SquadOutput
}

func (*Squad) ElementType() reflect.Type {
	return reflect.TypeOf((**Squad)(nil)).Elem()
}

func (i *Squad) ToSquadOutput() SquadOutput {
	return i.ToSquadOutputWithContext(context.Background())
}

func (i *Squad) ToSquadOutputWithContext(ctx context.Context) SquadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquadOutput)
}

// SquadArrayInput is an input type that accepts SquadArray and SquadArrayOutput values.
// You can construct a concrete instance of `SquadArrayInput` via:
//
//	SquadArray{ SquadArgs{...} }
type SquadArrayInput interface {
	pulumi.Input

	ToSquadArrayOutput() SquadArrayOutput
	ToSquadArrayOutputWithContext(context.Context) SquadArrayOutput
}

type SquadArray []SquadInput

func (SquadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Squad)(nil)).Elem()
}

func (i SquadArray) ToSquadArrayOutput() SquadArrayOutput {
	return i.ToSquadArrayOutputWithContext(context.Background())
}

func (i SquadArray) ToSquadArrayOutputWithContext(ctx context.Context) SquadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquadArrayOutput)
}

// SquadMapInput is an input type that accepts SquadMap and SquadMapOutput values.
// You can construct a concrete instance of `SquadMapInput` via:
//
//	SquadMap{ "key": SquadArgs{...} }
type SquadMapInput interface {
	pulumi.Input

	ToSquadMapOutput() SquadMapOutput
	ToSquadMapOutputWithContext(context.Context) SquadMapOutput
}

type SquadMap map[string]SquadInput

func (SquadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Squad)(nil)).Elem()
}

func (i SquadMap) ToSquadMapOutput() SquadMapOutput {
	return i.ToSquadMapOutputWithContext(context.Background())
}

func (i SquadMap) ToSquadMapOutputWithContext(ctx context.Context) SquadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquadMapOutput)
}

type SquadOutput struct{ *pulumi.OutputState }

func (SquadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Squad)(nil)).Elem()
}

func (o SquadOutput) ToSquadOutput() SquadOutput {
	return o
}

func (o SquadOutput) ToSquadOutputWithContext(ctx context.Context) SquadOutput {
	return o
}

// User ObjectId.
func (o SquadOutput) MemberIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Squad) pulumi.StringArrayOutput { return v.MemberIds }).(pulumi.StringArrayOutput)
}

// Name of the Squad.
func (o SquadOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Squad) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Team id.
func (o SquadOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *Squad) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type SquadArrayOutput struct{ *pulumi.OutputState }

func (SquadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Squad)(nil)).Elem()
}

func (o SquadArrayOutput) ToSquadArrayOutput() SquadArrayOutput {
	return o
}

func (o SquadArrayOutput) ToSquadArrayOutputWithContext(ctx context.Context) SquadArrayOutput {
	return o
}

func (o SquadArrayOutput) Index(i pulumi.IntInput) SquadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Squad {
		return vs[0].([]*Squad)[vs[1].(int)]
	}).(SquadOutput)
}

type SquadMapOutput struct{ *pulumi.OutputState }

func (SquadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Squad)(nil)).Elem()
}

func (o SquadMapOutput) ToSquadMapOutput() SquadMapOutput {
	return o
}

func (o SquadMapOutput) ToSquadMapOutputWithContext(ctx context.Context) SquadMapOutput {
	return o
}

func (o SquadMapOutput) MapIndex(k pulumi.StringInput) SquadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Squad {
		return vs[0].(map[string]*Squad)[vs[1].(string)]
	}).(SquadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SquadInput)(nil)).Elem(), &Squad{})
	pulumi.RegisterInputType(reflect.TypeOf((*SquadArrayInput)(nil)).Elem(), SquadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SquadMapInput)(nil)).Elem(), SquadMap{})
	pulumi.RegisterOutputType(SquadOutput{})
	pulumi.RegisterOutputType(SquadArrayOutput{})
	pulumi.RegisterOutputType(SquadMapOutput{})
}
