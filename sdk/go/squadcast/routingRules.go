// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

// [Routing rules](https://support.squadcast.com/docs/alert-routing) allows you to ensure that alerts are routed to the right responder with the help of `event tags` attached to them.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example team name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "test@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleService, err := squadcast.LookupService(ctx, &squadcast.LookupServiceArgs{
//				Name:   "example service name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleEscalaionPolicy, err := squadcast.LookupEscalationPolicy(ctx, &squadcast.LookupEscalationPolicyArgs{
//				Name:   "example escalation policy name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleSquad, err := squadcast.LookupSquad(ctx, &squadcast.LookupSquadArgs{
//				Name:   "example squad name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewRoutingRules(ctx, "exampleRoutingRules", &squadcast.RoutingRulesArgs{
//				TeamId:    *pulumi.String(exampleTeam.Id),
//				ServiceId: *pulumi.String(exampleService.Id),
//				Rules: squadcast.RoutingRulesRuleArray{
//					&squadcast.RoutingRulesRuleArgs{
//						IsBasic:     pulumi.Bool(false),
//						Expression:  pulumi.String("payload[\"event_id\"] == 40"),
//						RouteToId:   exampleUser.Id / exampleSquad.Id / exampleEscalaionPolicy.Id,
//						RouteToType: pulumi.String("user/squad/escalation_policy"),
//					},
//					&squadcast.RoutingRulesRuleArgs{
//						IsBasic: pulumi.Bool(true),
//						BasicExpressions: squadcast.RoutingRulesRuleBasicExpressionArray{
//							&squadcast.RoutingRulesRuleBasicExpressionArgs{
//								Lhs: pulumi.String("payload[\"foo\"]"),
//								Rhs: pulumi.String("bar"),
//							},
//						},
//						RouteToId:   exampleUser.Id / exampleSquad.Id / exampleEscalaionPolicy.Id,
//						RouteToType: pulumi.String("user/squad/escalation_policy"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
//
// ```sh
//
//	$ pulumi import squadcast:index/routingRules:RoutingRules test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
//
// ```
type RoutingRules struct {
	pulumi.CustomResourceState

	Rules RoutingRulesRuleArrayOutput `pulumi:"rules"`
	// Service id.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewRoutingRules registers a new resource with the given unique name, arguments, and options.
func NewRoutingRules(ctx *pulumi.Context,
	name string, args *RoutingRulesArgs, opts ...pulumi.ResourceOption) (*RoutingRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutingRules
	err := ctx.RegisterResource("squadcast:index/routingRules:RoutingRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutingRules gets an existing RoutingRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutingRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutingRulesState, opts ...pulumi.ResourceOption) (*RoutingRules, error) {
	var resource RoutingRules
	err := ctx.ReadResource("squadcast:index/routingRules:RoutingRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutingRules resources.
type routingRulesState struct {
	Rules []RoutingRulesRule `pulumi:"rules"`
	// Service id.
	ServiceId *string `pulumi:"serviceId"`
	// Team id.
	TeamId *string `pulumi:"teamId"`
}

type RoutingRulesState struct {
	Rules RoutingRulesRuleArrayInput
	// Service id.
	ServiceId pulumi.StringPtrInput
	// Team id.
	TeamId pulumi.StringPtrInput
}

func (RoutingRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*routingRulesState)(nil)).Elem()
}

type routingRulesArgs struct {
	Rules []RoutingRulesRule `pulumi:"rules"`
	// Service id.
	ServiceId string `pulumi:"serviceId"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a RoutingRules resource.
type RoutingRulesArgs struct {
	Rules RoutingRulesRuleArrayInput
	// Service id.
	ServiceId pulumi.StringInput
	// Team id.
	TeamId pulumi.StringInput
}

func (RoutingRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routingRulesArgs)(nil)).Elem()
}

type RoutingRulesInput interface {
	pulumi.Input

	ToRoutingRulesOutput() RoutingRulesOutput
	ToRoutingRulesOutputWithContext(ctx context.Context) RoutingRulesOutput
}

func (*RoutingRules) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingRules)(nil)).Elem()
}

func (i *RoutingRules) ToRoutingRulesOutput() RoutingRulesOutput {
	return i.ToRoutingRulesOutputWithContext(context.Background())
}

func (i *RoutingRules) ToRoutingRulesOutputWithContext(ctx context.Context) RoutingRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulesOutput)
}

// RoutingRulesArrayInput is an input type that accepts RoutingRulesArray and RoutingRulesArrayOutput values.
// You can construct a concrete instance of `RoutingRulesArrayInput` via:
//
//	RoutingRulesArray{ RoutingRulesArgs{...} }
type RoutingRulesArrayInput interface {
	pulumi.Input

	ToRoutingRulesArrayOutput() RoutingRulesArrayOutput
	ToRoutingRulesArrayOutputWithContext(context.Context) RoutingRulesArrayOutput
}

type RoutingRulesArray []RoutingRulesInput

func (RoutingRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingRules)(nil)).Elem()
}

func (i RoutingRulesArray) ToRoutingRulesArrayOutput() RoutingRulesArrayOutput {
	return i.ToRoutingRulesArrayOutputWithContext(context.Background())
}

func (i RoutingRulesArray) ToRoutingRulesArrayOutputWithContext(ctx context.Context) RoutingRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulesArrayOutput)
}

// RoutingRulesMapInput is an input type that accepts RoutingRulesMap and RoutingRulesMapOutput values.
// You can construct a concrete instance of `RoutingRulesMapInput` via:
//
//	RoutingRulesMap{ "key": RoutingRulesArgs{...} }
type RoutingRulesMapInput interface {
	pulumi.Input

	ToRoutingRulesMapOutput() RoutingRulesMapOutput
	ToRoutingRulesMapOutputWithContext(context.Context) RoutingRulesMapOutput
}

type RoutingRulesMap map[string]RoutingRulesInput

func (RoutingRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingRules)(nil)).Elem()
}

func (i RoutingRulesMap) ToRoutingRulesMapOutput() RoutingRulesMapOutput {
	return i.ToRoutingRulesMapOutputWithContext(context.Background())
}

func (i RoutingRulesMap) ToRoutingRulesMapOutputWithContext(ctx context.Context) RoutingRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulesMapOutput)
}

type RoutingRulesOutput struct{ *pulumi.OutputState }

func (RoutingRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingRules)(nil)).Elem()
}

func (o RoutingRulesOutput) ToRoutingRulesOutput() RoutingRulesOutput {
	return o
}

func (o RoutingRulesOutput) ToRoutingRulesOutputWithContext(ctx context.Context) RoutingRulesOutput {
	return o
}

func (o RoutingRulesOutput) Rules() RoutingRulesRuleArrayOutput {
	return o.ApplyT(func(v *RoutingRules) RoutingRulesRuleArrayOutput { return v.Rules }).(RoutingRulesRuleArrayOutput)
}

// Service id.
func (o RoutingRulesOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingRules) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Team id.
func (o RoutingRulesOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingRules) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type RoutingRulesArrayOutput struct{ *pulumi.OutputState }

func (RoutingRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingRules)(nil)).Elem()
}

func (o RoutingRulesArrayOutput) ToRoutingRulesArrayOutput() RoutingRulesArrayOutput {
	return o
}

func (o RoutingRulesArrayOutput) ToRoutingRulesArrayOutputWithContext(ctx context.Context) RoutingRulesArrayOutput {
	return o
}

func (o RoutingRulesArrayOutput) Index(i pulumi.IntInput) RoutingRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoutingRules {
		return vs[0].([]*RoutingRules)[vs[1].(int)]
	}).(RoutingRulesOutput)
}

type RoutingRulesMapOutput struct{ *pulumi.OutputState }

func (RoutingRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingRules)(nil)).Elem()
}

func (o RoutingRulesMapOutput) ToRoutingRulesMapOutput() RoutingRulesMapOutput {
	return o
}

func (o RoutingRulesMapOutput) ToRoutingRulesMapOutputWithContext(ctx context.Context) RoutingRulesMapOutput {
	return o
}

func (o RoutingRulesMapOutput) MapIndex(k pulumi.StringInput) RoutingRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoutingRules {
		return vs[0].(map[string]*RoutingRules)[vs[1].(string)]
	}).(RoutingRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRulesInput)(nil)).Elem(), &RoutingRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRulesArrayInput)(nil)).Elem(), RoutingRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRulesMapInput)(nil)).Elem(), RoutingRulesMap{})
	pulumi.RegisterOutputType(RoutingRulesOutput{})
	pulumi.RegisterOutputType(RoutingRulesArrayOutput{})
	pulumi.RegisterOutputType(RoutingRulesMapOutput{})
}
