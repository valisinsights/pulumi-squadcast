// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

// [Squads](https://support.squadcast.com/docs/squads) are smaller groups of members within Teams. Squads could correspond to groups of people that are responsible for specific projects within a Team.Use this data source to get information about a specific Squad.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := squadcast.LookupSquad(ctx, &squadcast.LookupSquadArgs{
//				Name:   "test",
//				TeamId: "team id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSquad(ctx *pulumi.Context, args *LookupSquadArgs, opts ...pulumi.InvokeOption) (*LookupSquadResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSquadResult
	err := ctx.Invoke("squadcast:index/getSquad:getSquad", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSquad.
type LookupSquadArgs struct {
	// Name of the Squad.
	Name string `pulumi:"name"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

// A collection of values returned by getSquad.
type LookupSquadResult struct {
	// Squad id.
	Id        string   `pulumi:"id"`
	MemberIds []string `pulumi:"memberIds"`
	// Name of the Squad.
	Name string `pulumi:"name"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

func LookupSquadOutput(ctx *pulumi.Context, args LookupSquadOutputArgs, opts ...pulumi.InvokeOption) LookupSquadResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSquadResult, error) {
			args := v.(LookupSquadArgs)
			r, err := LookupSquad(ctx, &args, opts...)
			var s LookupSquadResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSquadResultOutput)
}

// A collection of arguments for invoking getSquad.
type LookupSquadOutputArgs struct {
	// Name of the Squad.
	Name pulumi.StringInput `pulumi:"name"`
	// Team id.
	TeamId pulumi.StringInput `pulumi:"teamId"`
}

func (LookupSquadOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSquadArgs)(nil)).Elem()
}

// A collection of values returned by getSquad.
type LookupSquadResultOutput struct{ *pulumi.OutputState }

func (LookupSquadResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSquadResult)(nil)).Elem()
}

func (o LookupSquadResultOutput) ToLookupSquadResultOutput() LookupSquadResultOutput {
	return o
}

func (o LookupSquadResultOutput) ToLookupSquadResultOutputWithContext(ctx context.Context) LookupSquadResultOutput {
	return o
}

// Squad id.
func (o LookupSquadResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSquadResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSquadResultOutput) MemberIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSquadResult) []string { return v.MemberIds }).(pulumi.StringArrayOutput)
}

// Name of the Squad.
func (o LookupSquadResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSquadResult) string { return v.Name }).(pulumi.StringOutput)
}

// Team id.
func (o LookupSquadResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSquadResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSquadResultOutput{})
}
