// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

// Use this data source to get information about a specific user that you can use for other Squadcast resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: squadcast_user.Test.Email,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("squadcast:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// User email.
	Email string `pulumi:"email"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// Denotes the Permissions / abilities of the user.
	Abilities []string `pulumi:"abilities"`
	// User email.
	Email string `pulumi:"email"`
	// User first name.
	FirstName string `pulumi:"firstName"`
	// User id.
	Id string `pulumi:"id"`
	// Denotes if the user has verified their email or not.
	IsEmailVerified bool `pulumi:"isEmailVerified"`
	// Deprecated, this can be ignored.
	IsOverrideDndEnabled bool `pulumi:"isOverrideDndEnabled"`
	// Denotes if the user has verified their phone number or not.
	IsPhoneVerified bool `pulumi:"isPhoneVerified"`
	// User last name.
	LastName string `pulumi:"lastName"`
	// User name, automatically computed from first name and last name.
	Name string `pulumi:"name"`
	// User Personal Notification Rules.
	NotificationRules []GetUserNotificationRule `pulumi:"notificationRules"`
	// User's personal on-call reminder notification rules.
	OncallReminderRules []GetUserOncallReminderRule `pulumi:"oncallReminderRules"`
	// User phone number.
	Phone string `pulumi:"phone"`
	// User role.
	Role string `pulumi:"role"`
	// User time_zone.
	TimeZone string `pulumi:"timeZone"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// User email.
	Email pulumi.StringInput `pulumi:"email"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// Denotes the Permissions / abilities of the user.
func (o LookupUserResultOutput) Abilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.Abilities }).(pulumi.StringArrayOutput)
}

// User email.
func (o LookupUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// User first name.
func (o LookupUserResultOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.FirstName }).(pulumi.StringOutput)
}

// User id.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// Denotes if the user has verified their email or not.
func (o LookupUserResultOutput) IsEmailVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsEmailVerified }).(pulumi.BoolOutput)
}

// Deprecated, this can be ignored.
func (o LookupUserResultOutput) IsOverrideDndEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsOverrideDndEnabled }).(pulumi.BoolOutput)
}

// Denotes if the user has verified their phone number or not.
func (o LookupUserResultOutput) IsPhoneVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsPhoneVerified }).(pulumi.BoolOutput)
}

// User last name.
func (o LookupUserResultOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.LastName }).(pulumi.StringOutput)
}

// User name, automatically computed from first name and last name.
func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// User Personal Notification Rules.
func (o LookupUserResultOutput) NotificationRules() GetUserNotificationRuleArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserNotificationRule { return v.NotificationRules }).(GetUserNotificationRuleArrayOutput)
}

// User's personal on-call reminder notification rules.
func (o LookupUserResultOutput) OncallReminderRules() GetUserOncallReminderRuleArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserOncallReminderRule { return v.OncallReminderRules }).(GetUserOncallReminderRuleArrayOutput)
}

// User phone number.
func (o LookupUserResultOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Phone }).(pulumi.StringOutput)
}

// User role.
func (o LookupUserResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Role }).(pulumi.StringOutput)
}

// User time_zone.
func (o LookupUserResultOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.TimeZone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
