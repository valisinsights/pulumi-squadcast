// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

// [Deduplication rules](https://support.squadcast.com/docs/de-duplication-rules) can help you reduce alert noise by organising and grouping alerts. This also provides easy access to similar alerts when needed. When these rules evaluate to true for an incoming incident, alerts will get deduplicated.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example team name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleService, err := squadcast.LookupService(ctx, &squadcast.LookupServiceArgs{
//				Name:   "example service name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewDeduplicationRules(ctx, "exampleDeduplicationRules", &squadcast.DeduplicationRulesArgs{
//				TeamId:    *pulumi.String(exampleTeam.Id),
//				ServiceId: *pulumi.String(exampleService.Id),
//				Rules: squadcast.DeduplicationRulesRuleArray{
//					&squadcast.DeduplicationRulesRuleArgs{
//						IsBasic:     pulumi.Bool(false),
//						Description: pulumi.String("not basic"),
//						Expression:  pulumi.String("payload[\"event_id\"] == 40"),
//					},
//					&squadcast.DeduplicationRulesRuleArgs{
//						IsBasic:     pulumi.Bool(true),
//						Description: pulumi.String("basic"),
//						BasicExpressions: squadcast.DeduplicationRulesRuleBasicExpressionArray{
//							&squadcast.DeduplicationRulesRuleBasicExpressionArgs{
//								Lhs: pulumi.String("payload[\"foo\"]"),
//								Op:  pulumi.String("is"),
//								Rhs: pulumi.String("bar"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
//
// ```sh
//
//	$ pulumi import squadcast:index/deduplicationRules:DeduplicationRules test_resource_name 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
//
// ```
type DeduplicationRules struct {
	pulumi.CustomResourceState

	Rules DeduplicationRulesRuleArrayOutput `pulumi:"rules"`
	// Service id.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewDeduplicationRules registers a new resource with the given unique name, arguments, and options.
func NewDeduplicationRules(ctx *pulumi.Context,
	name string, args *DeduplicationRulesArgs, opts ...pulumi.ResourceOption) (*DeduplicationRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeduplicationRules
	err := ctx.RegisterResource("squadcast:index/deduplicationRules:DeduplicationRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeduplicationRules gets an existing DeduplicationRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeduplicationRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeduplicationRulesState, opts ...pulumi.ResourceOption) (*DeduplicationRules, error) {
	var resource DeduplicationRules
	err := ctx.ReadResource("squadcast:index/deduplicationRules:DeduplicationRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeduplicationRules resources.
type deduplicationRulesState struct {
	Rules []DeduplicationRulesRule `pulumi:"rules"`
	// Service id.
	ServiceId *string `pulumi:"serviceId"`
	// Team id.
	TeamId *string `pulumi:"teamId"`
}

type DeduplicationRulesState struct {
	Rules DeduplicationRulesRuleArrayInput
	// Service id.
	ServiceId pulumi.StringPtrInput
	// Team id.
	TeamId pulumi.StringPtrInput
}

func (DeduplicationRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*deduplicationRulesState)(nil)).Elem()
}

type deduplicationRulesArgs struct {
	Rules []DeduplicationRulesRule `pulumi:"rules"`
	// Service id.
	ServiceId string `pulumi:"serviceId"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a DeduplicationRules resource.
type DeduplicationRulesArgs struct {
	Rules DeduplicationRulesRuleArrayInput
	// Service id.
	ServiceId pulumi.StringInput
	// Team id.
	TeamId pulumi.StringInput
}

func (DeduplicationRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deduplicationRulesArgs)(nil)).Elem()
}

type DeduplicationRulesInput interface {
	pulumi.Input

	ToDeduplicationRulesOutput() DeduplicationRulesOutput
	ToDeduplicationRulesOutputWithContext(ctx context.Context) DeduplicationRulesOutput
}

func (*DeduplicationRules) ElementType() reflect.Type {
	return reflect.TypeOf((**DeduplicationRules)(nil)).Elem()
}

func (i *DeduplicationRules) ToDeduplicationRulesOutput() DeduplicationRulesOutput {
	return i.ToDeduplicationRulesOutputWithContext(context.Background())
}

func (i *DeduplicationRules) ToDeduplicationRulesOutputWithContext(ctx context.Context) DeduplicationRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeduplicationRulesOutput)
}

// DeduplicationRulesArrayInput is an input type that accepts DeduplicationRulesArray and DeduplicationRulesArrayOutput values.
// You can construct a concrete instance of `DeduplicationRulesArrayInput` via:
//
//	DeduplicationRulesArray{ DeduplicationRulesArgs{...} }
type DeduplicationRulesArrayInput interface {
	pulumi.Input

	ToDeduplicationRulesArrayOutput() DeduplicationRulesArrayOutput
	ToDeduplicationRulesArrayOutputWithContext(context.Context) DeduplicationRulesArrayOutput
}

type DeduplicationRulesArray []DeduplicationRulesInput

func (DeduplicationRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeduplicationRules)(nil)).Elem()
}

func (i DeduplicationRulesArray) ToDeduplicationRulesArrayOutput() DeduplicationRulesArrayOutput {
	return i.ToDeduplicationRulesArrayOutputWithContext(context.Background())
}

func (i DeduplicationRulesArray) ToDeduplicationRulesArrayOutputWithContext(ctx context.Context) DeduplicationRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeduplicationRulesArrayOutput)
}

// DeduplicationRulesMapInput is an input type that accepts DeduplicationRulesMap and DeduplicationRulesMapOutput values.
// You can construct a concrete instance of `DeduplicationRulesMapInput` via:
//
//	DeduplicationRulesMap{ "key": DeduplicationRulesArgs{...} }
type DeduplicationRulesMapInput interface {
	pulumi.Input

	ToDeduplicationRulesMapOutput() DeduplicationRulesMapOutput
	ToDeduplicationRulesMapOutputWithContext(context.Context) DeduplicationRulesMapOutput
}

type DeduplicationRulesMap map[string]DeduplicationRulesInput

func (DeduplicationRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeduplicationRules)(nil)).Elem()
}

func (i DeduplicationRulesMap) ToDeduplicationRulesMapOutput() DeduplicationRulesMapOutput {
	return i.ToDeduplicationRulesMapOutputWithContext(context.Background())
}

func (i DeduplicationRulesMap) ToDeduplicationRulesMapOutputWithContext(ctx context.Context) DeduplicationRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeduplicationRulesMapOutput)
}

type DeduplicationRulesOutput struct{ *pulumi.OutputState }

func (DeduplicationRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeduplicationRules)(nil)).Elem()
}

func (o DeduplicationRulesOutput) ToDeduplicationRulesOutput() DeduplicationRulesOutput {
	return o
}

func (o DeduplicationRulesOutput) ToDeduplicationRulesOutputWithContext(ctx context.Context) DeduplicationRulesOutput {
	return o
}

func (o DeduplicationRulesOutput) Rules() DeduplicationRulesRuleArrayOutput {
	return o.ApplyT(func(v *DeduplicationRules) DeduplicationRulesRuleArrayOutput { return v.Rules }).(DeduplicationRulesRuleArrayOutput)
}

// Service id.
func (o DeduplicationRulesOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeduplicationRules) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Team id.
func (o DeduplicationRulesOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeduplicationRules) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type DeduplicationRulesArrayOutput struct{ *pulumi.OutputState }

func (DeduplicationRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeduplicationRules)(nil)).Elem()
}

func (o DeduplicationRulesArrayOutput) ToDeduplicationRulesArrayOutput() DeduplicationRulesArrayOutput {
	return o
}

func (o DeduplicationRulesArrayOutput) ToDeduplicationRulesArrayOutputWithContext(ctx context.Context) DeduplicationRulesArrayOutput {
	return o
}

func (o DeduplicationRulesArrayOutput) Index(i pulumi.IntInput) DeduplicationRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeduplicationRules {
		return vs[0].([]*DeduplicationRules)[vs[1].(int)]
	}).(DeduplicationRulesOutput)
}

type DeduplicationRulesMapOutput struct{ *pulumi.OutputState }

func (DeduplicationRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeduplicationRules)(nil)).Elem()
}

func (o DeduplicationRulesMapOutput) ToDeduplicationRulesMapOutput() DeduplicationRulesMapOutput {
	return o
}

func (o DeduplicationRulesMapOutput) ToDeduplicationRulesMapOutputWithContext(ctx context.Context) DeduplicationRulesMapOutput {
	return o
}

func (o DeduplicationRulesMapOutput) MapIndex(k pulumi.StringInput) DeduplicationRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeduplicationRules {
		return vs[0].(map[string]*DeduplicationRules)[vs[1].(string)]
	}).(DeduplicationRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeduplicationRulesInput)(nil)).Elem(), &DeduplicationRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeduplicationRulesArrayInput)(nil)).Elem(), DeduplicationRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeduplicationRulesMapInput)(nil)).Elem(), DeduplicationRulesMap{})
	pulumi.RegisterOutputType(DeduplicationRulesOutput{})
	pulumi.RegisterOutputType(DeduplicationRulesArrayOutput{})
	pulumi.RegisterOutputType(DeduplicationRulesMapOutput{})
}
