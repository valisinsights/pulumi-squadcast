// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast/internal"
)

// [Squadcast Services](https://support.squadcast.com/docs/adding-a-service-1) are the core components of your infrastructure/application for which alerts are generated. Services in Squadcast represent specific systems, applications, components, products, or teams for which an incident is created. To check out some of the best practices on creating Services in Squadcast, refer to the guide [here](https://www.squadcast.com/blog/how-to-configure-services-in-squadcast-best-practices-to-reduce-mttr).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/valisinsights/pulumi-squadcast/sdk/go/squadcast"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUser, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "test@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example team name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleEscalaionPolicy, err := squadcast.LookupEscalationPolicy(ctx, &squadcast.LookupEscalationPolicyArgs{
//				Name:   "example escalation policy name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewService(ctx, "exampleService", &squadcast.ServiceArgs{
//				TeamId:             *pulumi.String(exampleTeam.Id),
//				EscalationPolicyId: *pulumi.String(exampleEscalaionPolicy.Id),
//				EmailPrefix:        pulumi.String("example-service-email"),
//				Maintainer: &squadcast.ServiceMaintainerArgs{
//					Id:   *pulumi.String(exampleUser.Id),
//					Type: pulumi.String("user"),
//				},
//				Tags: squadcast.ServiceTagArray{
//					&squadcast.ServiceTagArgs{
//						Key:   pulumi.String("testkey"),
//						Value: pulumi.String("testval"),
//					},
//					&squadcast.ServiceTagArgs{
//						Key:   pulumi.String("testkey2"),
//						Value: pulumi.String("testval2"),
//					},
//				},
//				AlertSources: pulumi.StringArray{
//					pulumi.String("example-alert-source"),
//				},
//				SlackChannelId: pulumi.String("D0KAQDEPSH"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
//
// ```sh
//
//	$ pulumi import squadcast:index/service:Service test_parent 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
//
// ```
type Service struct {
	pulumi.CustomResourceState

	// Active alert source endpoints.
	ActiveAlertSourceEndpoints pulumi.StringMapOutput `pulumi:"activeAlertSourceEndpoints"`
	// All available alert source endpoints.
	AlertSourceEndpoints pulumi.StringMapOutput `pulumi:"alertSourceEndpoints"`
	// List of active alert source names.
	AlertSources pulumi.StringArrayOutput `pulumi:"alertSources"`
	// Unique API key of this service.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// Dependencies (serviceIds)
	Dependencies pulumi.StringArrayOutput `pulumi:"dependencies"`
	// Detailed description about this service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Email.
	Email pulumi.StringOutput `pulumi:"email"`
	// Email prefix.
	EmailPrefix pulumi.StringOutput `pulumi:"emailPrefix"`
	// Escalation policy id.
	EscalationPolicyId pulumi.StringOutput `pulumi:"escalationPolicyId"`
	// Service owner.
	Maintainer ServiceMaintainerOutput `pulumi:"maintainer"`
	// Name of the Service.
	Name pulumi.StringOutput `pulumi:"name"`
	// Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
	SlackChannelId pulumi.StringOutput `pulumi:"slackChannelId"`
	// Service tags.
	Tags ServiceTagArrayOutput `pulumi:"tags"`
	// Team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EmailPrefix == nil {
		return nil, errors.New("invalid value for required argument 'EmailPrefix'")
	}
	if args.EscalationPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'EscalationPolicyId'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("squadcast:index/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("squadcast:index/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// Active alert source endpoints.
	ActiveAlertSourceEndpoints map[string]string `pulumi:"activeAlertSourceEndpoints"`
	// All available alert source endpoints.
	AlertSourceEndpoints map[string]string `pulumi:"alertSourceEndpoints"`
	// List of active alert source names.
	AlertSources []string `pulumi:"alertSources"`
	// Unique API key of this service.
	ApiKey *string `pulumi:"apiKey"`
	// Dependencies (serviceIds)
	Dependencies []string `pulumi:"dependencies"`
	// Detailed description about this service.
	Description *string `pulumi:"description"`
	// Email.
	Email *string `pulumi:"email"`
	// Email prefix.
	EmailPrefix *string `pulumi:"emailPrefix"`
	// Escalation policy id.
	EscalationPolicyId *string `pulumi:"escalationPolicyId"`
	// Service owner.
	Maintainer *ServiceMaintainer `pulumi:"maintainer"`
	// Name of the Service.
	Name *string `pulumi:"name"`
	// Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
	SlackChannelId *string `pulumi:"slackChannelId"`
	// Service tags.
	Tags []ServiceTag `pulumi:"tags"`
	// Team id.
	TeamId *string `pulumi:"teamId"`
}

type ServiceState struct {
	// Active alert source endpoints.
	ActiveAlertSourceEndpoints pulumi.StringMapInput
	// All available alert source endpoints.
	AlertSourceEndpoints pulumi.StringMapInput
	// List of active alert source names.
	AlertSources pulumi.StringArrayInput
	// Unique API key of this service.
	ApiKey pulumi.StringPtrInput
	// Dependencies (serviceIds)
	Dependencies pulumi.StringArrayInput
	// Detailed description about this service.
	Description pulumi.StringPtrInput
	// Email.
	Email pulumi.StringPtrInput
	// Email prefix.
	EmailPrefix pulumi.StringPtrInput
	// Escalation policy id.
	EscalationPolicyId pulumi.StringPtrInput
	// Service owner.
	Maintainer ServiceMaintainerPtrInput
	// Name of the Service.
	Name pulumi.StringPtrInput
	// Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
	SlackChannelId pulumi.StringPtrInput
	// Service tags.
	Tags ServiceTagArrayInput
	// Team id.
	TeamId pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// List of active alert source names.
	AlertSources []string `pulumi:"alertSources"`
	// Dependencies (serviceIds)
	Dependencies []string `pulumi:"dependencies"`
	// Detailed description about this service.
	Description *string `pulumi:"description"`
	// Email prefix.
	EmailPrefix string `pulumi:"emailPrefix"`
	// Escalation policy id.
	EscalationPolicyId string `pulumi:"escalationPolicyId"`
	// Service owner.
	Maintainer *ServiceMaintainer `pulumi:"maintainer"`
	// Name of the Service.
	Name *string `pulumi:"name"`
	// Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
	SlackChannelId *string `pulumi:"slackChannelId"`
	// Service tags.
	Tags []ServiceTag `pulumi:"tags"`
	// Team id.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// List of active alert source names.
	AlertSources pulumi.StringArrayInput
	// Dependencies (serviceIds)
	Dependencies pulumi.StringArrayInput
	// Detailed description about this service.
	Description pulumi.StringPtrInput
	// Email prefix.
	EmailPrefix pulumi.StringInput
	// Escalation policy id.
	EscalationPolicyId pulumi.StringInput
	// Service owner.
	Maintainer ServiceMaintainerPtrInput
	// Name of the Service.
	Name pulumi.StringPtrInput
	// Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
	SlackChannelId pulumi.StringPtrInput
	// Service tags.
	Tags ServiceTagArrayInput
	// Team id.
	TeamId pulumi.StringInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// Active alert source endpoints.
func (o ServiceOutput) ActiveAlertSourceEndpoints() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.ActiveAlertSourceEndpoints }).(pulumi.StringMapOutput)
}

// All available alert source endpoints.
func (o ServiceOutput) AlertSourceEndpoints() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.AlertSourceEndpoints }).(pulumi.StringMapOutput)
}

// List of active alert source names.
func (o ServiceOutput) AlertSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.AlertSources }).(pulumi.StringArrayOutput)
}

// Unique API key of this service.
func (o ServiceOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// Dependencies (serviceIds)
func (o ServiceOutput) Dependencies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.Dependencies }).(pulumi.StringArrayOutput)
}

// Detailed description about this service.
func (o ServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Email.
func (o ServiceOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Email prefix.
func (o ServiceOutput) EmailPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.EmailPrefix }).(pulumi.StringOutput)
}

// Escalation policy id.
func (o ServiceOutput) EscalationPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.EscalationPolicyId }).(pulumi.StringOutput)
}

// Service owner.
func (o ServiceOutput) Maintainer() ServiceMaintainerOutput {
	return o.ApplyT(func(v *Service) ServiceMaintainerOutput { return v.Maintainer }).(ServiceMaintainerOutput)
}

// Name of the Service.
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
func (o ServiceOutput) SlackChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.SlackChannelId }).(pulumi.StringOutput)
}

// Service tags.
func (o ServiceOutput) Tags() ServiceTagArrayOutput {
	return o.ApplyT(func(v *Service) ServiceTagArrayOutput { return v.Tags }).(ServiceTagArrayOutput)
}

// Team id.
func (o ServiceOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
