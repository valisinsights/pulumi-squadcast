# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EscalationPolicyArgs', 'EscalationPolicy']

@pulumi.input_type
class EscalationPolicyArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['EscalationPolicyRuleArgs']]],
                 team_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input['EscalationPolicyEntityOwnerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repeat: Optional[pulumi.Input['EscalationPolicyRepeatArgs']] = None):
        """
        The set of arguments for constructing a EscalationPolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input['EscalationPolicyRuleArgs']]] rules: Rules will have the details of who to notify and when to notify and how to notify them.
        :param pulumi.Input[str] team_id: Team id.
        :param pulumi.Input[str] description: Detailed description about the Escalation Policy.
        :param pulumi.Input['EscalationPolicyEntityOwnerArgs'] entity_owner: Escalation policy owner.
        :param pulumi.Input[str] name: Name of the Escalation Policy.
        :param pulumi.Input['EscalationPolicyRepeatArgs'] repeat: You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        """
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "team_id", team_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity_owner is not None:
            pulumi.set(__self__, "entity_owner", entity_owner)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['EscalationPolicyRuleArgs']]]:
        """
        Rules will have the details of who to notify and when to notify and how to notify them.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['EscalationPolicyRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Input[str]:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed description about the Escalation Policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="entityOwner")
    def entity_owner(self) -> Optional[pulumi.Input['EscalationPolicyEntityOwnerArgs']]:
        """
        Escalation policy owner.
        """
        return pulumi.get(self, "entity_owner")

    @entity_owner.setter
    def entity_owner(self, value: Optional[pulumi.Input['EscalationPolicyEntityOwnerArgs']]):
        pulumi.set(self, "entity_owner", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Escalation Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def repeat(self) -> Optional[pulumi.Input['EscalationPolicyRepeatArgs']]:
        """
        You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        """
        return pulumi.get(self, "repeat")

    @repeat.setter
    def repeat(self, value: Optional[pulumi.Input['EscalationPolicyRepeatArgs']]):
        pulumi.set(self, "repeat", value)


@pulumi.input_type
class _EscalationPolicyState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input['EscalationPolicyEntityOwnerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repeat: Optional[pulumi.Input['EscalationPolicyRepeatArgs']] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['EscalationPolicyRuleArgs']]]] = None,
                 team_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EscalationPolicy resources.
        :param pulumi.Input[str] description: Detailed description about the Escalation Policy.
        :param pulumi.Input['EscalationPolicyEntityOwnerArgs'] entity_owner: Escalation policy owner.
        :param pulumi.Input[str] name: Name of the Escalation Policy.
        :param pulumi.Input['EscalationPolicyRepeatArgs'] repeat: You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        :param pulumi.Input[Sequence[pulumi.Input['EscalationPolicyRuleArgs']]] rules: Rules will have the details of who to notify and when to notify and how to notify them.
        :param pulumi.Input[str] team_id: Team id.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity_owner is not None:
            pulumi.set(__self__, "entity_owner", entity_owner)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed description about the Escalation Policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="entityOwner")
    def entity_owner(self) -> Optional[pulumi.Input['EscalationPolicyEntityOwnerArgs']]:
        """
        Escalation policy owner.
        """
        return pulumi.get(self, "entity_owner")

    @entity_owner.setter
    def entity_owner(self, value: Optional[pulumi.Input['EscalationPolicyEntityOwnerArgs']]):
        pulumi.set(self, "entity_owner", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Escalation Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def repeat(self) -> Optional[pulumi.Input['EscalationPolicyRepeatArgs']]:
        """
        You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        """
        return pulumi.get(self, "repeat")

    @repeat.setter
    def repeat(self, value: Optional[pulumi.Input['EscalationPolicyRepeatArgs']]):
        pulumi.set(self, "repeat", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EscalationPolicyRuleArgs']]]]:
        """
        Rules will have the details of who to notify and when to notify and how to notify them.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EscalationPolicyRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)


class EscalationPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input[pulumi.InputType['EscalationPolicyEntityOwnerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repeat: Optional[pulumi.Input[pulumi.InputType['EscalationPolicyRepeatArgs']]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscalationPolicyRuleArgs']]]]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        [Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="example team name")
        example_user = squadcast.get_user(email="test@example.com")
        example_squad = squadcast.get_squad(name="example squad name",
            team_id=example_team.id)
        example_schedule_v2 = squadcast.get_schedule_v2(name="example schedule name",
            team_id=example_team.id)
        example_escalaion_policy = squadcast.EscalationPolicy("exampleEscalaionPolicy",
            description="It's an amazing policy",
            team_id=example_team.id,
            rules=[
                squadcast.EscalationPolicyRuleArgs(
                    delay_minutes=0,
                    targets=[
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_user.id,
                            type="user",
                        ),
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_schedule_v2.id,
                            type="schedulev2",
                        ),
                    ],
                ),
                squadcast.EscalationPolicyRuleArgs(
                    delay_minutes=5,
                    targets=[
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_user.id,
                            type="user",
                        ),
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_squad.id,
                            type="squad",
                        ),
                    ],
                    notification_channels=["Phone"],
                    repeat=squadcast.EscalationPolicyRuleRepeatArgs(
                        times=1,
                        delay_minutes=5,
                    ),
                ),
                squadcast.EscalationPolicyRuleArgs(
                    delay_minutes=10,
                    targets=[
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_squad.id,
                            type="squad",
                        ),
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_schedule_v2.id,
                            type="schedulev2",
                        ),
                    ],
                    round_robin=squadcast.EscalationPolicyRuleRoundRobinArgs(
                        enabled=True,
                        rotation=squadcast.EscalationPolicyRuleRoundRobinRotationArgs(
                            enabled=True,
                            delay_minutes=1,
                        ),
                    ),
                ),
            ],
            repeat=squadcast.EscalationPolicyRepeatArgs(
                times=2,
                delay_minutes=10,
            ),
            entity_owner=squadcast.EscalationPolicyEntityOwnerArgs(
                id=example_user.id,
                type="user",
            ))
        ```

        ## Import

        teamID:escalationPolicyID Use 'Get All Teams' and 'Get All Escalation Policies' APIs to get the id of the team and escalation policy name respectively

        ```sh
         $ pulumi import squadcast:index/escalationPolicy:EscalationPolicy test "62d2fe23a57381088224d726:Example Escalation Policy"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Detailed description about the Escalation Policy.
        :param pulumi.Input[pulumi.InputType['EscalationPolicyEntityOwnerArgs']] entity_owner: Escalation policy owner.
        :param pulumi.Input[str] name: Name of the Escalation Policy.
        :param pulumi.Input[pulumi.InputType['EscalationPolicyRepeatArgs']] repeat: You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscalationPolicyRuleArgs']]]] rules: Rules will have the details of who to notify and when to notify and how to notify them.
        :param pulumi.Input[str] team_id: Team id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EscalationPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        [Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="example team name")
        example_user = squadcast.get_user(email="test@example.com")
        example_squad = squadcast.get_squad(name="example squad name",
            team_id=example_team.id)
        example_schedule_v2 = squadcast.get_schedule_v2(name="example schedule name",
            team_id=example_team.id)
        example_escalaion_policy = squadcast.EscalationPolicy("exampleEscalaionPolicy",
            description="It's an amazing policy",
            team_id=example_team.id,
            rules=[
                squadcast.EscalationPolicyRuleArgs(
                    delay_minutes=0,
                    targets=[
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_user.id,
                            type="user",
                        ),
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_schedule_v2.id,
                            type="schedulev2",
                        ),
                    ],
                ),
                squadcast.EscalationPolicyRuleArgs(
                    delay_minutes=5,
                    targets=[
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_user.id,
                            type="user",
                        ),
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_squad.id,
                            type="squad",
                        ),
                    ],
                    notification_channels=["Phone"],
                    repeat=squadcast.EscalationPolicyRuleRepeatArgs(
                        times=1,
                        delay_minutes=5,
                    ),
                ),
                squadcast.EscalationPolicyRuleArgs(
                    delay_minutes=10,
                    targets=[
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_squad.id,
                            type="squad",
                        ),
                        squadcast.EscalationPolicyRuleTargetArgs(
                            id=example_schedule_v2.id,
                            type="schedulev2",
                        ),
                    ],
                    round_robin=squadcast.EscalationPolicyRuleRoundRobinArgs(
                        enabled=True,
                        rotation=squadcast.EscalationPolicyRuleRoundRobinRotationArgs(
                            enabled=True,
                            delay_minutes=1,
                        ),
                    ),
                ),
            ],
            repeat=squadcast.EscalationPolicyRepeatArgs(
                times=2,
                delay_minutes=10,
            ),
            entity_owner=squadcast.EscalationPolicyEntityOwnerArgs(
                id=example_user.id,
                type="user",
            ))
        ```

        ## Import

        teamID:escalationPolicyID Use 'Get All Teams' and 'Get All Escalation Policies' APIs to get the id of the team and escalation policy name respectively

        ```sh
         $ pulumi import squadcast:index/escalationPolicy:EscalationPolicy test "62d2fe23a57381088224d726:Example Escalation Policy"
        ```

        :param str resource_name: The name of the resource.
        :param EscalationPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EscalationPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input[pulumi.InputType['EscalationPolicyEntityOwnerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repeat: Optional[pulumi.Input[pulumi.InputType['EscalationPolicyRepeatArgs']]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscalationPolicyRuleArgs']]]]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EscalationPolicyArgs.__new__(EscalationPolicyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["entity_owner"] = entity_owner
            __props__.__dict__["name"] = name
            __props__.__dict__["repeat"] = repeat
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
            if team_id is None and not opts.urn:
                raise TypeError("Missing required property 'team_id'")
            __props__.__dict__["team_id"] = team_id
        super(EscalationPolicy, __self__).__init__(
            'squadcast:index/escalationPolicy:EscalationPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            entity_owner: Optional[pulumi.Input[pulumi.InputType['EscalationPolicyEntityOwnerArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            repeat: Optional[pulumi.Input[pulumi.InputType['EscalationPolicyRepeatArgs']]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscalationPolicyRuleArgs']]]]] = None,
            team_id: Optional[pulumi.Input[str]] = None) -> 'EscalationPolicy':
        """
        Get an existing EscalationPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Detailed description about the Escalation Policy.
        :param pulumi.Input[pulumi.InputType['EscalationPolicyEntityOwnerArgs']] entity_owner: Escalation policy owner.
        :param pulumi.Input[str] name: Name of the Escalation Policy.
        :param pulumi.Input[pulumi.InputType['EscalationPolicyRepeatArgs']] repeat: You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscalationPolicyRuleArgs']]]] rules: Rules will have the details of who to notify and when to notify and how to notify them.
        :param pulumi.Input[str] team_id: Team id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EscalationPolicyState.__new__(_EscalationPolicyState)

        __props__.__dict__["description"] = description
        __props__.__dict__["entity_owner"] = entity_owner
        __props__.__dict__["name"] = name
        __props__.__dict__["repeat"] = repeat
        __props__.__dict__["rules"] = rules
        __props__.__dict__["team_id"] = team_id
        return EscalationPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Detailed description about the Escalation Policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entityOwner")
    def entity_owner(self) -> pulumi.Output['outputs.EscalationPolicyEntityOwner']:
        """
        Escalation policy owner.
        """
        return pulumi.get(self, "entity_owner")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Escalation Policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def repeat(self) -> pulumi.Output[Optional['outputs.EscalationPolicyRepeat']]:
        """
        You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        """
        return pulumi.get(self, "repeat")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.EscalationPolicyRule']]:
        """
        Rules will have the details of who to notify and when to notify and how to notify them.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[str]:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

