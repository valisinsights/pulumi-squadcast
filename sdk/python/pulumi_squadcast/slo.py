# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SLOArgs', 'SLO']

@pulumi.input_type
class SLOArgs:
    def __init__(__self__, *,
                 service_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 slis: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target_slo: pulumi.Input[float],
                 team_id: pulumi.Input[str],
                 time_interval_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 duration_in_days: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input['SLOEntityOwnerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify: Optional[pulumi.Input['SLONotifyArgs']] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['SLORuleArgs']]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SLO resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] slis: List of indentified SLIs for the SLO
        :param pulumi.Input[float] target_slo: The target SLO for the time period.
        :param pulumi.Input[str] team_id: The team which SLO resource belongs to
        :param pulumi.Input[str] time_interval_type: Type of the SLO. Values can either be "rolling" or "fixed"
        :param pulumi.Input[str] description: Description of the SLO.
        :param pulumi.Input[int] duration_in_days: Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        :param pulumi.Input[str] end_time: SLO end time. Required only when SLO time interval type set to "fixed"
        :param pulumi.Input['SLOEntityOwnerArgs'] entity_owner: SLO owner.
        :param pulumi.Input[str] name: The name of the SLO.
        :param pulumi.Input['SLONotifyArgs'] notify: Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        :param pulumi.Input[Sequence[pulumi.Input['SLORuleArgs']]] rules: SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        :param pulumi.Input[str] start_time: SLO start time. Required only when SLO time interval type set to "fixed"
        """
        pulumi.set(__self__, "service_ids", service_ids)
        pulumi.set(__self__, "slis", slis)
        pulumi.set(__self__, "target_slo", target_slo)
        pulumi.set(__self__, "team_id", team_id)
        pulumi.set(__self__, "time_interval_type", time_interval_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if duration_in_days is not None:
            pulumi.set(__self__, "duration_in_days", duration_in_days)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if entity_owner is not None:
            pulumi.set(__self__, "entity_owner", entity_owner)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify is not None:
            pulumi.set(__self__, "notify", notify)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter
    def slis(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of indentified SLIs for the SLO
        """
        return pulumi.get(self, "slis")

    @slis.setter
    def slis(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "slis", value)

    @property
    @pulumi.getter(name="targetSlo")
    def target_slo(self) -> pulumi.Input[float]:
        """
        The target SLO for the time period.
        """
        return pulumi.get(self, "target_slo")

    @target_slo.setter
    def target_slo(self, value: pulumi.Input[float]):
        pulumi.set(self, "target_slo", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Input[str]:
        """
        The team which SLO resource belongs to
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="timeIntervalType")
    def time_interval_type(self) -> pulumi.Input[str]:
        """
        Type of the SLO. Values can either be "rolling" or "fixed"
        """
        return pulumi.get(self, "time_interval_type")

    @time_interval_type.setter
    def time_interval_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_interval_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the SLO.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        """
        return pulumi.get(self, "duration_in_days")

    @duration_in_days.setter
    def duration_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_days", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        SLO end time. Required only when SLO time interval type set to "fixed"
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="entityOwner")
    def entity_owner(self) -> Optional[pulumi.Input['SLOEntityOwnerArgs']]:
        """
        SLO owner.
        """
        return pulumi.get(self, "entity_owner")

    @entity_owner.setter
    def entity_owner(self, value: Optional[pulumi.Input['SLOEntityOwnerArgs']]):
        pulumi.set(self, "entity_owner", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SLO.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notify(self) -> Optional[pulumi.Input['SLONotifyArgs']]:
        """
        Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        """
        return pulumi.get(self, "notify")

    @notify.setter
    def notify(self, value: Optional[pulumi.Input['SLONotifyArgs']]):
        pulumi.set(self, "notify", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SLORuleArgs']]]]:
        """
        SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SLORuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        SLO start time. Required only when SLO time interval type set to "fixed"
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class _SLOState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 duration_in_days: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input['SLOEntityOwnerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify: Optional[pulumi.Input['SLONotifyArgs']] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['SLORuleArgs']]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slis: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 target_slo: Optional[pulumi.Input[float]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 time_interval_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SLO resources.
        :param pulumi.Input[str] description: Description of the SLO.
        :param pulumi.Input[int] duration_in_days: Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        :param pulumi.Input[str] end_time: SLO end time. Required only when SLO time interval type set to "fixed"
        :param pulumi.Input['SLOEntityOwnerArgs'] entity_owner: SLO owner.
        :param pulumi.Input[str] name: The name of the SLO.
        :param pulumi.Input['SLONotifyArgs'] notify: Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        :param pulumi.Input[Sequence[pulumi.Input['SLORuleArgs']]] rules: SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] slis: List of indentified SLIs for the SLO
        :param pulumi.Input[str] start_time: SLO start time. Required only when SLO time interval type set to "fixed"
        :param pulumi.Input[float] target_slo: The target SLO for the time period.
        :param pulumi.Input[str] team_id: The team which SLO resource belongs to
        :param pulumi.Input[str] time_interval_type: Type of the SLO. Values can either be "rolling" or "fixed"
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if duration_in_days is not None:
            pulumi.set(__self__, "duration_in_days", duration_in_days)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if entity_owner is not None:
            pulumi.set(__self__, "entity_owner", entity_owner)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify is not None:
            pulumi.set(__self__, "notify", notify)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if slis is not None:
            pulumi.set(__self__, "slis", slis)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if target_slo is not None:
            pulumi.set(__self__, "target_slo", target_slo)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if time_interval_type is not None:
            pulumi.set(__self__, "time_interval_type", time_interval_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the SLO.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        """
        return pulumi.get(self, "duration_in_days")

    @duration_in_days.setter
    def duration_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_days", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        SLO end time. Required only when SLO time interval type set to "fixed"
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="entityOwner")
    def entity_owner(self) -> Optional[pulumi.Input['SLOEntityOwnerArgs']]:
        """
        SLO owner.
        """
        return pulumi.get(self, "entity_owner")

    @entity_owner.setter
    def entity_owner(self, value: Optional[pulumi.Input['SLOEntityOwnerArgs']]):
        pulumi.set(self, "entity_owner", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SLO.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notify(self) -> Optional[pulumi.Input['SLONotifyArgs']]:
        """
        Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        """
        return pulumi.get(self, "notify")

    @notify.setter
    def notify(self, value: Optional[pulumi.Input['SLONotifyArgs']]):
        pulumi.set(self, "notify", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SLORuleArgs']]]]:
        """
        SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SLORuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter
    def slis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of indentified SLIs for the SLO
        """
        return pulumi.get(self, "slis")

    @slis.setter
    def slis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "slis", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        SLO start time. Required only when SLO time interval type set to "fixed"
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="targetSlo")
    def target_slo(self) -> Optional[pulumi.Input[float]]:
        """
        The target SLO for the time period.
        """
        return pulumi.get(self, "target_slo")

    @target_slo.setter
    def target_slo(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "target_slo", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        """
        The team which SLO resource belongs to
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="timeIntervalType")
    def time_interval_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the SLO. Values can either be "rolling" or "fixed"
        """
        return pulumi.get(self, "time_interval_type")

    @time_interval_type.setter
    def time_interval_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_interval_type", value)


class SLO(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 duration_in_days: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input[pulumi.InputType['SLOEntityOwnerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify: Optional[pulumi.Input[pulumi.InputType['SLONotifyArgs']]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SLORuleArgs']]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slis: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 target_slo: Optional[pulumi.Input[float]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 time_interval_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `SLO` manages an SLO.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="example team name")
        example_user = squadcast.get_user(email="test@example.com")
        example_service = squadcast.get_service(name="example service name",
            team_id=example_team.id)
        example_slo = squadcast.SLO("exampleSlo",
            team_id=example_team.id,
            description="Slo for checkout flow",
            target_slo=99.99,
            service_ids=[example_service.id],
            slis=[
                "latency",
                "high-err-rate",
            ],
            time_interval_type="rolling",
            duration_in_days=7,
            rules=[
                squadcast.SLORuleArgs(
                    name="breached_error_budget",
                ),
                squadcast.SLORuleArgs(
                    name="remaining_error_budget",
                    threshold=11,
                ),
                squadcast.SLORuleArgs(
                    name="unhealthy_slo",
                    threshold=1,
                ),
            ],
            notify=squadcast.SLONotifyArgs(
                user_ids=[example_user.id],
            ),
            entity_owner=squadcast.SLOEntityOwnerArgs(
                id=example_user.id,
                type="user",
            ))
        ```

        ## Import

        teamID:sloID Use 'Get All Teams' and 'Get All Slos' APIs to get the id of the team and slo respectively

        ```sh
         $ pulumi import squadcast:index/sLO:SLO test 61443b953ffd52818bf1617a:1023
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the SLO.
        :param pulumi.Input[int] duration_in_days: Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        :param pulumi.Input[str] end_time: SLO end time. Required only when SLO time interval type set to "fixed"
        :param pulumi.Input[pulumi.InputType['SLOEntityOwnerArgs']] entity_owner: SLO owner.
        :param pulumi.Input[str] name: The name of the SLO.
        :param pulumi.Input[pulumi.InputType['SLONotifyArgs']] notify: Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SLORuleArgs']]]] rules: SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] slis: List of indentified SLIs for the SLO
        :param pulumi.Input[str] start_time: SLO start time. Required only when SLO time interval type set to "fixed"
        :param pulumi.Input[float] target_slo: The target SLO for the time period.
        :param pulumi.Input[str] team_id: The team which SLO resource belongs to
        :param pulumi.Input[str] time_interval_type: Type of the SLO. Values can either be "rolling" or "fixed"
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SLOArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `SLO` manages an SLO.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="example team name")
        example_user = squadcast.get_user(email="test@example.com")
        example_service = squadcast.get_service(name="example service name",
            team_id=example_team.id)
        example_slo = squadcast.SLO("exampleSlo",
            team_id=example_team.id,
            description="Slo for checkout flow",
            target_slo=99.99,
            service_ids=[example_service.id],
            slis=[
                "latency",
                "high-err-rate",
            ],
            time_interval_type="rolling",
            duration_in_days=7,
            rules=[
                squadcast.SLORuleArgs(
                    name="breached_error_budget",
                ),
                squadcast.SLORuleArgs(
                    name="remaining_error_budget",
                    threshold=11,
                ),
                squadcast.SLORuleArgs(
                    name="unhealthy_slo",
                    threshold=1,
                ),
            ],
            notify=squadcast.SLONotifyArgs(
                user_ids=[example_user.id],
            ),
            entity_owner=squadcast.SLOEntityOwnerArgs(
                id=example_user.id,
                type="user",
            ))
        ```

        ## Import

        teamID:sloID Use 'Get All Teams' and 'Get All Slos' APIs to get the id of the team and slo respectively

        ```sh
         $ pulumi import squadcast:index/sLO:SLO test 61443b953ffd52818bf1617a:1023
        ```

        :param str resource_name: The name of the resource.
        :param SLOArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SLOArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 duration_in_days: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input[pulumi.InputType['SLOEntityOwnerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify: Optional[pulumi.Input[pulumi.InputType['SLONotifyArgs']]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SLORuleArgs']]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slis: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 target_slo: Optional[pulumi.Input[float]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 time_interval_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SLOArgs.__new__(SLOArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["duration_in_days"] = duration_in_days
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["entity_owner"] = entity_owner
            __props__.__dict__["name"] = name
            __props__.__dict__["notify"] = notify
            __props__.__dict__["rules"] = rules
            if service_ids is None and not opts.urn:
                raise TypeError("Missing required property 'service_ids'")
            __props__.__dict__["service_ids"] = service_ids
            if slis is None and not opts.urn:
                raise TypeError("Missing required property 'slis'")
            __props__.__dict__["slis"] = slis
            __props__.__dict__["start_time"] = start_time
            if target_slo is None and not opts.urn:
                raise TypeError("Missing required property 'target_slo'")
            __props__.__dict__["target_slo"] = target_slo
            if team_id is None and not opts.urn:
                raise TypeError("Missing required property 'team_id'")
            __props__.__dict__["team_id"] = team_id
            if time_interval_type is None and not opts.urn:
                raise TypeError("Missing required property 'time_interval_type'")
            __props__.__dict__["time_interval_type"] = time_interval_type
        super(SLO, __self__).__init__(
            'squadcast:index/sLO:SLO',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            duration_in_days: Optional[pulumi.Input[int]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            entity_owner: Optional[pulumi.Input[pulumi.InputType['SLOEntityOwnerArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notify: Optional[pulumi.Input[pulumi.InputType['SLONotifyArgs']]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SLORuleArgs']]]]] = None,
            service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            slis: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            target_slo: Optional[pulumi.Input[float]] = None,
            team_id: Optional[pulumi.Input[str]] = None,
            time_interval_type: Optional[pulumi.Input[str]] = None) -> 'SLO':
        """
        Get an existing SLO resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the SLO.
        :param pulumi.Input[int] duration_in_days: Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        :param pulumi.Input[str] end_time: SLO end time. Required only when SLO time interval type set to "fixed"
        :param pulumi.Input[pulumi.InputType['SLOEntityOwnerArgs']] entity_owner: SLO owner.
        :param pulumi.Input[str] name: The name of the SLO.
        :param pulumi.Input[pulumi.InputType['SLONotifyArgs']] notify: Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SLORuleArgs']]]] rules: SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] slis: List of indentified SLIs for the SLO
        :param pulumi.Input[str] start_time: SLO start time. Required only when SLO time interval type set to "fixed"
        :param pulumi.Input[float] target_slo: The target SLO for the time period.
        :param pulumi.Input[str] team_id: The team which SLO resource belongs to
        :param pulumi.Input[str] time_interval_type: Type of the SLO. Values can either be "rolling" or "fixed"
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SLOState.__new__(_SLOState)

        __props__.__dict__["description"] = description
        __props__.__dict__["duration_in_days"] = duration_in_days
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["entity_owner"] = entity_owner
        __props__.__dict__["name"] = name
        __props__.__dict__["notify"] = notify
        __props__.__dict__["rules"] = rules
        __props__.__dict__["service_ids"] = service_ids
        __props__.__dict__["slis"] = slis
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["target_slo"] = target_slo
        __props__.__dict__["team_id"] = team_id
        __props__.__dict__["time_interval_type"] = time_interval_type
        return SLO(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the SLO.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> pulumi.Output[int]:
        """
        Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        """
        return pulumi.get(self, "duration_in_days")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        SLO end time. Required only when SLO time interval type set to "fixed"
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="entityOwner")
    def entity_owner(self) -> pulumi.Output['outputs.SLOEntityOwner']:
        """
        SLO owner.
        """
        return pulumi.get(self, "entity_owner")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the SLO.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notify(self) -> pulumi.Output[Optional['outputs.SLONotify']]:
        """
        Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        """
        return pulumi.get(self, "notify")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.SLORule']]]:
        """
        SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        """
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter
    def slis(self) -> pulumi.Output[Sequence[str]]:
        """
        List of indentified SLIs for the SLO
        """
        return pulumi.get(self, "slis")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        SLO start time. Required only when SLO time interval type set to "fixed"
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="targetSlo")
    def target_slo(self) -> pulumi.Output[float]:
        """
        The target SLO for the time period.
        """
        return pulumi.get(self, "target_slo")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[str]:
        """
        The team which SLO resource belongs to
        """
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter(name="timeIntervalType")
    def time_interval_type(self) -> pulumi.Output[str]:
        """
        Type of the SLO. Values can either be "rolling" or "fixed"
        """
        return pulumi.get(self, "time_interval_type")

