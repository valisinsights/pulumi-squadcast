# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetWebformResult',
    'AwaitableGetWebformResult',
    'get_webform',
    'get_webform_output',
]

@pulumi.output_type
class GetWebformResult:
    """
    A collection of values returned by getWebform.
    """
    def __init__(__self__, custom_domain_name=None, description=None, email_ons=None, footer_link=None, footer_text=None, header=None, id=None, input_fields=None, name=None, owners=None, public_url=None, services=None, severities=None, tags=None, team_id=None, title=None):
        if custom_domain_name and not isinstance(custom_domain_name, str):
            raise TypeError("Expected argument 'custom_domain_name' to be a str")
        pulumi.set(__self__, "custom_domain_name", custom_domain_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if email_ons and not isinstance(email_ons, list):
            raise TypeError("Expected argument 'email_ons' to be a list")
        pulumi.set(__self__, "email_ons", email_ons)
        if footer_link and not isinstance(footer_link, str):
            raise TypeError("Expected argument 'footer_link' to be a str")
        pulumi.set(__self__, "footer_link", footer_link)
        if footer_text and not isinstance(footer_text, str):
            raise TypeError("Expected argument 'footer_text' to be a str")
        pulumi.set(__self__, "footer_text", footer_text)
        if header and not isinstance(header, str):
            raise TypeError("Expected argument 'header' to be a str")
        pulumi.set(__self__, "header", header)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if input_fields and not isinstance(input_fields, list):
            raise TypeError("Expected argument 'input_fields' to be a list")
        pulumi.set(__self__, "input_fields", input_fields)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owners and not isinstance(owners, list):
            raise TypeError("Expected argument 'owners' to be a list")
        pulumi.set(__self__, "owners", owners)
        if public_url and not isinstance(public_url, str):
            raise TypeError("Expected argument 'public_url' to be a str")
        pulumi.set(__self__, "public_url", public_url)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)
        if severities and not isinstance(severities, list):
            raise TypeError("Expected argument 'severities' to be a list")
        pulumi.set(__self__, "severities", severities)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        pulumi.set(__self__, "team_id", team_id)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="customDomainName")
    def custom_domain_name(self) -> str:
        """
        Custom domain name (URL).
        """
        return pulumi.get(self, "custom_domain_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Webform.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="emailOns")
    def email_ons(self) -> Sequence[str]:
        """
        Defines when to send email to the reporter (triggered, acknowledged, resolved).
        """
        return pulumi.get(self, "email_ons")

    @property
    @pulumi.getter(name="footerLink")
    def footer_link(self) -> str:
        """
        Footer link.
        """
        return pulumi.get(self, "footer_link")

    @property
    @pulumi.getter(name="footerText")
    def footer_text(self) -> str:
        """
        Footer text.
        """
        return pulumi.get(self, "footer_text")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Webform header.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Webform id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputFields")
    def input_fields(self) -> Sequence['outputs.GetWebformInputFieldResult']:
        """
        Input Fields added to Webforms. Added as tags to incident based on selection.
        """
        return pulumi.get(self, "input_fields")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Webform.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owners(self) -> Sequence['outputs.GetWebformOwnerResult']:
        """
        Form owner.
        """
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="publicUrl")
    def public_url(self) -> str:
        """
        Public URL of the Webform.
        """
        return pulumi.get(self, "public_url")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetWebformServiceResult']:
        """
        Services added to Webform.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def severities(self) -> Sequence['outputs.GetWebformSeverityResult']:
        """
        Severity of the Incident.
        """
        warnings.warn("""Use `input_field` instead of `severity`.""", DeprecationWarning)
        pulumi.log.warn("""severities is deprecated: Use `input_field` instead of `severity`.""")

        return pulumi.get(self, "severities")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        Webform Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Webform title (public).
        """
        return pulumi.get(self, "title")


class AwaitableGetWebformResult(GetWebformResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebformResult(
            custom_domain_name=self.custom_domain_name,
            description=self.description,
            email_ons=self.email_ons,
            footer_link=self.footer_link,
            footer_text=self.footer_text,
            header=self.header,
            id=self.id,
            input_fields=self.input_fields,
            name=self.name,
            owners=self.owners,
            public_url=self.public_url,
            services=self.services,
            severities=self.severities,
            tags=self.tags,
            team_id=self.team_id,
            title=self.title)


def get_webform(name: Optional[str] = None,
                team_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWebformResult:
    """
    [Squadcast Webforms](https://support.squadcast.com/webforms/webforms) allows organizations to expand their customer support by hosting public Webforms, so their customers can quickly create an alert from outside the Squadcast ecosystem. Not only this, but internal stakeholders can also leverage Webforms for easy alert creation. Use this data source to get information about a specific webform.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squadcast as squadcast

    webform = squadcast.get_webform(name="webformName",
        team_id="team id")
    ```


    :param str name: Name of the Webform.
    :param str team_id: Team id.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('squadcast:index/getWebform:getWebform', __args__, opts=opts, typ=GetWebformResult).value

    return AwaitableGetWebformResult(
        custom_domain_name=pulumi.get(__ret__, 'custom_domain_name'),
        description=pulumi.get(__ret__, 'description'),
        email_ons=pulumi.get(__ret__, 'email_ons'),
        footer_link=pulumi.get(__ret__, 'footer_link'),
        footer_text=pulumi.get(__ret__, 'footer_text'),
        header=pulumi.get(__ret__, 'header'),
        id=pulumi.get(__ret__, 'id'),
        input_fields=pulumi.get(__ret__, 'input_fields'),
        name=pulumi.get(__ret__, 'name'),
        owners=pulumi.get(__ret__, 'owners'),
        public_url=pulumi.get(__ret__, 'public_url'),
        services=pulumi.get(__ret__, 'services'),
        severities=pulumi.get(__ret__, 'severities'),
        tags=pulumi.get(__ret__, 'tags'),
        team_id=pulumi.get(__ret__, 'team_id'),
        title=pulumi.get(__ret__, 'title'))


@_utilities.lift_output_func(get_webform)
def get_webform_output(name: Optional[pulumi.Input[str]] = None,
                       team_id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWebformResult]:
    """
    [Squadcast Webforms](https://support.squadcast.com/webforms/webforms) allows organizations to expand their customer support by hosting public Webforms, so their customers can quickly create an alert from outside the Squadcast ecosystem. Not only this, but internal stakeholders can also leverage Webforms for easy alert creation. Use this data source to get information about a specific webform.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squadcast as squadcast

    webform = squadcast.get_webform(name="webformName",
        team_id="team id")
    ```


    :param str name: Name of the Webform.
    :param str team_id: Team id.
    """
    ...
