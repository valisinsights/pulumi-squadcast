# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetRunbookResult',
    'AwaitableGetRunbookResult',
    'get_runbook',
    'get_runbook_output',
]

@pulumi.output_type
class GetRunbookResult:
    """
    A collection of values returned by getRunbook.
    """
    def __init__(__self__, entity_owners=None, id=None, name=None, steps=None, team_id=None):
        if entity_owners and not isinstance(entity_owners, list):
            raise TypeError("Expected argument 'entity_owners' to be a list")
        pulumi.set(__self__, "entity_owners", entity_owners)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if steps and not isinstance(steps, list):
            raise TypeError("Expected argument 'steps' to be a list")
        pulumi.set(__self__, "steps", steps)
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="entityOwners")
    def entity_owners(self) -> Sequence['outputs.GetRunbookEntityOwnerResult']:
        """
        Runbooks owner
        """
        return pulumi.get(self, "entity_owners")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Runbook id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Runbook
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetRunbookStepResult']:
        """
        Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")


class AwaitableGetRunbookResult(GetRunbookResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRunbookResult(
            entity_owners=self.entity_owners,
            id=self.id,
            name=self.name,
            steps=self.steps,
            team_id=self.team_id)


def get_runbook(name: Optional[str] = None,
                team_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRunbookResult:
    """
    A Runbook is a compilation of routine procedures and operations that are documented for reference while working on a critical incident. Sometimes, it can also be referred to as a Playbook.Use this data source to get information about a specific Runbook that you can use for other Squadcast resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squadcast as squadcast

    test = squadcast.get_runbook(name=squadcast_runbook["test"]["name"],
        team_id="team id")
    ```


    :param str name: Name of the Runbook
    :param str team_id: Team id.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('squadcast:index/getRunbook:getRunbook', __args__, opts=opts, typ=GetRunbookResult).value

    return AwaitableGetRunbookResult(
        entity_owners=pulumi.get(__ret__, 'entity_owners'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        steps=pulumi.get(__ret__, 'steps'),
        team_id=pulumi.get(__ret__, 'team_id'))


@_utilities.lift_output_func(get_runbook)
def get_runbook_output(name: Optional[pulumi.Input[str]] = None,
                       team_id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRunbookResult]:
    """
    A Runbook is a compilation of routine procedures and operations that are documented for reference while working on a critical incident. Sometimes, it can also be referred to as a Playbook.Use this data source to get information about a specific Runbook that you can use for other Squadcast resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squadcast as squadcast

    test = squadcast.get_runbook(name=squadcast_runbook["test"]["name"],
        team_id="team id")
    ```


    :param str name: Name of the Runbook
    :param str team_id: Team id.
    """
    ...
