# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScheduleRotationV2Args', 'ScheduleRotationV2']

@pulumi.input_type
class ScheduleRotationV2Args:
    def __init__(__self__, *,
                 change_participants_frequency: pulumi.Input[int],
                 change_participants_unit: pulumi.Input[str],
                 period: pulumi.Input[str],
                 schedule_id: pulumi.Input[int],
                 shift_timeslots: pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ShiftTimeslotArgs']]],
                 start_date: pulumi.Input[str],
                 custom_period_frequency: Optional[pulumi.Input[int]] = None,
                 custom_period_unit: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 ends_after_iterations: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 participant_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ParticipantGroupArgs']]]] = None):
        """
        The set of arguments for constructing a ScheduleRotationV2 resource.
        :param pulumi.Input[int] change_participants_frequency: Frequency with which participants change in the rotation.
        :param pulumi.Input[str] change_participants_unit: Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
        :param pulumi.Input[str] period: Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
        :param pulumi.Input[int] schedule_id: id of the schedule that the rotation belongs to.
        :param pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ShiftTimeslotArgs']]] shift_timeslots: Timeslots where the rotation is active.
        :param pulumi.Input[str] start_date: Defines the start date of the rotation.
        :param pulumi.Input[int] custom_period_frequency: Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
        :param pulumi.Input[str] custom_period_unit: Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
        :param pulumi.Input[str] end_date: Defines the end date of the schedule rotation.
        :param pulumi.Input[int] ends_after_iterations: Defines the number of iterations of the schedule rotation.
        :param pulumi.Input[str] name: Rotation name.
        :param pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ParticipantGroupArgs']]] participant_groups: Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
        """
        pulumi.set(__self__, "change_participants_frequency", change_participants_frequency)
        pulumi.set(__self__, "change_participants_unit", change_participants_unit)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "schedule_id", schedule_id)
        pulumi.set(__self__, "shift_timeslots", shift_timeslots)
        pulumi.set(__self__, "start_date", start_date)
        if custom_period_frequency is not None:
            pulumi.set(__self__, "custom_period_frequency", custom_period_frequency)
        if custom_period_unit is not None:
            pulumi.set(__self__, "custom_period_unit", custom_period_unit)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if ends_after_iterations is not None:
            pulumi.set(__self__, "ends_after_iterations", ends_after_iterations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if participant_groups is not None:
            pulumi.set(__self__, "participant_groups", participant_groups)

    @property
    @pulumi.getter(name="changeParticipantsFrequency")
    def change_participants_frequency(self) -> pulumi.Input[int]:
        """
        Frequency with which participants change in the rotation.
        """
        return pulumi.get(self, "change_participants_frequency")

    @change_participants_frequency.setter
    def change_participants_frequency(self, value: pulumi.Input[int]):
        pulumi.set(self, "change_participants_frequency", value)

    @property
    @pulumi.getter(name="changeParticipantsUnit")
    def change_participants_unit(self) -> pulumi.Input[str]:
        """
        Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
        """
        return pulumi.get(self, "change_participants_unit")

    @change_participants_unit.setter
    def change_participants_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "change_participants_unit", value)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[str]:
        """
        Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[str]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> pulumi.Input[int]:
        """
        id of the schedule that the rotation belongs to.
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="shiftTimeslots")
    def shift_timeslots(self) -> pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ShiftTimeslotArgs']]]:
        """
        Timeslots where the rotation is active.
        """
        return pulumi.get(self, "shift_timeslots")

    @shift_timeslots.setter
    def shift_timeslots(self, value: pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ShiftTimeslotArgs']]]):
        pulumi.set(self, "shift_timeslots", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        """
        Defines the start date of the rotation.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="customPeriodFrequency")
    def custom_period_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
        """
        return pulumi.get(self, "custom_period_frequency")

    @custom_period_frequency.setter
    def custom_period_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_period_frequency", value)

    @property
    @pulumi.getter(name="customPeriodUnit")
    def custom_period_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
        """
        return pulumi.get(self, "custom_period_unit")

    @custom_period_unit.setter
    def custom_period_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_period_unit", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the end date of the schedule rotation.
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="endsAfterIterations")
    def ends_after_iterations(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the number of iterations of the schedule rotation.
        """
        return pulumi.get(self, "ends_after_iterations")

    @ends_after_iterations.setter
    def ends_after_iterations(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ends_after_iterations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rotation name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="participantGroups")
    def participant_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ParticipantGroupArgs']]]]:
        """
        Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
        """
        return pulumi.get(self, "participant_groups")

    @participant_groups.setter
    def participant_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ParticipantGroupArgs']]]]):
        pulumi.set(self, "participant_groups", value)


@pulumi.input_type
class _ScheduleRotationV2State:
    def __init__(__self__, *,
                 change_participants_frequency: Optional[pulumi.Input[int]] = None,
                 change_participants_unit: Optional[pulumi.Input[str]] = None,
                 custom_period_frequency: Optional[pulumi.Input[int]] = None,
                 custom_period_unit: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 ends_after_iterations: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 participant_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ParticipantGroupArgs']]]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 shift_timeslots: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ShiftTimeslotArgs']]]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ScheduleRotationV2 resources.
        :param pulumi.Input[int] change_participants_frequency: Frequency with which participants change in the rotation.
        :param pulumi.Input[str] change_participants_unit: Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
        :param pulumi.Input[int] custom_period_frequency: Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
        :param pulumi.Input[str] custom_period_unit: Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
        :param pulumi.Input[str] end_date: Defines the end date of the schedule rotation.
        :param pulumi.Input[int] ends_after_iterations: Defines the number of iterations of the schedule rotation.
        :param pulumi.Input[str] name: Rotation name.
        :param pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ParticipantGroupArgs']]] participant_groups: Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
        :param pulumi.Input[str] period: Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
        :param pulumi.Input[int] schedule_id: id of the schedule that the rotation belongs to.
        :param pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ShiftTimeslotArgs']]] shift_timeslots: Timeslots where the rotation is active.
        :param pulumi.Input[str] start_date: Defines the start date of the rotation.
        """
        if change_participants_frequency is not None:
            pulumi.set(__self__, "change_participants_frequency", change_participants_frequency)
        if change_participants_unit is not None:
            pulumi.set(__self__, "change_participants_unit", change_participants_unit)
        if custom_period_frequency is not None:
            pulumi.set(__self__, "custom_period_frequency", custom_period_frequency)
        if custom_period_unit is not None:
            pulumi.set(__self__, "custom_period_unit", custom_period_unit)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if ends_after_iterations is not None:
            pulumi.set(__self__, "ends_after_iterations", ends_after_iterations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if participant_groups is not None:
            pulumi.set(__self__, "participant_groups", participant_groups)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if shift_timeslots is not None:
            pulumi.set(__self__, "shift_timeslots", shift_timeslots)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="changeParticipantsFrequency")
    def change_participants_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency with which participants change in the rotation.
        """
        return pulumi.get(self, "change_participants_frequency")

    @change_participants_frequency.setter
    def change_participants_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "change_participants_frequency", value)

    @property
    @pulumi.getter(name="changeParticipantsUnit")
    def change_participants_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
        """
        return pulumi.get(self, "change_participants_unit")

    @change_participants_unit.setter
    def change_participants_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_participants_unit", value)

    @property
    @pulumi.getter(name="customPeriodFrequency")
    def custom_period_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
        """
        return pulumi.get(self, "custom_period_frequency")

    @custom_period_frequency.setter
    def custom_period_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_period_frequency", value)

    @property
    @pulumi.getter(name="customPeriodUnit")
    def custom_period_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
        """
        return pulumi.get(self, "custom_period_unit")

    @custom_period_unit.setter
    def custom_period_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_period_unit", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the end date of the schedule rotation.
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="endsAfterIterations")
    def ends_after_iterations(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the number of iterations of the schedule rotation.
        """
        return pulumi.get(self, "ends_after_iterations")

    @ends_after_iterations.setter
    def ends_after_iterations(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ends_after_iterations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rotation name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="participantGroups")
    def participant_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ParticipantGroupArgs']]]]:
        """
        Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
        """
        return pulumi.get(self, "participant_groups")

    @participant_groups.setter
    def participant_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ParticipantGroupArgs']]]]):
        pulumi.set(self, "participant_groups", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        """
        Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[int]]:
        """
        id of the schedule that the rotation belongs to.
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="shiftTimeslots")
    def shift_timeslots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ShiftTimeslotArgs']]]]:
        """
        Timeslots where the rotation is active.
        """
        return pulumi.get(self, "shift_timeslots")

    @shift_timeslots.setter
    def shift_timeslots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleRotationV2ShiftTimeslotArgs']]]]):
        pulumi.set(self, "shift_timeslots", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the start date of the rotation.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


class ScheduleRotationV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 change_participants_frequency: Optional[pulumi.Input[int]] = None,
                 change_participants_unit: Optional[pulumi.Input[str]] = None,
                 custom_period_frequency: Optional[pulumi.Input[int]] = None,
                 custom_period_unit: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 ends_after_iterations: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 participant_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ParticipantGroupArgs']]]]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 shift_timeslots: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ShiftTimeslotArgs']]]]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        [Schedule rotations](https://support.squadcast.com/schedules/schedules-new/adding-a-schedule#2.-choose-a-rotation-pattern) are used to manage on-call scheduling & determine who will be notified when an incident is triggered.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="example team name")
        example_user = squadcast.get_user(email="test@example.com")
        example_user2 = squadcast.get_user(email="test2@example.com")
        get_schedule = squadcast.get_schedule_v2(name="Test Schedule",
            team_id=example_team.id)
        # Create a rotation with weekly period
        rotations_with_weekly_period = squadcast.ScheduleRotationV2("rotationsWithWeeklyPeriod",
            schedule_id=get_schedule.id,
            start_date="2023-07-01T00:00:00Z",
            period="weekly",
            shift_timeslots=[squadcast.ScheduleRotationV2ShiftTimeslotArgs(
                start_hour=10,
                start_minute=30,
                duration=720,
            )],
            change_participants_frequency=1,
            change_participants_unit="rotation",
            participant_groups=[squadcast.ScheduleRotationV2ParticipantGroupArgs(
                participants=[
                    squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(
                        id=example_user.id,
                        type="user",
                    ),
                    squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(
                        id=example_user2.id,
                        type="user",
                    ),
                ],
            )],
            ends_after_iterations=2)
        # Create a rotation with custom period
        rotations_with_custom_period = squadcast.ScheduleRotationV2("rotationsWithCustomPeriod",
            schedule_id=get_schedule.id,
            start_date="2023-06-13T00:00:00Z",
            period="custom",
            shift_timeslots=[
                squadcast.ScheduleRotationV2ShiftTimeslotArgs(
                    start_hour=10,
                    start_minute=0,
                    duration=1440,
                    day_of_week="saturday",
                ),
                squadcast.ScheduleRotationV2ShiftTimeslotArgs(
                    start_hour=12,
                    start_minute=30,
                    duration=720,
                    day_of_week="sunday",
                ),
            ],
            change_participants_frequency=1,
            change_participants_unit="rotation",
            custom_period_frequency=1,
            custom_period_unit="week",
            participant_groups=[
                squadcast.ScheduleRotationV2ParticipantGroupArgs(
                    participants=[squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(
                        id=example_user.id,
                        type="user",
                    )],
                ),
                squadcast.ScheduleRotationV2ParticipantGroupArgs(
                    participants=[squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(
                        id=example_user2.id,
                        type="user",
                    )],
                ),
            ],
            end_date="2023-08-31T00:00:00Z")
        ```

        ## Import

        teamID:scheduleName:rotationName

        ```sh
         $ pulumi import squadcast:index/scheduleRotationV2:ScheduleRotationV2 rotation "62d2fe23a57381088224d726:Example Schedule:Example Rotation"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] change_participants_frequency: Frequency with which participants change in the rotation.
        :param pulumi.Input[str] change_participants_unit: Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
        :param pulumi.Input[int] custom_period_frequency: Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
        :param pulumi.Input[str] custom_period_unit: Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
        :param pulumi.Input[str] end_date: Defines the end date of the schedule rotation.
        :param pulumi.Input[int] ends_after_iterations: Defines the number of iterations of the schedule rotation.
        :param pulumi.Input[str] name: Rotation name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ParticipantGroupArgs']]]] participant_groups: Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
        :param pulumi.Input[str] period: Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
        :param pulumi.Input[int] schedule_id: id of the schedule that the rotation belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ShiftTimeslotArgs']]]] shift_timeslots: Timeslots where the rotation is active.
        :param pulumi.Input[str] start_date: Defines the start date of the rotation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScheduleRotationV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        [Schedule rotations](https://support.squadcast.com/schedules/schedules-new/adding-a-schedule#2.-choose-a-rotation-pattern) are used to manage on-call scheduling & determine who will be notified when an incident is triggered.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="example team name")
        example_user = squadcast.get_user(email="test@example.com")
        example_user2 = squadcast.get_user(email="test2@example.com")
        get_schedule = squadcast.get_schedule_v2(name="Test Schedule",
            team_id=example_team.id)
        # Create a rotation with weekly period
        rotations_with_weekly_period = squadcast.ScheduleRotationV2("rotationsWithWeeklyPeriod",
            schedule_id=get_schedule.id,
            start_date="2023-07-01T00:00:00Z",
            period="weekly",
            shift_timeslots=[squadcast.ScheduleRotationV2ShiftTimeslotArgs(
                start_hour=10,
                start_minute=30,
                duration=720,
            )],
            change_participants_frequency=1,
            change_participants_unit="rotation",
            participant_groups=[squadcast.ScheduleRotationV2ParticipantGroupArgs(
                participants=[
                    squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(
                        id=example_user.id,
                        type="user",
                    ),
                    squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(
                        id=example_user2.id,
                        type="user",
                    ),
                ],
            )],
            ends_after_iterations=2)
        # Create a rotation with custom period
        rotations_with_custom_period = squadcast.ScheduleRotationV2("rotationsWithCustomPeriod",
            schedule_id=get_schedule.id,
            start_date="2023-06-13T00:00:00Z",
            period="custom",
            shift_timeslots=[
                squadcast.ScheduleRotationV2ShiftTimeslotArgs(
                    start_hour=10,
                    start_minute=0,
                    duration=1440,
                    day_of_week="saturday",
                ),
                squadcast.ScheduleRotationV2ShiftTimeslotArgs(
                    start_hour=12,
                    start_minute=30,
                    duration=720,
                    day_of_week="sunday",
                ),
            ],
            change_participants_frequency=1,
            change_participants_unit="rotation",
            custom_period_frequency=1,
            custom_period_unit="week",
            participant_groups=[
                squadcast.ScheduleRotationV2ParticipantGroupArgs(
                    participants=[squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(
                        id=example_user.id,
                        type="user",
                    )],
                ),
                squadcast.ScheduleRotationV2ParticipantGroupArgs(
                    participants=[squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(
                        id=example_user2.id,
                        type="user",
                    )],
                ),
            ],
            end_date="2023-08-31T00:00:00Z")
        ```

        ## Import

        teamID:scheduleName:rotationName

        ```sh
         $ pulumi import squadcast:index/scheduleRotationV2:ScheduleRotationV2 rotation "62d2fe23a57381088224d726:Example Schedule:Example Rotation"
        ```

        :param str resource_name: The name of the resource.
        :param ScheduleRotationV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScheduleRotationV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 change_participants_frequency: Optional[pulumi.Input[int]] = None,
                 change_participants_unit: Optional[pulumi.Input[str]] = None,
                 custom_period_frequency: Optional[pulumi.Input[int]] = None,
                 custom_period_unit: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 ends_after_iterations: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 participant_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ParticipantGroupArgs']]]]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 shift_timeslots: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ShiftTimeslotArgs']]]]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScheduleRotationV2Args.__new__(ScheduleRotationV2Args)

            if change_participants_frequency is None and not opts.urn:
                raise TypeError("Missing required property 'change_participants_frequency'")
            __props__.__dict__["change_participants_frequency"] = change_participants_frequency
            if change_participants_unit is None and not opts.urn:
                raise TypeError("Missing required property 'change_participants_unit'")
            __props__.__dict__["change_participants_unit"] = change_participants_unit
            __props__.__dict__["custom_period_frequency"] = custom_period_frequency
            __props__.__dict__["custom_period_unit"] = custom_period_unit
            __props__.__dict__["end_date"] = end_date
            __props__.__dict__["ends_after_iterations"] = ends_after_iterations
            __props__.__dict__["name"] = name
            __props__.__dict__["participant_groups"] = participant_groups
            if period is None and not opts.urn:
                raise TypeError("Missing required property 'period'")
            __props__.__dict__["period"] = period
            if schedule_id is None and not opts.urn:
                raise TypeError("Missing required property 'schedule_id'")
            __props__.__dict__["schedule_id"] = schedule_id
            if shift_timeslots is None and not opts.urn:
                raise TypeError("Missing required property 'shift_timeslots'")
            __props__.__dict__["shift_timeslots"] = shift_timeslots
            if start_date is None and not opts.urn:
                raise TypeError("Missing required property 'start_date'")
            __props__.__dict__["start_date"] = start_date
        super(ScheduleRotationV2, __self__).__init__(
            'squadcast:index/scheduleRotationV2:ScheduleRotationV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            change_participants_frequency: Optional[pulumi.Input[int]] = None,
            change_participants_unit: Optional[pulumi.Input[str]] = None,
            custom_period_frequency: Optional[pulumi.Input[int]] = None,
            custom_period_unit: Optional[pulumi.Input[str]] = None,
            end_date: Optional[pulumi.Input[str]] = None,
            ends_after_iterations: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            participant_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ParticipantGroupArgs']]]]] = None,
            period: Optional[pulumi.Input[str]] = None,
            schedule_id: Optional[pulumi.Input[int]] = None,
            shift_timeslots: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ShiftTimeslotArgs']]]]] = None,
            start_date: Optional[pulumi.Input[str]] = None) -> 'ScheduleRotationV2':
        """
        Get an existing ScheduleRotationV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] change_participants_frequency: Frequency with which participants change in the rotation.
        :param pulumi.Input[str] change_participants_unit: Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
        :param pulumi.Input[int] custom_period_frequency: Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
        :param pulumi.Input[str] custom_period_unit: Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
        :param pulumi.Input[str] end_date: Defines the end date of the schedule rotation.
        :param pulumi.Input[int] ends_after_iterations: Defines the number of iterations of the schedule rotation.
        :param pulumi.Input[str] name: Rotation name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ParticipantGroupArgs']]]] participant_groups: Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
        :param pulumi.Input[str] period: Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
        :param pulumi.Input[int] schedule_id: id of the schedule that the rotation belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationV2ShiftTimeslotArgs']]]] shift_timeslots: Timeslots where the rotation is active.
        :param pulumi.Input[str] start_date: Defines the start date of the rotation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScheduleRotationV2State.__new__(_ScheduleRotationV2State)

        __props__.__dict__["change_participants_frequency"] = change_participants_frequency
        __props__.__dict__["change_participants_unit"] = change_participants_unit
        __props__.__dict__["custom_period_frequency"] = custom_period_frequency
        __props__.__dict__["custom_period_unit"] = custom_period_unit
        __props__.__dict__["end_date"] = end_date
        __props__.__dict__["ends_after_iterations"] = ends_after_iterations
        __props__.__dict__["name"] = name
        __props__.__dict__["participant_groups"] = participant_groups
        __props__.__dict__["period"] = period
        __props__.__dict__["schedule_id"] = schedule_id
        __props__.__dict__["shift_timeslots"] = shift_timeslots
        __props__.__dict__["start_date"] = start_date
        return ScheduleRotationV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="changeParticipantsFrequency")
    def change_participants_frequency(self) -> pulumi.Output[int]:
        """
        Frequency with which participants change in the rotation.
        """
        return pulumi.get(self, "change_participants_frequency")

    @property
    @pulumi.getter(name="changeParticipantsUnit")
    def change_participants_unit(self) -> pulumi.Output[str]:
        """
        Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
        """
        return pulumi.get(self, "change_participants_unit")

    @property
    @pulumi.getter(name="customPeriodFrequency")
    def custom_period_frequency(self) -> pulumi.Output[Optional[int]]:
        """
        Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
        """
        return pulumi.get(self, "custom_period_frequency")

    @property
    @pulumi.getter(name="customPeriodUnit")
    def custom_period_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
        """
        return pulumi.get(self, "custom_period_unit")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Output[Optional[str]]:
        """
        Defines the end date of the schedule rotation.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endsAfterIterations")
    def ends_after_iterations(self) -> pulumi.Output[Optional[int]]:
        """
        Defines the number of iterations of the schedule rotation.
        """
        return pulumi.get(self, "ends_after_iterations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Rotation name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="participantGroups")
    def participant_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ScheduleRotationV2ParticipantGroup']]]:
        """
        Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
        """
        return pulumi.get(self, "participant_groups")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[str]:
        """
        Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> pulumi.Output[int]:
        """
        id of the schedule that the rotation belongs to.
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="shiftTimeslots")
    def shift_timeslots(self) -> pulumi.Output[Sequence['outputs.ScheduleRotationV2ShiftTimeslot']]:
        """
        Timeslots where the rotation is active.
        """
        return pulumi.get(self, "shift_timeslots")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Output[str]:
        """
        Defines the start date of the rotation.
        """
        return pulumi.get(self, "start_date")

