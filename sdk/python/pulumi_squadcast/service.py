# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceArgs', 'Service']

@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 email_prefix: pulumi.Input[str],
                 escalation_policy_id: pulumi.Input[str],
                 team_id: pulumi.Input[str],
                 alert_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 maintainer: Optional[pulumi.Input['ServiceMaintainerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slack_channel_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTagArgs']]]] = None):
        """
        The set of arguments for constructing a Service resource.
        :param pulumi.Input[str] email_prefix: Email prefix.
        :param pulumi.Input[str] escalation_policy_id: Escalation policy id.
        :param pulumi.Input[str] team_id: Team id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_sources: List of active alert source names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dependencies: Dependencies (serviceIds)
        :param pulumi.Input[str] description: Detailed description about this service.
        :param pulumi.Input['ServiceMaintainerArgs'] maintainer: Service owner.
        :param pulumi.Input[str] name: Name of the Service.
        :param pulumi.Input[str] slack_channel_id: Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTagArgs']]] tags: Service tags.
        """
        pulumi.set(__self__, "email_prefix", email_prefix)
        pulumi.set(__self__, "escalation_policy_id", escalation_policy_id)
        pulumi.set(__self__, "team_id", team_id)
        if alert_sources is not None:
            pulumi.set(__self__, "alert_sources", alert_sources)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if maintainer is not None:
            pulumi.set(__self__, "maintainer", maintainer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slack_channel_id is not None:
            pulumi.set(__self__, "slack_channel_id", slack_channel_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="emailPrefix")
    def email_prefix(self) -> pulumi.Input[str]:
        """
        Email prefix.
        """
        return pulumi.get(self, "email_prefix")

    @email_prefix.setter
    def email_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "email_prefix", value)

    @property
    @pulumi.getter(name="escalationPolicyId")
    def escalation_policy_id(self) -> pulumi.Input[str]:
        """
        Escalation policy id.
        """
        return pulumi.get(self, "escalation_policy_id")

    @escalation_policy_id.setter
    def escalation_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "escalation_policy_id", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Input[str]:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="alertSources")
    def alert_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of active alert source names.
        """
        return pulumi.get(self, "alert_sources")

    @alert_sources.setter
    def alert_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alert_sources", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Dependencies (serviceIds)
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed description about this service.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def maintainer(self) -> Optional[pulumi.Input['ServiceMaintainerArgs']]:
        """
        Service owner.
        """
        return pulumi.get(self, "maintainer")

    @maintainer.setter
    def maintainer(self, value: Optional[pulumi.Input['ServiceMaintainerArgs']]):
        pulumi.set(self, "maintainer", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="slackChannelId")
    def slack_channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
        """
        return pulumi.get(self, "slack_channel_id")

    @slack_channel_id.setter
    def slack_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_channel_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTagArgs']]]]:
        """
        Service tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ServiceState:
    def __init__(__self__, *,
                 active_alert_source_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 alert_source_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 alert_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 email_prefix: Optional[pulumi.Input[str]] = None,
                 escalation_policy_id: Optional[pulumi.Input[str]] = None,
                 maintainer: Optional[pulumi.Input['ServiceMaintainerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slack_channel_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTagArgs']]]] = None,
                 team_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Service resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] active_alert_source_endpoints: Active alert source endpoints.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] alert_source_endpoints: All available alert source endpoints.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_sources: List of active alert source names.
        :param pulumi.Input[str] api_key: Unique API key of this service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dependencies: Dependencies (serviceIds)
        :param pulumi.Input[str] description: Detailed description about this service.
        :param pulumi.Input[str] email: Email.
        :param pulumi.Input[str] email_prefix: Email prefix.
        :param pulumi.Input[str] escalation_policy_id: Escalation policy id.
        :param pulumi.Input['ServiceMaintainerArgs'] maintainer: Service owner.
        :param pulumi.Input[str] name: Name of the Service.
        :param pulumi.Input[str] slack_channel_id: Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTagArgs']]] tags: Service tags.
        :param pulumi.Input[str] team_id: Team id.
        """
        if active_alert_source_endpoints is not None:
            pulumi.set(__self__, "active_alert_source_endpoints", active_alert_source_endpoints)
        if alert_source_endpoints is not None:
            pulumi.set(__self__, "alert_source_endpoints", alert_source_endpoints)
        if alert_sources is not None:
            pulumi.set(__self__, "alert_sources", alert_sources)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if email_prefix is not None:
            pulumi.set(__self__, "email_prefix", email_prefix)
        if escalation_policy_id is not None:
            pulumi.set(__self__, "escalation_policy_id", escalation_policy_id)
        if maintainer is not None:
            pulumi.set(__self__, "maintainer", maintainer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slack_channel_id is not None:
            pulumi.set(__self__, "slack_channel_id", slack_channel_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="activeAlertSourceEndpoints")
    def active_alert_source_endpoints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Active alert source endpoints.
        """
        return pulumi.get(self, "active_alert_source_endpoints")

    @active_alert_source_endpoints.setter
    def active_alert_source_endpoints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "active_alert_source_endpoints", value)

    @property
    @pulumi.getter(name="alertSourceEndpoints")
    def alert_source_endpoints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        All available alert source endpoints.
        """
        return pulumi.get(self, "alert_source_endpoints")

    @alert_source_endpoints.setter
    def alert_source_endpoints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "alert_source_endpoints", value)

    @property
    @pulumi.getter(name="alertSources")
    def alert_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of active alert source names.
        """
        return pulumi.get(self, "alert_sources")

    @alert_sources.setter
    def alert_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alert_sources", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        Unique API key of this service.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Dependencies (serviceIds)
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed description about this service.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="emailPrefix")
    def email_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Email prefix.
        """
        return pulumi.get(self, "email_prefix")

    @email_prefix.setter
    def email_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_prefix", value)

    @property
    @pulumi.getter(name="escalationPolicyId")
    def escalation_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Escalation policy id.
        """
        return pulumi.get(self, "escalation_policy_id")

    @escalation_policy_id.setter
    def escalation_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "escalation_policy_id", value)

    @property
    @pulumi.getter
    def maintainer(self) -> Optional[pulumi.Input['ServiceMaintainerArgs']]:
        """
        Service owner.
        """
        return pulumi.get(self, "maintainer")

    @maintainer.setter
    def maintainer(self, value: Optional[pulumi.Input['ServiceMaintainerArgs']]):
        pulumi.set(self, "maintainer", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="slackChannelId")
    def slack_channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
        """
        return pulumi.get(self, "slack_channel_id")

    @slack_channel_id.setter
    def slack_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_channel_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTagArgs']]]]:
        """
        Service tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)


class Service(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email_prefix: Optional[pulumi.Input[str]] = None,
                 escalation_policy_id: Optional[pulumi.Input[str]] = None,
                 maintainer: Optional[pulumi.Input[pulumi.InputType['ServiceMaintainerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slack_channel_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTagArgs']]]]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        [Squadcast Services](https://support.squadcast.com/docs/adding-a-service-1) are the core components of your infrastructure/application for which alerts are generated. Services in Squadcast represent specific systems, applications, components, products, or teams for which an incident is created. To check out some of the best practices on creating Services in Squadcast, refer to the guide [here](https://www.squadcast.com/blog/how-to-configure-services-in-squadcast-best-practices-to-reduce-mttr).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_squadcast as squadcast

        example_user = squadcast.get_user(email="test@example.com")
        example_team = squadcast.get_team(name="example team name")
        example_escalaion_policy = squadcast.get_escalation_policy(name="example escalation policy name",
            team_id=example_team.id)
        example_service = squadcast.Service("exampleService",
            team_id=example_team.id,
            escalation_policy_id=example_escalaion_policy.id,
            email_prefix="example-service-email",
            maintainer=squadcast.ServiceMaintainerArgs(
                id=example_user.id,
                type="user",
            ),
            tags=[
                squadcast.ServiceTagArgs(
                    key="testkey",
                    value="testval",
                ),
                squadcast.ServiceTagArgs(
                    key="testkey2",
                    value="testval2",
                ),
            ],
            alert_sources=["example-alert-source"],
            slack_channel_id="D0KAQDEPSH")
        ```

        ## Import

        teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively

        ```sh
         $ pulumi import squadcast:index/service:Service test_parent 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_sources: List of active alert source names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dependencies: Dependencies (serviceIds)
        :param pulumi.Input[str] description: Detailed description about this service.
        :param pulumi.Input[str] email_prefix: Email prefix.
        :param pulumi.Input[str] escalation_policy_id: Escalation policy id.
        :param pulumi.Input[pulumi.InputType['ServiceMaintainerArgs']] maintainer: Service owner.
        :param pulumi.Input[str] name: Name of the Service.
        :param pulumi.Input[str] slack_channel_id: Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTagArgs']]]] tags: Service tags.
        :param pulumi.Input[str] team_id: Team id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        [Squadcast Services](https://support.squadcast.com/docs/adding-a-service-1) are the core components of your infrastructure/application for which alerts are generated. Services in Squadcast represent specific systems, applications, components, products, or teams for which an incident is created. To check out some of the best practices on creating Services in Squadcast, refer to the guide [here](https://www.squadcast.com/blog/how-to-configure-services-in-squadcast-best-practices-to-reduce-mttr).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_squadcast as squadcast

        example_user = squadcast.get_user(email="test@example.com")
        example_team = squadcast.get_team(name="example team name")
        example_escalaion_policy = squadcast.get_escalation_policy(name="example escalation policy name",
            team_id=example_team.id)
        example_service = squadcast.Service("exampleService",
            team_id=example_team.id,
            escalation_policy_id=example_escalaion_policy.id,
            email_prefix="example-service-email",
            maintainer=squadcast.ServiceMaintainerArgs(
                id=example_user.id,
                type="user",
            ),
            tags=[
                squadcast.ServiceTagArgs(
                    key="testkey",
                    value="testval",
                ),
                squadcast.ServiceTagArgs(
                    key="testkey2",
                    value="testval2",
                ),
            ],
            alert_sources=["example-alert-source"],
            slack_channel_id="D0KAQDEPSH")
        ```

        ## Import

        teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively

        ```sh
         $ pulumi import squadcast:index/service:Service test_parent 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
        ```

        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email_prefix: Optional[pulumi.Input[str]] = None,
                 escalation_policy_id: Optional[pulumi.Input[str]] = None,
                 maintainer: Optional[pulumi.Input[pulumi.InputType['ServiceMaintainerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slack_channel_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTagArgs']]]]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceArgs.__new__(ServiceArgs)

            __props__.__dict__["alert_sources"] = alert_sources
            __props__.__dict__["dependencies"] = dependencies
            __props__.__dict__["description"] = description
            if email_prefix is None and not opts.urn:
                raise TypeError("Missing required property 'email_prefix'")
            __props__.__dict__["email_prefix"] = email_prefix
            if escalation_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'escalation_policy_id'")
            __props__.__dict__["escalation_policy_id"] = escalation_policy_id
            __props__.__dict__["maintainer"] = maintainer
            __props__.__dict__["name"] = name
            __props__.__dict__["slack_channel_id"] = slack_channel_id
            __props__.__dict__["tags"] = tags
            if team_id is None and not opts.urn:
                raise TypeError("Missing required property 'team_id'")
            __props__.__dict__["team_id"] = team_id
            __props__.__dict__["active_alert_source_endpoints"] = None
            __props__.__dict__["alert_source_endpoints"] = None
            __props__.__dict__["api_key"] = None
            __props__.__dict__["email"] = None
        super(Service, __self__).__init__(
            'squadcast:index/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_alert_source_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            alert_source_endpoints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            alert_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            api_key: Optional[pulumi.Input[str]] = None,
            dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            email_prefix: Optional[pulumi.Input[str]] = None,
            escalation_policy_id: Optional[pulumi.Input[str]] = None,
            maintainer: Optional[pulumi.Input[pulumi.InputType['ServiceMaintainerArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            slack_channel_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTagArgs']]]]] = None,
            team_id: Optional[pulumi.Input[str]] = None) -> 'Service':
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] active_alert_source_endpoints: Active alert source endpoints.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] alert_source_endpoints: All available alert source endpoints.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_sources: List of active alert source names.
        :param pulumi.Input[str] api_key: Unique API key of this service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dependencies: Dependencies (serviceIds)
        :param pulumi.Input[str] description: Detailed description about this service.
        :param pulumi.Input[str] email: Email.
        :param pulumi.Input[str] email_prefix: Email prefix.
        :param pulumi.Input[str] escalation_policy_id: Escalation policy id.
        :param pulumi.Input[pulumi.InputType['ServiceMaintainerArgs']] maintainer: Service owner.
        :param pulumi.Input[str] name: Name of the Service.
        :param pulumi.Input[str] slack_channel_id: Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTagArgs']]]] tags: Service tags.
        :param pulumi.Input[str] team_id: Team id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceState.__new__(_ServiceState)

        __props__.__dict__["active_alert_source_endpoints"] = active_alert_source_endpoints
        __props__.__dict__["alert_source_endpoints"] = alert_source_endpoints
        __props__.__dict__["alert_sources"] = alert_sources
        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["dependencies"] = dependencies
        __props__.__dict__["description"] = description
        __props__.__dict__["email"] = email
        __props__.__dict__["email_prefix"] = email_prefix
        __props__.__dict__["escalation_policy_id"] = escalation_policy_id
        __props__.__dict__["maintainer"] = maintainer
        __props__.__dict__["name"] = name
        __props__.__dict__["slack_channel_id"] = slack_channel_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["team_id"] = team_id
        return Service(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeAlertSourceEndpoints")
    def active_alert_source_endpoints(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Active alert source endpoints.
        """
        return pulumi.get(self, "active_alert_source_endpoints")

    @property
    @pulumi.getter(name="alertSourceEndpoints")
    def alert_source_endpoints(self) -> pulumi.Output[Mapping[str, str]]:
        """
        All available alert source endpoints.
        """
        return pulumi.get(self, "alert_source_endpoints")

    @property
    @pulumi.getter(name="alertSources")
    def alert_sources(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of active alert source names.
        """
        return pulumi.get(self, "alert_sources")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[str]:
        """
        Unique API key of this service.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def dependencies(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Dependencies (serviceIds)
        """
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Detailed description about this service.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        Email.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailPrefix")
    def email_prefix(self) -> pulumi.Output[str]:
        """
        Email prefix.
        """
        return pulumi.get(self, "email_prefix")

    @property
    @pulumi.getter(name="escalationPolicyId")
    def escalation_policy_id(self) -> pulumi.Output[str]:
        """
        Escalation policy id.
        """
        return pulumi.get(self, "escalation_policy_id")

    @property
    @pulumi.getter
    def maintainer(self) -> pulumi.Output['outputs.ServiceMaintainer']:
        """
        Service owner.
        """
        return pulumi.get(self, "maintainer")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="slackChannelId")
    def slack_channel_id(self) -> pulumi.Output[str]:
        """
        Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
        """
        return pulumi.get(self, "slack_channel_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceTag']]]:
        """
        Service tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[str]:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

