# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetTeamRoleResult',
    'AwaitableGetTeamRoleResult',
    'get_team_role',
    'get_team_role_output',
]

@pulumi.output_type
class GetTeamRoleResult:
    """
    A collection of values returned by getTeamRole.
    """
    def __init__(__self__, abilities=None, default=None, id=None, name=None, team_id=None):
        if abilities and not isinstance(abilities, list):
            raise TypeError("Expected argument 'abilities' to be a list")
        pulumi.set(__self__, "abilities", abilities)
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter
    def abilities(self) -> Sequence[str]:
        """
        All the abilities attached to a role.
        """
        return pulumi.get(self, "abilities")

    @property
    @pulumi.getter
    def default(self) -> bool:
        """
        Role is default.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Role id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        TeamRole name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")


class AwaitableGetTeamRoleResult(GetTeamRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamRoleResult(
            abilities=self.abilities,
            default=self.default,
            id=self.id,
            name=self.name,
            team_id=self.team_id)


def get_team_role(name: Optional[str] = None,
                  team_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamRoleResult:
    """
    Team roles are a way to define abilities/permissions for a user in the team. Each team role can be considered as a set of permissions that can be assigned to a user. Use this data source to get information about various team roles.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squadcast as squadcast

    test = squadcast.get_team_role(name="testRole",
        team_id="team id")
    ```


    :param str name: TeamRole name.
    :param str team_id: Team id.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('squadcast:index/getTeamRole:getTeamRole', __args__, opts=opts, typ=GetTeamRoleResult).value

    return AwaitableGetTeamRoleResult(
        abilities=pulumi.get(__ret__, 'abilities'),
        default=pulumi.get(__ret__, 'default'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        team_id=pulumi.get(__ret__, 'team_id'))


@_utilities.lift_output_func(get_team_role)
def get_team_role_output(name: Optional[pulumi.Input[str]] = None,
                         team_id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamRoleResult]:
    """
    Team roles are a way to define abilities/permissions for a user in the team. Each team role can be considered as a set of permissions that can be assigned to a user. Use this data source to get information about various team roles.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squadcast as squadcast

    test = squadcast.get_team_role(name="testRole",
        team_id="team id")
    ```


    :param str name: TeamRole name.
    :param str team_id: Team id.
    """
    ...
