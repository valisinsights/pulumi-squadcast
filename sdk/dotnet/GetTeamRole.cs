// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Squadcast
{
    public static class GetTeamRole
    {
        /// <summary>
        /// Team roles are a way to define abilities/permissions for a user in the team. Each team role can be considered as a set of permissions that can be assigned to a user. Use this data source to get information about various team roles.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Squadcast.GetTeamRole.Invoke(new()
        ///     {
        ///         Name = "testRole",
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTeamRoleResult> InvokeAsync(GetTeamRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTeamRoleResult>("squadcast:index/getTeamRole:getTeamRole", args ?? new GetTeamRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Team roles are a way to define abilities/permissions for a user in the team. Each team role can be considered as a set of permissions that can be assigned to a user. Use this data source to get information about various team roles.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Squadcast.GetTeamRole.Invoke(new()
        ///     {
        ///         Name = "testRole",
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTeamRoleResult> Invoke(GetTeamRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamRoleResult>("squadcast:index/getTeamRole:getTeamRole", args ?? new GetTeamRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTeamRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// TeamRole name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public string TeamId { get; set; } = null!;

        public GetTeamRoleArgs()
        {
        }
        public static new GetTeamRoleArgs Empty => new GetTeamRoleArgs();
    }

    public sealed class GetTeamRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// TeamRole name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public GetTeamRoleInvokeArgs()
        {
        }
        public static new GetTeamRoleInvokeArgs Empty => new GetTeamRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetTeamRoleResult
    {
        /// <summary>
        /// All the abilities attached to a role.
        /// </summary>
        public readonly ImmutableArray<string> Abilities;
        /// <summary>
        /// Role is default.
        /// </summary>
        public readonly bool Default;
        /// <summary>
        /// Role id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// TeamRole name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Team id.
        /// </summary>
        public readonly string TeamId;

        [OutputConstructor]
        private GetTeamRoleResult(
            ImmutableArray<string> abilities,

            bool @default,

            string id,

            string name,

            string teamId)
        {
            Abilities = abilities;
            Default = @default;
            Id = id;
            Name = name;
            TeamId = teamId;
        }
    }
}
