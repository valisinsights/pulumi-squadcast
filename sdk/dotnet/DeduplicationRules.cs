// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Squadcast
{
    /// <summary>
    /// [Deduplication rules](https://support.squadcast.com/docs/de-duplication-rules) can help you reduce alert noise by organising and grouping alerts. This also provides easy access to similar alerts when needed. When these rules evaluate to true for an incoming incident, alerts will get deduplicated.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "example team name",
    ///     });
    /// 
    ///     var exampleService = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "example service name",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleDeduplicationRules = new Squadcast.DeduplicationRules("exampleDeduplicationRules", new()
    ///     {
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         Rules = new[]
    ///         {
    ///             new Squadcast.Inputs.DeduplicationRulesRuleArgs
    ///             {
    ///                 IsBasic = false,
    ///                 Description = "not basic",
    ///                 Expression = "payload[\"event_id\"] == 40",
    ///             },
    ///             new Squadcast.Inputs.DeduplicationRulesRuleArgs
    ///             {
    ///                 IsBasic = true,
    ///                 Description = "basic",
    ///                 BasicExpressions = new[]
    ///                 {
    ///                     new Squadcast.Inputs.DeduplicationRulesRuleBasicExpressionArgs
    ///                     {
    ///                         Lhs = "payload[\"foo\"]",
    ///                         Op = "is",
    ///                         Rhs = "bar",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
    /// 
    /// ```sh
    ///  $ pulumi import squadcast:index/deduplicationRules:DeduplicationRules test_resource_name 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:index/deduplicationRules:DeduplicationRules")]
    public partial class DeduplicationRules : global::Pulumi.CustomResource
    {
        [Output("rules")]
        public Output<ImmutableArray<Outputs.DeduplicationRulesRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Service id.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a DeduplicationRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeduplicationRules(string name, DeduplicationRulesArgs args, CustomResourceOptions? options = null)
            : base("squadcast:index/deduplicationRules:DeduplicationRules", name, args ?? new DeduplicationRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeduplicationRules(string name, Input<string> id, DeduplicationRulesState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/deduplicationRules:DeduplicationRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeduplicationRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeduplicationRules Get(string name, Input<string> id, DeduplicationRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new DeduplicationRules(name, id, state, options);
        }
    }

    public sealed class DeduplicationRulesArgs : global::Pulumi.ResourceArgs
    {
        [Input("rules", required: true)]
        private InputList<Inputs.DeduplicationRulesRuleArgs>? _rules;
        public InputList<Inputs.DeduplicationRulesRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.DeduplicationRulesRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public DeduplicationRulesArgs()
        {
        }
        public static new DeduplicationRulesArgs Empty => new DeduplicationRulesArgs();
    }

    public sealed class DeduplicationRulesState : global::Pulumi.ResourceArgs
    {
        [Input("rules")]
        private InputList<Inputs.DeduplicationRulesRuleGetArgs>? _rules;
        public InputList<Inputs.DeduplicationRulesRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.DeduplicationRulesRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public DeduplicationRulesState()
        {
        }
        public static new DeduplicationRulesState Empty => new DeduplicationRulesState();
    }
}
