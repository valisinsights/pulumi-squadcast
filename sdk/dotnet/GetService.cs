// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Squadcast
{
    public static class GetService
    {
        /// <summary>
        /// [Squadcast Services](https://support.squadcast.com/docs/adding-a-service-1) are the core components of your infrastructure/application for which alerts are generated. Services in Squadcast represent specific systems, applications, components, products, or teams for which an incident is created. To check out some of the best practices on creating Services in Squadcast, refer to the guide [here](https://www.squadcast.com/blog/how-to-configure-services-in-squadcast-best-practices-to-reduce-mttr).Use this data source to get information about a specific service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Squadcast.GetService.Invoke(new()
        ///     {
        ///         Name = squadcast_service.Test.Name,
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("squadcast:index/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// [Squadcast Services](https://support.squadcast.com/docs/adding-a-service-1) are the core components of your infrastructure/application for which alerts are generated. Services in Squadcast represent specific systems, applications, components, products, or teams for which an incident is created. To check out some of the best practices on creating Services in Squadcast, refer to the guide [here](https://www.squadcast.com/blog/how-to-configure-services-in-squadcast-best-practices-to-reduce-mttr).Use this data source to get information about a specific service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Squadcast.GetService.Invoke(new()
        ///     {
        ///         Name = squadcast_service.Test.Name,
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("squadcast:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Service.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public string TeamId { get; set; } = null!;

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Service.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// Active alert source endpoints.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ActiveAlertSourceEndpoints;
        /// <summary>
        /// All available alert source endpoints.
        /// </summary>
        public readonly ImmutableDictionary<string, string> AlertSourceEndpoints;
        /// <summary>
        /// Unique API key of the service
        /// </summary>
        public readonly string ApiKey;
        /// <summary>
        /// dependencies.
        /// </summary>
        public readonly ImmutableArray<string> Dependencies;
        /// <summary>
        /// Detailed description about the service.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Email.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// Email prefix.
        /// </summary>
        public readonly string EmailPrefix;
        /// <summary>
        /// Escalation policy id.
        /// </summary>
        public readonly string EscalationPolicyId;
        /// <summary>
        /// Service id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Service owner
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMaintainerResult> Maintainers;
        /// <summary>
        /// Name of the Service.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.
        /// </summary>
        public readonly string SlackChannelId;
        /// <summary>
        /// Service tags
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceTagResult> Tags;
        /// <summary>
        /// Team id.
        /// </summary>
        public readonly string TeamId;

        [OutputConstructor]
        private GetServiceResult(
            ImmutableDictionary<string, string> activeAlertSourceEndpoints,

            ImmutableDictionary<string, string> alertSourceEndpoints,

            string apiKey,

            ImmutableArray<string> dependencies,

            string description,

            string email,

            string emailPrefix,

            string escalationPolicyId,

            string id,

            ImmutableArray<Outputs.GetServiceMaintainerResult> maintainers,

            string name,

            string slackChannelId,

            ImmutableArray<Outputs.GetServiceTagResult> tags,

            string teamId)
        {
            ActiveAlertSourceEndpoints = activeAlertSourceEndpoints;
            AlertSourceEndpoints = alertSourceEndpoints;
            ApiKey = apiKey;
            Dependencies = dependencies;
            Description = description;
            Email = email;
            EmailPrefix = emailPrefix;
            EscalationPolicyId = escalationPolicyId;
            Id = id;
            Maintainers = maintainers;
            Name = name;
            SlackChannelId = slackChannelId;
            Tags = tags;
            TeamId = teamId;
        }
    }
}
