// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Squadcast
{
    /// <summary>
    /// [Squads](https://support.squadcast.com/docs/squads) are smaller groups of members within Teams. Squads could correspond to groups of people that are responsible for specific projects within a Team.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "example test name",
    ///     });
    /// 
    ///     var exampleUser = Squadcast.GetUser.Invoke(new()
    ///     {
    ///         Email = "test@example.com",
    ///     });
    /// 
    ///     var exampleSquad = new Squadcast.Squad("exampleSquad", new()
    ///     {
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         MemberIds = new[]
    ///         {
    ///             exampleUser.Apply(getUserResult =&gt; getUserResult.Id),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// teamID:squadID Use 'Get All Teams' and 'Get All Squads' APIs to get the id of the squad and slo respectively
    /// 
    /// ```sh
    ///  $ pulumi import squadcast:index/squad:Squad test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:index/squad:Squad")]
    public partial class Squad : global::Pulumi.CustomResource
    {
        /// <summary>
        /// User ObjectId.
        /// </summary>
        [Output("memberIds")]
        public Output<ImmutableArray<string>> MemberIds { get; private set; } = null!;

        /// <summary>
        /// Name of the Squad.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a Squad resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Squad(string name, SquadArgs args, CustomResourceOptions? options = null)
            : base("squadcast:index/squad:Squad", name, args ?? new SquadArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Squad(string name, Input<string> id, SquadState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/squad:Squad", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Squad resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Squad Get(string name, Input<string> id, SquadState? state = null, CustomResourceOptions? options = null)
        {
            return new Squad(name, id, state, options);
        }
    }

    public sealed class SquadArgs : global::Pulumi.ResourceArgs
    {
        [Input("memberIds", required: true)]
        private InputList<string>? _memberIds;

        /// <summary>
        /// User ObjectId.
        /// </summary>
        public InputList<string> MemberIds
        {
            get => _memberIds ?? (_memberIds = new InputList<string>());
            set => _memberIds = value;
        }

        /// <summary>
        /// Name of the Squad.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public SquadArgs()
        {
        }
        public static new SquadArgs Empty => new SquadArgs();
    }

    public sealed class SquadState : global::Pulumi.ResourceArgs
    {
        [Input("memberIds")]
        private InputList<string>? _memberIds;

        /// <summary>
        /// User ObjectId.
        /// </summary>
        public InputList<string> MemberIds
        {
            get => _memberIds ?? (_memberIds = new InputList<string>());
            set => _memberIds = value;
        }

        /// <summary>
        /// Name of the Squad.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public SquadState()
        {
        }
        public static new SquadState Empty => new SquadState();
    }
}
