// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Squadcast
{
    /// <summary>
    /// [Suppression rules](https://support.squadcast.com/docs/alert-suppression) can help you avoid alert fatigue by suppressing notifications for non-actionable alerts.Squadcast will suppress the incidents that match any of the Suppression Rules you create for your Services. These incidents will go into the Suppressed state and you will not get any notifications for them
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "exammple team name",
    ///     });
    /// 
    ///     var exampleService = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "example service name",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleSuppressionRules = new Squadcast.SuppressionRules("exampleSuppressionRules", new()
    ///     {
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         Rules = new[]
    ///         {
    ///             new Squadcast.Inputs.SuppressionRulesRuleArgs
    ///             {
    ///                 IsBasic = false,
    ///                 Description = "not basic",
    ///                 Expression = "payload[\"event_id\"] == 40",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleTimeBasedSuppressionRules = new Squadcast.SuppressionRules("exampleTimeBasedSuppressionRules", new()
    ///     {
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         Rules = new[]
    ///         {
    ///             new Squadcast.Inputs.SuppressionRulesRuleArgs
    ///             {
    ///                 IsBasic = false,
    ///                 Description = "not basic",
    ///                 Expression = "payload[\"event_id\"] == 40",
    ///                 Timeslots = new[]
    ///                 {
    ///                     new Squadcast.Inputs.SuppressionRulesRuleTimeslotArgs
    ///                     {
    ///                         TimeZone = "Asia/Calcutta",
    ///                         StartTime = "2022-04-08T06:22:14.975Z",
    ///                         EndTime = "2022-04-28T06:22:14.975Z",
    ///                         EndsOn = "2022-04-28T06:22:14.975Z",
    ///                         Repetition = "none",
    ///                         IsAllday = false,
    ///                         EndsNever = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleTimeBasedSuppressionRulesCustomRepetition = new Squadcast.SuppressionRules("exampleTimeBasedSuppressionRulesCustomRepetition", new()
    ///     {
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         Rules = new[]
    ///         {
    ///             new Squadcast.Inputs.SuppressionRulesRuleArgs
    ///             {
    ///                 IsBasic = false,
    ///                 Description = "not basic",
    ///                 Expression = "payload[\"event_id\"] == 40",
    ///                 Timeslots = new[]
    ///                 {
    ///                     new Squadcast.Inputs.SuppressionRulesRuleTimeslotArgs
    ///                     {
    ///                         TimeZone = "Asia/Calcutta",
    ///                         StartTime = "2022-04-08T06:22:14.975Z",
    ///                         EndTime = "2022-04-28T06:22:14.975Z",
    ///                         EndsOn = "2022-04-28T06:22:14.975Z",
    ///                         Repetition = "custom",
    ///                         IsAllday = false,
    ///                         EndsNever = true,
    ///                         Customs = new[]
    ///                         {
    ///                             new Squadcast.Inputs.SuppressionRulesRuleTimeslotCustomArgs
    ///                             {
    ///                                 Repeats = "day",
    ///                                 RepeatsCount = 2,
    ///                             },
    ///                         },
    ///                     },
    ///                     new Squadcast.Inputs.SuppressionRulesRuleTimeslotArgs
    ///                     {
    ///                         TimeZone = "Asia/Calcutta",
    ///                         StartTime = "2022-04-08T06:22:14.975Z",
    ///                         EndTime = "2022-04-28T06:22:14.975Z",
    ///                         EndsOn = "2022-04-28T06:22:14.975Z",
    ///                         Repetition = "custom",
    ///                         IsAllday = false,
    ///                         EndsNever = true,
    ///                         Customs = new[]
    ///                         {
    ///                             new Squadcast.Inputs.SuppressionRulesRuleTimeslotCustomArgs
    ///                             {
    ///                                 Repeats = "week",
    ///                                 RepeatsCount = 4,
    ///                                 RepeatsOnWeekdays = new[]
    ///                                 {
    ///                                     0,
    ///                                     1,
    ///                                     2,
    ///                                     3,
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     new Squadcast.Inputs.SuppressionRulesRuleTimeslotArgs
    ///                     {
    ///                         TimeZone = "Asia/Calcutta",
    ///                         StartTime = "2022-04-08T06:22:14.975Z",
    ///                         EndTime = "2022-04-28T06:22:14.975Z",
    ///                         EndsOn = "2022-04-28T06:22:14.975Z",
    ///                         Repetition = "custom",
    ///                         IsAllday = false,
    ///                         EndsNever = true,
    ///                         Customs = new[]
    ///                         {
    ///                             new Squadcast.Inputs.SuppressionRulesRuleTimeslotCustomArgs
    ///                             {
    ///                                 Repeats = "month",
    ///                                 RepeatsCount = 6,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
    /// 
    /// ```sh
    ///  $ pulumi import squadcast:index/suppressionRules:SuppressionRules test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:index/suppressionRules:SuppressionRules")]
    public partial class SuppressionRules : global::Pulumi.CustomResource
    {
        [Output("rules")]
        public Output<ImmutableArray<Outputs.SuppressionRulesRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Service id.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a SuppressionRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SuppressionRules(string name, SuppressionRulesArgs args, CustomResourceOptions? options = null)
            : base("squadcast:index/suppressionRules:SuppressionRules", name, args ?? new SuppressionRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SuppressionRules(string name, Input<string> id, SuppressionRulesState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/suppressionRules:SuppressionRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SuppressionRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SuppressionRules Get(string name, Input<string> id, SuppressionRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new SuppressionRules(name, id, state, options);
        }
    }

    public sealed class SuppressionRulesArgs : global::Pulumi.ResourceArgs
    {
        [Input("rules", required: true)]
        private InputList<Inputs.SuppressionRulesRuleArgs>? _rules;
        public InputList<Inputs.SuppressionRulesRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SuppressionRulesRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public SuppressionRulesArgs()
        {
        }
        public static new SuppressionRulesArgs Empty => new SuppressionRulesArgs();
    }

    public sealed class SuppressionRulesState : global::Pulumi.ResourceArgs
    {
        [Input("rules")]
        private InputList<Inputs.SuppressionRulesRuleGetArgs>? _rules;
        public InputList<Inputs.SuppressionRulesRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SuppressionRulesRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public SuppressionRulesState()
        {
        }
        public static new SuppressionRulesState Empty => new SuppressionRulesState();
    }
}
