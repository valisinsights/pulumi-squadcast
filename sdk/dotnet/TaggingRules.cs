// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Squadcast
{
    /// <summary>
    /// [Tagging](https://support.squadcast.com/docs/event-tagging) is a rule-based, auto-tagging system with which you can define customised tags based on incident payloads, that get automatically assigned to incidents when they are triggered.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "example test name",
    ///     });
    /// 
    ///     var exampleService = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "example service name",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleTaggingRules = new Squadcast.TaggingRules("exampleTaggingRules", new()
    ///     {
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         Rules = new[]
    ///         {
    ///             new Squadcast.Inputs.TaggingRulesRuleArgs
    ///             {
    ///                 IsBasic = false,
    ///                 Expression = "payload[\"event_id\"] == 40",
    ///                 Tags = new[]
    ///                 {
    ///                     new Squadcast.Inputs.TaggingRulesRuleTagArgs
    ///                     {
    ///                         Key = "MyTag",
    ///                         Value = "foo",
    ///                         Color = "#ababab",
    ///                     },
    ///                 },
    ///             },
    ///             new Squadcast.Inputs.TaggingRulesRuleArgs
    ///             {
    ///                 IsBasic = true,
    ///                 BasicExpressions = new[]
    ///                 {
    ///                     new Squadcast.Inputs.TaggingRulesRuleBasicExpressionArgs
    ///                     {
    ///                         Lhs = "payload[\"foo\"]",
    ///                         Op = "is",
    ///                         Rhs = "bar",
    ///                     },
    ///                 },
    ///                 Tags = new[]
    ///                 {
    ///                     new Squadcast.Inputs.TaggingRulesRuleTagArgs
    ///                     {
    ///                         Key = "MyTag",
    ///                         Value = "foo",
    ///                         Color = "#ababab",
    ///                     },
    ///                     new Squadcast.Inputs.TaggingRulesRuleTagArgs
    ///                     {
    ///                         Key = "MyTag2",
    ///                         Value = "bar",
    ///                         Color = "#f0f0f0",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // addTags must be set in expression when tags are not passed
    ///     var exampleTaggingRulesResourceWithouttags = new Squadcast.TaggingRules("exampleTaggingRulesResourceWithouttags", new()
    ///     {
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         Rules = new[]
    ///         {
    ///             new Squadcast.Inputs.TaggingRulesRuleArgs
    ///             {
    ///                 IsBasic = false,
    ///                 Expression = "addTag(\"EventType\", payload.details.event_type_key, \"#037916\")",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
    /// 
    /// ```sh
    ///  $ pulumi import squadcast:index/taggingRules:TaggingRules test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:index/taggingRules:TaggingRules")]
    public partial class TaggingRules : global::Pulumi.CustomResource
    {
        [Output("rules")]
        public Output<ImmutableArray<Outputs.TaggingRulesRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Service id.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a TaggingRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TaggingRules(string name, TaggingRulesArgs args, CustomResourceOptions? options = null)
            : base("squadcast:index/taggingRules:TaggingRules", name, args ?? new TaggingRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TaggingRules(string name, Input<string> id, TaggingRulesState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/taggingRules:TaggingRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TaggingRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TaggingRules Get(string name, Input<string> id, TaggingRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new TaggingRules(name, id, state, options);
        }
    }

    public sealed class TaggingRulesArgs : global::Pulumi.ResourceArgs
    {
        [Input("rules", required: true)]
        private InputList<Inputs.TaggingRulesRuleArgs>? _rules;
        public InputList<Inputs.TaggingRulesRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.TaggingRulesRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public TaggingRulesArgs()
        {
        }
        public static new TaggingRulesArgs Empty => new TaggingRulesArgs();
    }

    public sealed class TaggingRulesState : global::Pulumi.ResourceArgs
    {
        [Input("rules")]
        private InputList<Inputs.TaggingRulesRuleGetArgs>? _rules;
        public InputList<Inputs.TaggingRulesRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.TaggingRulesRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public TaggingRulesState()
        {
        }
        public static new TaggingRulesState Empty => new TaggingRulesState();
    }
}
