// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Squadcast
{
    public static class GetWebform
    {
        /// <summary>
        /// [Squadcast Webforms](https://support.squadcast.com/webforms/webforms) allows organizations to expand their customer support by hosting public Webforms, so their customers can quickly create an alert from outside the Squadcast ecosystem. Not only this, but internal stakeholders can also leverage Webforms for easy alert creation. Use this data source to get information about a specific webform.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var webform = Squadcast.GetWebform.Invoke(new()
        ///     {
        ///         Name = "webformName",
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetWebformResult> InvokeAsync(GetWebformArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWebformResult>("squadcast:index/getWebform:getWebform", args ?? new GetWebformArgs(), options.WithDefaults());

        /// <summary>
        /// [Squadcast Webforms](https://support.squadcast.com/webforms/webforms) allows organizations to expand their customer support by hosting public Webforms, so their customers can quickly create an alert from outside the Squadcast ecosystem. Not only this, but internal stakeholders can also leverage Webforms for easy alert creation. Use this data source to get information about a specific webform.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var webform = Squadcast.GetWebform.Invoke(new()
        ///     {
        ///         Name = "webformName",
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetWebformResult> Invoke(GetWebformInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWebformResult>("squadcast:index/getWebform:getWebform", args ?? new GetWebformInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWebformArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Webform.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public string TeamId { get; set; } = null!;

        public GetWebformArgs()
        {
        }
        public static new GetWebformArgs Empty => new GetWebformArgs();
    }

    public sealed class GetWebformInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Webform.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public GetWebformInvokeArgs()
        {
        }
        public static new GetWebformInvokeArgs Empty => new GetWebformInvokeArgs();
    }


    [OutputType]
    public sealed class GetWebformResult
    {
        /// <summary>
        /// Custom domain name (URL).
        /// </summary>
        public readonly string CustomDomainName;
        /// <summary>
        /// Description of the Webform.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Defines when to send email to the reporter (triggered, acknowledged, resolved).
        /// </summary>
        public readonly ImmutableArray<string> EmailOns;
        /// <summary>
        /// Footer link.
        /// </summary>
        public readonly string FooterLink;
        /// <summary>
        /// Footer text.
        /// </summary>
        public readonly string FooterText;
        /// <summary>
        /// Webform header.
        /// </summary>
        public readonly string Header;
        /// <summary>
        /// Webform id.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// Input Fields added to Webforms. Added as tags to incident based on selection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWebformInputFieldResult> InputFields;
        /// <summary>
        /// Name of the Webform.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Form owner.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWebformOwnerResult> Owners;
        /// <summary>
        /// Public URL of the Webform.
        /// </summary>
        public readonly string PublicUrl;
        /// <summary>
        /// Services added to Webform.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWebformServiceResult> Services;
        /// <summary>
        /// Severity of the Incident.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWebformSeverityResult> Severities;
        /// <summary>
        /// Webform Tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Team id.
        /// </summary>
        public readonly string TeamId;
        /// <summary>
        /// Webform title (public).
        /// </summary>
        public readonly string Title;

        [OutputConstructor]
        private GetWebformResult(
            string customDomainName,

            string description,

            ImmutableArray<string> emailOns,

            string footerLink,

            string footerText,

            string header,

            int id,

            ImmutableArray<Outputs.GetWebformInputFieldResult> inputFields,

            string name,

            ImmutableArray<Outputs.GetWebformOwnerResult> owners,

            string publicUrl,

            ImmutableArray<Outputs.GetWebformServiceResult> services,

            ImmutableArray<Outputs.GetWebformSeverityResult> severities,

            ImmutableDictionary<string, string> tags,

            string teamId,

            string title)
        {
            CustomDomainName = customDomainName;
            Description = description;
            EmailOns = emailOns;
            FooterLink = footerLink;
            FooterText = footerText;
            Header = header;
            Id = id;
            InputFields = inputFields;
            Name = name;
            Owners = owners;
            PublicUrl = publicUrl;
            Services = services;
            Severities = severities;
            Tags = tags;
            TeamId = teamId;
            Title = title;
        }
    }
}
