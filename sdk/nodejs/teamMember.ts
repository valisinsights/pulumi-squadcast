// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * You can manage the members of a Team here.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleUser = squadcast.getUser({
 *     email: "test@example.com",
 * });
 * const exampleTeamRole = exampleTeam.then(exampleTeam => squadcast.getTeamRole({
 *     name: "example role name",
 *     teamId: exampleTeam.id,
 * }));
 * const exampleTeamMember = new squadcast.TeamMember("exampleTeamMember", {
 *     teamId: exampleTeam.then(exampleTeam => exampleTeam.id),
 *     userId: exampleUser.then(exampleUser => exampleUser.id),
 *     roleIds: [exampleTeamRole.then(exampleTeamRole => exampleTeamRole.id)],
 * });
 * ```
 *
 * ## Import
 *
 * teamID:emailID Use 'Get All Teams' API to get the id of the team
 *
 * ```sh
 *  $ pulumi import squadcast:index/teamMember:TeamMember example_resource_name 62d2fe23a57381088224d726:test@example.com
 * ```
 */
export class TeamMember extends pulumi.CustomResource {
    /**
     * Get an existing TeamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamMemberState, opts?: pulumi.CustomResourceOptions): TeamMember {
        return new TeamMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/teamMember:TeamMember';

    /**
     * Returns true if the given object is an instance of TeamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamMember.__pulumiType;
    }

    /**
     * role ids.
     */
    public readonly roleIds!: pulumi.Output<string[]>;
    /**
     * Team id.
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * user id (ObjectId).
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a TeamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamMemberArgs | TeamMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamMemberState | undefined;
            resourceInputs["roleIds"] = state ? state.roleIds : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as TeamMemberArgs | undefined;
            if ((!args || args.roleIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleIds'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["roleIds"] = args ? args.roleIds : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamMember.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamMember resources.
 */
export interface TeamMemberState {
    /**
     * role ids.
     */
    roleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Team id.
     */
    teamId?: pulumi.Input<string>;
    /**
     * user id (ObjectId).
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamMember resource.
 */
export interface TeamMemberArgs {
    /**
     * role ids.
     */
    roleIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Team id.
     */
    teamId: pulumi.Input<string>;
    /**
     * user id (ObjectId).
     */
    userId: pulumi.Input<string>;
}
