// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [Schedule rotations](https://support.squadcast.com/schedules/schedules-new/adding-a-schedule#2.-choose-a-rotation-pattern) are used to manage on-call scheduling & determine who will be notified when an incident is triggered.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleUser = squadcast.getUser({
 *     email: "test@example.com",
 * });
 * const exampleUser2 = squadcast.getUser({
 *     email: "test2@example.com",
 * });
 * const getSchedule = exampleTeam.then(exampleTeam => squadcast.getScheduleV2({
 *     name: "Test Schedule",
 *     teamId: exampleTeam.id,
 * }));
 * // Create a rotation with weekly period
 * const rotationsWithWeeklyPeriod = new squadcast.ScheduleRotationV2("rotationsWithWeeklyPeriod", {
 *     scheduleId: getSchedule.then(getSchedule => getSchedule.id),
 *     startDate: "2023-07-01T00:00:00Z",
 *     period: "weekly",
 *     shiftTimeslots: [{
 *         startHour: 10,
 *         startMinute: 30,
 *         duration: 720,
 *     }],
 *     changeParticipantsFrequency: 1,
 *     changeParticipantsUnit: "rotation",
 *     participantGroups: [{
 *         participants: [
 *             {
 *                 id: exampleUser.then(exampleUser => exampleUser.id),
 *                 type: "user",
 *             },
 *             {
 *                 id: exampleUser2.then(exampleUser2 => exampleUser2.id),
 *                 type: "user",
 *             },
 *         ],
 *     }],
 *     endsAfterIterations: 2,
 * });
 * // Create a rotation with custom period
 * const rotationsWithCustomPeriod = new squadcast.ScheduleRotationV2("rotationsWithCustomPeriod", {
 *     scheduleId: getSchedule.then(getSchedule => getSchedule.id),
 *     startDate: "2023-06-13T00:00:00Z",
 *     period: "custom",
 *     shiftTimeslots: [
 *         {
 *             startHour: 10,
 *             startMinute: 0,
 *             duration: 1440,
 *             dayOfWeek: "saturday",
 *         },
 *         {
 *             startHour: 12,
 *             startMinute: 30,
 *             duration: 720,
 *             dayOfWeek: "sunday",
 *         },
 *     ],
 *     changeParticipantsFrequency: 1,
 *     changeParticipantsUnit: "rotation",
 *     customPeriodFrequency: 1,
 *     customPeriodUnit: "week",
 *     participantGroups: [
 *         {
 *             participants: [{
 *                 id: exampleUser.then(exampleUser => exampleUser.id),
 *                 type: "user",
 *             }],
 *         },
 *         {
 *             participants: [{
 *                 id: exampleUser2.then(exampleUser2 => exampleUser2.id),
 *                 type: "user",
 *             }],
 *         },
 *     ],
 *     endDate: "2023-08-31T00:00:00Z",
 * });
 * ```
 *
 * ## Import
 *
 * teamID:scheduleName:rotationName
 *
 * ```sh
 *  $ pulumi import squadcast:index/scheduleRotationV2:ScheduleRotationV2 rotation "62d2fe23a57381088224d726:Example Schedule:Example Rotation"
 * ```
 */
export class ScheduleRotationV2 extends pulumi.CustomResource {
    /**
     * Get an existing ScheduleRotationV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduleRotationV2State, opts?: pulumi.CustomResourceOptions): ScheduleRotationV2 {
        return new ScheduleRotationV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/scheduleRotationV2:ScheduleRotationV2';

    /**
     * Returns true if the given object is an instance of ScheduleRotationV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduleRotationV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduleRotationV2.__pulumiType;
    }

    /**
     * Frequency with which participants change in the rotation.
     */
    public readonly changeParticipantsFrequency!: pulumi.Output<number>;
    /**
     * Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
     */
    public readonly changeParticipantsUnit!: pulumi.Output<string>;
    /**
     * Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
     */
    public readonly customPeriodFrequency!: pulumi.Output<number | undefined>;
    /**
     * Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
     */
    public readonly customPeriodUnit!: pulumi.Output<string | undefined>;
    /**
     * Defines the end date of the schedule rotation.
     */
    public readonly endDate!: pulumi.Output<string | undefined>;
    /**
     * Defines the number of iterations of the schedule rotation.
     */
    public readonly endsAfterIterations!: pulumi.Output<number | undefined>;
    /**
     * Rotation name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
     */
    public readonly participantGroups!: pulumi.Output<outputs.ScheduleRotationV2ParticipantGroup[] | undefined>;
    /**
     * Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
     */
    public readonly period!: pulumi.Output<string>;
    /**
     * id of the schedule that the rotation belongs to.
     */
    public readonly scheduleId!: pulumi.Output<number>;
    /**
     * Timeslots where the rotation is active.
     */
    public readonly shiftTimeslots!: pulumi.Output<outputs.ScheduleRotationV2ShiftTimeslot[]>;
    /**
     * Defines the start date of the rotation.
     */
    public readonly startDate!: pulumi.Output<string>;

    /**
     * Create a ScheduleRotationV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduleRotationV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduleRotationV2Args | ScheduleRotationV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduleRotationV2State | undefined;
            resourceInputs["changeParticipantsFrequency"] = state ? state.changeParticipantsFrequency : undefined;
            resourceInputs["changeParticipantsUnit"] = state ? state.changeParticipantsUnit : undefined;
            resourceInputs["customPeriodFrequency"] = state ? state.customPeriodFrequency : undefined;
            resourceInputs["customPeriodUnit"] = state ? state.customPeriodUnit : undefined;
            resourceInputs["endDate"] = state ? state.endDate : undefined;
            resourceInputs["endsAfterIterations"] = state ? state.endsAfterIterations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["participantGroups"] = state ? state.participantGroups : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["scheduleId"] = state ? state.scheduleId : undefined;
            resourceInputs["shiftTimeslots"] = state ? state.shiftTimeslots : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
        } else {
            const args = argsOrState as ScheduleRotationV2Args | undefined;
            if ((!args || args.changeParticipantsFrequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'changeParticipantsFrequency'");
            }
            if ((!args || args.changeParticipantsUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'changeParticipantsUnit'");
            }
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if ((!args || args.scheduleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduleId'");
            }
            if ((!args || args.shiftTimeslots === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shiftTimeslots'");
            }
            if ((!args || args.startDate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startDate'");
            }
            resourceInputs["changeParticipantsFrequency"] = args ? args.changeParticipantsFrequency : undefined;
            resourceInputs["changeParticipantsUnit"] = args ? args.changeParticipantsUnit : undefined;
            resourceInputs["customPeriodFrequency"] = args ? args.customPeriodFrequency : undefined;
            resourceInputs["customPeriodUnit"] = args ? args.customPeriodUnit : undefined;
            resourceInputs["endDate"] = args ? args.endDate : undefined;
            resourceInputs["endsAfterIterations"] = args ? args.endsAfterIterations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["participantGroups"] = args ? args.participantGroups : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["scheduleId"] = args ? args.scheduleId : undefined;
            resourceInputs["shiftTimeslots"] = args ? args.shiftTimeslots : undefined;
            resourceInputs["startDate"] = args ? args.startDate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduleRotationV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduleRotationV2 resources.
 */
export interface ScheduleRotationV2State {
    /**
     * Frequency with which participants change in the rotation.
     */
    changeParticipantsFrequency?: pulumi.Input<number>;
    /**
     * Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
     */
    changeParticipantsUnit?: pulumi.Input<string>;
    /**
     * Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
     */
    customPeriodFrequency?: pulumi.Input<number>;
    /**
     * Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
     */
    customPeriodUnit?: pulumi.Input<string>;
    /**
     * Defines the end date of the schedule rotation.
     */
    endDate?: pulumi.Input<string>;
    /**
     * Defines the number of iterations of the schedule rotation.
     */
    endsAfterIterations?: pulumi.Input<number>;
    /**
     * Rotation name.
     */
    name?: pulumi.Input<string>;
    /**
     * Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
     */
    participantGroups?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationV2ParticipantGroup>[]>;
    /**
     * Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
     */
    period?: pulumi.Input<string>;
    /**
     * id of the schedule that the rotation belongs to.
     */
    scheduleId?: pulumi.Input<number>;
    /**
     * Timeslots where the rotation is active.
     */
    shiftTimeslots?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationV2ShiftTimeslot>[]>;
    /**
     * Defines the start date of the rotation.
     */
    startDate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScheduleRotationV2 resource.
 */
export interface ScheduleRotationV2Args {
    /**
     * Frequency with which participants change in the rotation.
     */
    changeParticipantsFrequency: pulumi.Input<number>;
    /**
     * Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
     */
    changeParticipantsUnit: pulumi.Input<string>;
    /**
     * Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
     */
    customPeriodFrequency?: pulumi.Input<number>;
    /**
     * Unit of the custom rotation repeat pattern (day, week, month). Only applicable if period is set to custom.
     */
    customPeriodUnit?: pulumi.Input<string>;
    /**
     * Defines the end date of the schedule rotation.
     */
    endDate?: pulumi.Input<string>;
    /**
     * Defines the number of iterations of the schedule rotation.
     */
    endsAfterIterations?: pulumi.Input<number>;
    /**
     * Rotation name.
     */
    name?: pulumi.Input<string>;
    /**
     * Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
     */
    participantGroups?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationV2ParticipantGroup>[]>;
    /**
     * Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
     */
    period: pulumi.Input<string>;
    /**
     * id of the schedule that the rotation belongs to.
     */
    scheduleId: pulumi.Input<number>;
    /**
     * Timeslots where the rotation is active.
     */
    shiftTimeslots: pulumi.Input<pulumi.Input<inputs.ScheduleRotationV2ShiftTimeslot>[]>;
    /**
     * Defines the start date of the rotation.
     */
    startDate: pulumi.Input<string>;
}
