// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [Maintenance Mode](https://support.squadcast.com/docs/maintenance-mode) enables you to reduce alert noise during the scheduled maintenance window. Alerts generated during active maintenance windows would be automatically suppressed and hence, no notifications are generated for those suppressed alerts.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleService = exampleTeam.then(exampleTeam => squadcast.getService({
 *     name: "example service name",
 *     teamId: exampleTeam.id,
 * }));
 * const exampleServiceMaintenance = new squadcast.ServiceMaintenance("exampleServiceMaintenance", {
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     windows: [
 *         {
 *             from: "2032-06-01T10:30:00.000Z",
 *             till: "2032-06-01T11:30:00.000Z",
 *             repeatTill: "2032-06-30T10:30:00.000Z",
 *             repeatFrequency: "week",
 *         },
 *         {
 *             from: "2032-07-01T10:30:00.000Z",
 *             till: "2032-07-02T10:30:00.000Z",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
 *
 * ```sh
 *  $ pulumi import squadcast:index/serviceMaintenance:ServiceMaintenance test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
 * ```
 */
export class ServiceMaintenance extends pulumi.CustomResource {
    /**
     * Get an existing ServiceMaintenance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceMaintenanceState, opts?: pulumi.CustomResourceOptions): ServiceMaintenance {
        return new ServiceMaintenance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/serviceMaintenance:ServiceMaintenance';

    /**
     * Returns true if the given object is an instance of ServiceMaintenance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceMaintenance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceMaintenance.__pulumiType;
    }

    /**
     * Service id.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * Date and Time range during which maintenance would be carried out
     */
    public readonly windows!: pulumi.Output<outputs.ServiceMaintenanceWindow[] | undefined>;

    /**
     * Create a ServiceMaintenance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceMaintenanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceMaintenanceArgs | ServiceMaintenanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceMaintenanceState | undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["windows"] = state ? state.windows : undefined;
        } else {
            const args = argsOrState as ServiceMaintenanceArgs | undefined;
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["windows"] = args ? args.windows : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceMaintenance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceMaintenance resources.
 */
export interface ServiceMaintenanceState {
    /**
     * Service id.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * Date and Time range during which maintenance would be carried out
     */
    windows?: pulumi.Input<pulumi.Input<inputs.ServiceMaintenanceWindow>[]>;
}

/**
 * The set of arguments for constructing a ServiceMaintenance resource.
 */
export interface ServiceMaintenanceArgs {
    /**
     * Service id.
     */
    serviceId: pulumi.Input<string>;
    /**
     * Date and Time range during which maintenance would be carried out
     */
    windows?: pulumi.Input<pulumi.Input<inputs.ServiceMaintenanceWindow>[]>;
}
