// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [Deduplication rules](https://support.squadcast.com/docs/de-duplication-rules) can help you reduce alert noise by organising and grouping alerts. This also provides easy access to similar alerts when needed. When these rules evaluate to true for an incoming incident, alerts will get deduplicated.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleService = exampleTeam.then(exampleTeam => squadcast.getService({
 *     name: "example service name",
 *     teamId: exampleTeam.id,
 * }));
 * const exampleDeduplicationRules = new squadcast.DeduplicationRules("exampleDeduplicationRules", {
 *     teamId: exampleTeam.then(exampleTeam => exampleTeam.id),
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     rules: [
 *         {
 *             isBasic: false,
 *             description: "not basic",
 *             expression: "payload[\"event_id\"] == 40",
 *         },
 *         {
 *             isBasic: true,
 *             description: "basic",
 *             basicExpressions: [{
 *                 lhs: "payload[\"foo\"]",
 *                 op: "is",
 *                 rhs: "bar",
 *             }],
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * teamID:serviceID Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
 *
 * ```sh
 *  $ pulumi import squadcast:index/deduplicationRules:DeduplicationRules test_resource_name 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
 * ```
 */
export class DeduplicationRules extends pulumi.CustomResource {
    /**
     * Get an existing DeduplicationRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeduplicationRulesState, opts?: pulumi.CustomResourceOptions): DeduplicationRules {
        return new DeduplicationRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/deduplicationRules:DeduplicationRules';

    /**
     * Returns true if the given object is an instance of DeduplicationRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeduplicationRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeduplicationRules.__pulumiType;
    }

    public readonly rules!: pulumi.Output<outputs.DeduplicationRulesRule[]>;
    /**
     * Service id.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * Team id.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a DeduplicationRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeduplicationRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeduplicationRulesArgs | DeduplicationRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeduplicationRulesState | undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as DeduplicationRulesArgs | undefined;
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeduplicationRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeduplicationRules resources.
 */
export interface DeduplicationRulesState {
    rules?: pulumi.Input<pulumi.Input<inputs.DeduplicationRulesRule>[]>;
    /**
     * Service id.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * Team id.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeduplicationRules resource.
 */
export interface DeduplicationRulesArgs {
    rules: pulumi.Input<pulumi.Input<inputs.DeduplicationRulesRule>[]>;
    /**
     * Service id.
     */
    serviceId: pulumi.Input<string>;
    /**
     * Team id.
     */
    teamId: pulumi.Input<string>;
}
