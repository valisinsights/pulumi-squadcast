// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DeduplicationRulesArgs, DeduplicationRulesState } from "./deduplicationRules";
export type DeduplicationRules = import("./deduplicationRules").DeduplicationRules;
export const DeduplicationRules: typeof import("./deduplicationRules").DeduplicationRules = null as any;
utilities.lazyLoad(exports, ["DeduplicationRules"], () => require("./deduplicationRules"));

export { EscalationPolicyArgs, EscalationPolicyState } from "./escalationPolicy";
export type EscalationPolicy = import("./escalationPolicy").EscalationPolicy;
export const EscalationPolicy: typeof import("./escalationPolicy").EscalationPolicy = null as any;
utilities.lazyLoad(exports, ["EscalationPolicy"], () => require("./escalationPolicy"));

export { GetEscalationPolicyArgs, GetEscalationPolicyResult, GetEscalationPolicyOutputArgs } from "./getEscalationPolicy";
export const getEscalationPolicy: typeof import("./getEscalationPolicy").getEscalationPolicy = null as any;
export const getEscalationPolicyOutput: typeof import("./getEscalationPolicy").getEscalationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEscalationPolicy","getEscalationPolicyOutput"], () => require("./getEscalationPolicy"));

export { GetRunbookArgs, GetRunbookResult, GetRunbookOutputArgs } from "./getRunbook";
export const getRunbook: typeof import("./getRunbook").getRunbook = null as any;
export const getRunbookOutput: typeof import("./getRunbook").getRunbookOutput = null as any;
utilities.lazyLoad(exports, ["getRunbook","getRunbookOutput"], () => require("./getRunbook"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { GetScheduleV2Args, GetScheduleV2Result, GetScheduleV2OutputArgs } from "./getScheduleV2";
export const getScheduleV2: typeof import("./getScheduleV2").getScheduleV2 = null as any;
export const getScheduleV2Output: typeof import("./getScheduleV2").getScheduleV2Output = null as any;
utilities.lazyLoad(exports, ["getScheduleV2","getScheduleV2Output"], () => require("./getScheduleV2"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetSquadArgs, GetSquadResult, GetSquadOutputArgs } from "./getSquad";
export const getSquad: typeof import("./getSquad").getSquad = null as any;
export const getSquadOutput: typeof import("./getSquad").getSquadOutput = null as any;
utilities.lazyLoad(exports, ["getSquad","getSquadOutput"], () => require("./getSquad"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetTeamRoleArgs, GetTeamRoleResult, GetTeamRoleOutputArgs } from "./getTeamRole";
export const getTeamRole: typeof import("./getTeamRole").getTeamRole = null as any;
export const getTeamRoleOutput: typeof import("./getTeamRole").getTeamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getTeamRole","getTeamRoleOutput"], () => require("./getTeamRole"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetWebformArgs, GetWebformResult, GetWebformOutputArgs } from "./getWebform";
export const getWebform: typeof import("./getWebform").getWebform = null as any;
export const getWebformOutput: typeof import("./getWebform").getWebformOutput = null as any;
utilities.lazyLoad(exports, ["getWebform","getWebformOutput"], () => require("./getWebform"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoutingRulesArgs, RoutingRulesState } from "./routingRules";
export type RoutingRules = import("./routingRules").RoutingRules;
export const RoutingRules: typeof import("./routingRules").RoutingRules = null as any;
utilities.lazyLoad(exports, ["RoutingRules"], () => require("./routingRules"));

export { RunbookArgs, RunbookState } from "./runbook";
export type Runbook = import("./runbook").Runbook;
export const Runbook: typeof import("./runbook").Runbook = null as any;
utilities.lazyLoad(exports, ["Runbook"], () => require("./runbook"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { ScheduleRotationV2Args, ScheduleRotationV2State } from "./scheduleRotationV2";
export type ScheduleRotationV2 = import("./scheduleRotationV2").ScheduleRotationV2;
export const ScheduleRotationV2: typeof import("./scheduleRotationV2").ScheduleRotationV2 = null as any;
utilities.lazyLoad(exports, ["ScheduleRotationV2"], () => require("./scheduleRotationV2"));

export { ScheduleV2Args, ScheduleV2State } from "./scheduleV2";
export type ScheduleV2 = import("./scheduleV2").ScheduleV2;
export const ScheduleV2: typeof import("./scheduleV2").ScheduleV2 = null as any;
utilities.lazyLoad(exports, ["ScheduleV2"], () => require("./scheduleV2"));

export { SebformArgs, SebformState } from "./sebform";
export type Sebform = import("./sebform").Sebform;
export const Sebform: typeof import("./sebform").Sebform = null as any;
utilities.lazyLoad(exports, ["Sebform"], () => require("./sebform"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceMaintenanceArgs, ServiceMaintenanceState } from "./serviceMaintenance";
export type ServiceMaintenance = import("./serviceMaintenance").ServiceMaintenance;
export const ServiceMaintenance: typeof import("./serviceMaintenance").ServiceMaintenance = null as any;
utilities.lazyLoad(exports, ["ServiceMaintenance"], () => require("./serviceMaintenance"));

export { SLOArgs, SLOState } from "./slo";
export type SLO = import("./slo").SLO;
export const SLO: typeof import("./slo").SLO = null as any;
utilities.lazyLoad(exports, ["SLO"], () => require("./slo"));

export { SquadArgs, SquadState } from "./squad";
export type Squad = import("./squad").Squad;
export const Squad: typeof import("./squad").Squad = null as any;
utilities.lazyLoad(exports, ["Squad"], () => require("./squad"));

export { SuppressionRulesArgs, SuppressionRulesState } from "./suppressionRules";
export type SuppressionRules = import("./suppressionRules").SuppressionRules;
export const SuppressionRules: typeof import("./suppressionRules").SuppressionRules = null as any;
utilities.lazyLoad(exports, ["SuppressionRules"], () => require("./suppressionRules"));

export { TaggingRulesArgs, TaggingRulesState } from "./taggingRules";
export type TaggingRules = import("./taggingRules").TaggingRules;
export const TaggingRules: typeof import("./taggingRules").TaggingRules = null as any;
utilities.lazyLoad(exports, ["TaggingRules"], () => require("./taggingRules"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamMemberArgs, TeamMemberState } from "./teamMember";
export type TeamMember = import("./teamMember").TeamMember;
export const TeamMember: typeof import("./teamMember").TeamMember = null as any;
utilities.lazyLoad(exports, ["TeamMember"], () => require("./teamMember"));

export { TeamRoleArgs, TeamRoleState } from "./teamRole";
export type TeamRole = import("./teamRole").TeamRole;
export const TeamRole: typeof import("./teamRole").TeamRole = null as any;
utilities.lazyLoad(exports, ["TeamRole"], () => require("./teamRole"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "squadcast:index/deduplicationRules:DeduplicationRules":
                return new DeduplicationRules(name, <any>undefined, { urn })
            case "squadcast:index/escalationPolicy:EscalationPolicy":
                return new EscalationPolicy(name, <any>undefined, { urn })
            case "squadcast:index/routingRules:RoutingRules":
                return new RoutingRules(name, <any>undefined, { urn })
            case "squadcast:index/runbook:Runbook":
                return new Runbook(name, <any>undefined, { urn })
            case "squadcast:index/sLO:SLO":
                return new SLO(name, <any>undefined, { urn })
            case "squadcast:index/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "squadcast:index/scheduleRotationV2:ScheduleRotationV2":
                return new ScheduleRotationV2(name, <any>undefined, { urn })
            case "squadcast:index/scheduleV2:ScheduleV2":
                return new ScheduleV2(name, <any>undefined, { urn })
            case "squadcast:index/sebform:Sebform":
                return new Sebform(name, <any>undefined, { urn })
            case "squadcast:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "squadcast:index/serviceMaintenance:ServiceMaintenance":
                return new ServiceMaintenance(name, <any>undefined, { urn })
            case "squadcast:index/squad:Squad":
                return new Squad(name, <any>undefined, { urn })
            case "squadcast:index/suppressionRules:SuppressionRules":
                return new SuppressionRules(name, <any>undefined, { urn })
            case "squadcast:index/taggingRules:TaggingRules":
                return new TaggingRules(name, <any>undefined, { urn })
            case "squadcast:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "squadcast:index/teamMember:TeamMember":
                return new TeamMember(name, <any>undefined, { urn })
            case "squadcast:index/teamRole:TeamRole":
                return new TeamRole(name, <any>undefined, { urn })
            case "squadcast:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("squadcast", "index/deduplicationRules", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/escalationPolicy", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/routingRules", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/runbook", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/sLO", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/schedule", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/scheduleRotationV2", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/scheduleV2", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/sebform", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/service", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/serviceMaintenance", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/squad", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/suppressionRules", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/taggingRules", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/team", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/teamMember", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/teamRole", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/user", _module)
pulumi.runtime.registerResourcePackage("squadcast", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:squadcast") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
