// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [Squads](https://support.squadcast.com/docs/squads) are smaller groups of members within Teams. Squads could correspond to groups of people that are responsible for specific projects within a Team.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example test name",
 * });
 * const exampleUser = squadcast.getUser({
 *     email: "test@example.com",
 * });
 * const exampleSquad = new squadcast.Squad("exampleSquad", {
 *     teamId: exampleTeam.then(exampleTeam => exampleTeam.id),
 *     memberIds: [exampleUser.then(exampleUser => exampleUser.id)],
 * });
 * ```
 *
 * ## Import
 *
 * teamID:squadID Use 'Get All Teams' and 'Get All Squads' APIs to get the id of the squad and slo respectively
 *
 * ```sh
 *  $ pulumi import squadcast:index/squad:Squad test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
 * ```
 */
export class Squad extends pulumi.CustomResource {
    /**
     * Get an existing Squad resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SquadState, opts?: pulumi.CustomResourceOptions): Squad {
        return new Squad(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/squad:Squad';

    /**
     * Returns true if the given object is an instance of Squad.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Squad {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Squad.__pulumiType;
    }

    /**
     * User ObjectId.
     */
    public readonly memberIds!: pulumi.Output<string[]>;
    /**
     * Name of the Squad.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Team id.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a Squad resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SquadArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SquadArgs | SquadState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SquadState | undefined;
            resourceInputs["memberIds"] = state ? state.memberIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as SquadArgs | undefined;
            if ((!args || args.memberIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memberIds'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["memberIds"] = args ? args.memberIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Squad.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Squad resources.
 */
export interface SquadState {
    /**
     * User ObjectId.
     */
    memberIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Squad.
     */
    name?: pulumi.Input<string>;
    /**
     * Team id.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Squad resource.
 */
export interface SquadArgs {
    /**
     * User ObjectId.
     */
    memberIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Squad.
     */
    name?: pulumi.Input<string>;
    /**
     * Team id.
     */
    teamId: pulumi.Input<string>;
}
