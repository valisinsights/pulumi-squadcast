// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this resource to manage the Team roles and their permissions
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleTeamRole = new squadcast.TeamRole("exampleTeamRole", {
 *     teamId: exampleTeam.then(exampleTeam => exampleTeam.id),
 *     abilities: [
 *         "create-escalation-policies",
 *         "read-escalation-policies",
 *         "update-escalation-policies",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * teamID:teamRole(exAdmin, User, Observer) Use 'Get All Teams' API to get the id of the team
 *
 * ```sh
 *  $ pulumi import squadcast:index/teamRole:TeamRole example_resource_name "62d2fe23a57381088224d726:Admin"
 * ```
 */
export class TeamRole extends pulumi.CustomResource {
    /**
     * Get an existing TeamRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamRoleState, opts?: pulumi.CustomResourceOptions): TeamRole {
        return new TeamRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/teamRole:TeamRole';

    /**
     * Returns true if the given object is an instance of TeamRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamRole.__pulumiType;
    }

    /**
     * abilities.
     * Current available abilities are :
     * create-escalation-policies, create-postmortems, create-runbooks, create-schedules, create-services, create-slos, create-squads, create-status-pages, delete-escalation-policies, delete-postmortems, delete-runbooks, delete-schedules, delete-services, delete-slos, delete-squads, delete-status-pages, read-escalation-policies, read-postmortems, read-runbooks, read-schedules, read-services, read-slos, read-squads, read-status-pages, read-team-analytics, update-escalation-policies, update-postmortems, update-runbooks, update-schedules, update-services, update-slos, update-squads, update-status-pages
     */
    public readonly abilities!: pulumi.Output<string[]>;
    /**
     * Team role default.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * Team role name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Team id.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a TeamRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamRoleArgs | TeamRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamRoleState | undefined;
            resourceInputs["abilities"] = state ? state.abilities : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as TeamRoleArgs | undefined;
            if ((!args || args.abilities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'abilities'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["abilities"] = args ? args.abilities : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["default"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamRole resources.
 */
export interface TeamRoleState {
    /**
     * abilities.
     * Current available abilities are :
     * create-escalation-policies, create-postmortems, create-runbooks, create-schedules, create-services, create-slos, create-squads, create-status-pages, delete-escalation-policies, delete-postmortems, delete-runbooks, delete-schedules, delete-services, delete-slos, delete-squads, delete-status-pages, read-escalation-policies, read-postmortems, read-runbooks, read-schedules, read-services, read-slos, read-squads, read-status-pages, read-team-analytics, update-escalation-policies, update-postmortems, update-runbooks, update-schedules, update-services, update-slos, update-squads, update-status-pages
     */
    abilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Team role default.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Team role name.
     */
    name?: pulumi.Input<string>;
    /**
     * Team id.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamRole resource.
 */
export interface TeamRoleArgs {
    /**
     * abilities.
     * Current available abilities are :
     * create-escalation-policies, create-postmortems, create-runbooks, create-schedules, create-services, create-slos, create-squads, create-status-pages, delete-escalation-policies, delete-postmortems, delete-runbooks, delete-schedules, delete-services, delete-slos, delete-squads, delete-status-pages, read-escalation-policies, read-postmortems, read-runbooks, read-schedules, read-services, read-slos, read-squads, read-status-pages, read-team-analytics, update-escalation-policies, update-postmortems, update-runbooks, update-schedules, update-services, update-slos, update-squads, update-status-pages
     */
    abilities: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Team role name.
     */
    name?: pulumi.Input<string>;
    /**
     * Team id.
     */
    teamId: pulumi.Input<string>;
}
