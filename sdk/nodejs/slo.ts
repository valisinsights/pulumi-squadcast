// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `squadcast.SLO` manages an SLO.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleUser = squadcast.getUser({
 *     email: "test@example.com",
 * });
 * const exampleService = exampleTeam.then(exampleTeam => squadcast.getService({
 *     name: "example service name",
 *     teamId: exampleTeam.id,
 * }));
 * const exampleSlo = new squadcast.SLO("exampleSlo", {
 *     teamId: exampleTeam.then(exampleTeam => exampleTeam.id),
 *     description: "Slo for checkout flow",
 *     targetSlo: 99.99,
 *     serviceIds: [exampleService.then(exampleService => exampleService.id)],
 *     slis: [
 *         "latency",
 *         "high-err-rate",
 *     ],
 *     timeIntervalType: "rolling",
 *     durationInDays: 7,
 *     rules: [
 *         {
 *             name: "breached_error_budget",
 *         },
 *         {
 *             name: "remaining_error_budget",
 *             threshold: 11,
 *         },
 *         {
 *             name: "unhealthy_slo",
 *             threshold: 1,
 *         },
 *     ],
 *     notify: {
 *         userIds: [exampleUser.then(exampleUser => exampleUser.id)],
 *     },
 *     entityOwner: {
 *         id: exampleUser.then(exampleUser => exampleUser.id),
 *         type: "user",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * teamID:sloID Use 'Get All Teams' and 'Get All Slos' APIs to get the id of the team and slo respectively
 *
 * ```sh
 *  $ pulumi import squadcast:index/sLO:SLO test 61443b953ffd52818bf1617a:1023
 * ```
 */
export class SLO extends pulumi.CustomResource {
    /**
     * Get an existing SLO resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SLOState, opts?: pulumi.CustomResourceOptions): SLO {
        return new SLO(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/sLO:SLO';

    /**
     * Returns true if the given object is an instance of SLO.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SLO {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SLO.__pulumiType;
    }

    /**
     * Description of the SLO.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
     */
    public readonly durationInDays!: pulumi.Output<number>;
    /**
     * SLO end time. Required only when SLO time interval type set to "fixed"
     */
    public readonly endTime!: pulumi.Output<string>;
    /**
     * SLO owner.
     */
    public readonly entityOwner!: pulumi.Output<outputs.SLOEntityOwner>;
    /**
     * The name of the SLO.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
     */
    public readonly notify!: pulumi.Output<outputs.SLONotify | undefined>;
    /**
     * SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
     */
    public readonly rules!: pulumi.Output<outputs.SLORule[] | undefined>;
    /**
     * Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
     */
    public readonly serviceIds!: pulumi.Output<string[]>;
    /**
     * List of indentified SLIs for the SLO
     */
    public readonly slis!: pulumi.Output<string[]>;
    /**
     * SLO start time. Required only when SLO time interval type set to "fixed"
     */
    public readonly startTime!: pulumi.Output<string>;
    /**
     * The target SLO for the time period.
     */
    public readonly targetSlo!: pulumi.Output<number>;
    /**
     * The team which SLO resource belongs to
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * Type of the SLO. Values can either be "rolling" or "fixed"
     */
    public readonly timeIntervalType!: pulumi.Output<string>;

    /**
     * Create a SLO resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SLOArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SLOArgs | SLOState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SLOState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["durationInDays"] = state ? state.durationInDays : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["entityOwner"] = state ? state.entityOwner : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notify"] = state ? state.notify : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["serviceIds"] = state ? state.serviceIds : undefined;
            resourceInputs["slis"] = state ? state.slis : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["targetSlo"] = state ? state.targetSlo : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["timeIntervalType"] = state ? state.timeIntervalType : undefined;
        } else {
            const args = argsOrState as SLOArgs | undefined;
            if ((!args || args.serviceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceIds'");
            }
            if ((!args || args.slis === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slis'");
            }
            if ((!args || args.targetSlo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetSlo'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.timeIntervalType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeIntervalType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["durationInDays"] = args ? args.durationInDays : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["entityOwner"] = args ? args.entityOwner : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notify"] = args ? args.notify : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["serviceIds"] = args ? args.serviceIds : undefined;
            resourceInputs["slis"] = args ? args.slis : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["targetSlo"] = args ? args.targetSlo : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["timeIntervalType"] = args ? args.timeIntervalType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SLO.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SLO resources.
 */
export interface SLOState {
    /**
     * Description of the SLO.
     */
    description?: pulumi.Input<string>;
    /**
     * Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
     */
    durationInDays?: pulumi.Input<number>;
    /**
     * SLO end time. Required only when SLO time interval type set to "fixed"
     */
    endTime?: pulumi.Input<string>;
    /**
     * SLO owner.
     */
    entityOwner?: pulumi.Input<inputs.SLOEntityOwner>;
    /**
     * The name of the SLO.
     */
    name?: pulumi.Input<string>;
    /**
     * Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
     */
    notify?: pulumi.Input<inputs.SLONotify>;
    /**
     * SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
     */
    rules?: pulumi.Input<pulumi.Input<inputs.SLORule>[]>;
    /**
     * Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
     */
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of indentified SLIs for the SLO
     */
    slis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SLO start time. Required only when SLO time interval type set to "fixed"
     */
    startTime?: pulumi.Input<string>;
    /**
     * The target SLO for the time period.
     */
    targetSlo?: pulumi.Input<number>;
    /**
     * The team which SLO resource belongs to
     */
    teamId?: pulumi.Input<string>;
    /**
     * Type of the SLO. Values can either be "rolling" or "fixed"
     */
    timeIntervalType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SLO resource.
 */
export interface SLOArgs {
    /**
     * Description of the SLO.
     */
    description?: pulumi.Input<string>;
    /**
     * Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
     */
    durationInDays?: pulumi.Input<number>;
    /**
     * SLO end time. Required only when SLO time interval type set to "fixed"
     */
    endTime?: pulumi.Input<string>;
    /**
     * SLO owner.
     */
    entityOwner?: pulumi.Input<inputs.SLOEntityOwner>;
    /**
     * The name of the SLO.
     */
    name?: pulumi.Input<string>;
    /**
     * Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
     */
    notify?: pulumi.Input<inputs.SLONotify>;
    /**
     * SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
     */
    rules?: pulumi.Input<pulumi.Input<inputs.SLORule>[]>;
    /**
     * Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
     */
    serviceIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of indentified SLIs for the SLO
     */
    slis: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SLO start time. Required only when SLO time interval type set to "fixed"
     */
    startTime?: pulumi.Input<string>;
    /**
     * The target SLO for the time period.
     */
    targetSlo: pulumi.Input<number>;
    /**
     * The team which SLO resource belongs to
     */
    teamId: pulumi.Input<string>;
    /**
     * Type of the SLO. Values can either be "rolling" or "fixed"
     */
    timeIntervalType: pulumi.Input<string>;
}
