// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [Squadcast Runbook](https://support.squadcast.com/docs/runbooks) is a compilation of routine procedures and operations that are documented for reference while working on a critical incident. Sometimes, it can also be referred to as a Playbook.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleUser = squadcast.getUser({
 *     email: "test@example.com",
 * });
 * const exampleRunbook = new squadcast.Runbook("exampleRunbook", {
 *     teamId: exampleTeam.then(exampleTeam => exampleTeam.id),
 *     steps: [
 *         {
 *             content: "some text here",
 *         },
 *         {
 *             content: "some text here 2",
 *         },
 *     ],
 *     entityOwner: {
 *         id: exampleUser.then(exampleUser => exampleUser.id),
 *         type: "user",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * teamID:runbookID Use 'Get All Teams' and 'Get All Runbooks' APIs to get the id of the team and runbook respectively
 *
 * ```sh
 *  $ pulumi import squadcast:index/runbook:Runbook test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
 * ```
 */
export class Runbook extends pulumi.CustomResource {
    /**
     * Get an existing Runbook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RunbookState, opts?: pulumi.CustomResourceOptions): Runbook {
        return new Runbook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/runbook:Runbook';

    /**
     * Returns true if the given object is an instance of Runbook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Runbook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Runbook.__pulumiType;
    }

    /**
     * Runbooks owner.
     */
    public readonly entityOwner!: pulumi.Output<outputs.RunbookEntityOwner>;
    /**
     * Name of the Runbook.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
     */
    public readonly steps!: pulumi.Output<outputs.RunbookStep[]>;
    /**
     * Team id.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a Runbook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RunbookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RunbookArgs | RunbookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RunbookState | undefined;
            resourceInputs["entityOwner"] = state ? state.entityOwner : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as RunbookArgs | undefined;
            if ((!args || args.steps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'steps'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["entityOwner"] = args ? args.entityOwner : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Runbook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Runbook resources.
 */
export interface RunbookState {
    /**
     * Runbooks owner.
     */
    entityOwner?: pulumi.Input<inputs.RunbookEntityOwner>;
    /**
     * Name of the Runbook.
     */
    name?: pulumi.Input<string>;
    /**
     * Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
     */
    steps?: pulumi.Input<pulumi.Input<inputs.RunbookStep>[]>;
    /**
     * Team id.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Runbook resource.
 */
export interface RunbookArgs {
    /**
     * Runbooks owner.
     */
    entityOwner?: pulumi.Input<inputs.RunbookEntityOwner>;
    /**
     * Name of the Runbook.
     */
    name?: pulumi.Input<string>;
    /**
     * Step by Step instructions, you can add as many steps as you want, supports markdown formatting.
     */
    steps: pulumi.Input<pulumi.Input<inputs.RunbookStep>[]>;
    /**
     * Team id.
     */
    teamId: pulumi.Input<string>;
}
